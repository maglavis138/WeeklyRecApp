{
    "collab_server" : "",
    "contents" : "library(\"dplyr\")\nlibrary(\"viridisLite\")\nlibrary(\"highcharter\")\nlibrary(\"quantmod\")\nlibrary(\"rlist\")\n\n\n\n\n\nDateRangeArticles <- DataArticlesBH[which(DataArticlesBH$date >= \"2017-06-01\"  & DataArticlesBH$date <= \"2017-06-06\"),]\n\n\n\n\n\n\n\n### SPIDERWEB\n\nhc <-highchart() %>%\n  hc_chart(type = \"line\", polar = TRUE) %>%\n  hc_xAxis(categories = list(\"sales\", \"Marketing\", \"Development\", \"Customer Support\"), tickmarkPlacement = \"on\", lineWidth = 0) %>%\n  hc_pane(size = \"80%\") %>%\n  hc_yAxis(gridLineInterpolation = \"polygon\", lineWidth = 0, min = 0) %>% \n  hc_add_series(data = list(55,12,10,5))\n  {if(TRUE) hc_add_series(data = list(43,19,60,35)) else .} %>%\n  \n  hc_legend(enabled = TRUE) %>%\n  hc_add_theme(hc_theme_smpl())\nhc\n\nlibrary(RMySQL)\nmydb = dbConnect(MySQL(), host=\"104.198.210.36\", user = \"root\", password = \"tacozombies54992\", db = \"analytics\")\n# rs <- dbSendQuery(mydb, 'set character set \"utf8\"')\nrs <- dbSendQuery(mydb, \"select status_id, sponsored from WAM_FEED_DATA\")\nDataSponsor <- fetch(rs, -1)\ndbClearResult(rs)\ndbDisconnect(mydb)\n\n\n\n\nWeekLinks <- DataArticles[which(DataArticles$date >= \"2017-01-01\" & DataArticles$date <= \"2017-01-31\"),]\n\nCatdf <- ddply(WeekLinks, \"date\", summarize, AnimalsLC = sum(ifelse(category == \"Animals\", link_clicks, 0)), BeautyLC = sum(ifelse(category == \"Beauty & Fashion\", link_clicks, 0)), CelebLC = sum(ifelse(category == \"Celebrity & Gossip\", link_clicks, 0)), CitiPoliticsLC = sum(ifelse(category == \"Citizenship & Politics\", link_clicks, 0)), FamilyLC = sum(ifelse(category == \"Family & Friends\", link_clicks, 0)), FoodLC = sum(ifelse(category == \"Food & Beverages\", link_clicks, 0)), IdentityLC = sum(ifelse(category == \"Identities\", link_clicks, 0)), LatinoLC = sum(ifelse(category == \"Latino Culture\", link_clicks, 0)), MusicLC = sum(ifelse(category == \"Music\", link_clicks, 0)), NewsLC = sum(ifelse(category == \"News & Issues\", link_clicks, 0)), SensationLC = sum(ifelse(category == \"Sensationalist\", link_clicks, 0)), SexLC = sum(ifelse(category == \"Sex & Relationships\", link_clicks, 0)), SportsLC = sum(ifelse(category == \"Sports\", link_clicks, 0)), TvLC = sum(ifelse(category == \"TV & Movies\", link_clicks, 0)), TotalLC = sum(link_clicks))\n\nWeekLinks %>%\n  group_by(date, category) %>%\n  summarize(link_clicks = sum(link_clicks))\n\n\n\n\n\n\n\n\nCatdf2 <- ddply(WeekLinks, c(\"date\", \"category\"), summarize, link_clicks = sum(link_clicks))\nCatdf2 <- cast(Catdf2, date ~ category, fill = 0)\nCatdf <- Catdf[order(Catdf$TotalLC  , decreasing = TRUE),]\nCatdf <- Catdf[1:min(nrow(Catdf),5), -16]\n\nCatdfg <- gather(Catdf, \"date\", \"link_clicks\", 2:15)\nnames(Catdfg) <- c(\"date\", \"category\", \"y\")\n\nCatdfs <- spread(Catdfg, \"date\", \"y\")\nCatdfs$category <- as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category))\nCatdfs <- Catdfs[,c(\"category\",as.character(Catdf$date))]\n\ncolores<- c('#B2182B','#D73027','#F46D43','#FDAE61','#FEE090','#FFFFD9','#EDF8B1','#C7E9B4','#7FCDBB','#41B6C4','#1D91C0','#225EA8','#253494','#081D58')\n\nds <- lapply(1:nrow(Catdfs), function(x){\n  \n  list(name = as.character(Catdfs[x,]$category), \n       \n       data = lapply(2:ncol(Catdfs), function(y){\n         \n         list(name = as.character(names(Catdfs[y])), y = Catdfs[x,y], drilldown = as.character(names(Catdfs[y])))}\n         \n       ))\n})\n\ndrilldown <- lapply(1:nrow(Catdf), function(x){\n  \n  list(name = \"Link Clicks\", id = as.character(Catdf[x,]$date), \n       \n       data = lapply(1:nrow(WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]), function(y){\n         \n         WeekLinksDay <- WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]\n         WeekLinksDay <- WeekLinksDay[order(WeekLinksDay$link_clicks, decreasing = TRUE),]\n         CatColors <- data.frame(category = as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category)), color = colores)\n         \n         list(name = WeekLinksDay[y,]$headline, y = WeekLinksDay[y,]$link_clicks, url = WeekLinksDay[y,]$permalink, \n              color = as.character(CatColors[which(CatColors$category == WeekLinksDay[y,]$category),]$color))}\n         \n       ))\n})\n\nhc <- highchart() %>% \n  hc_chart(type = \"column\") %>% \n  hc_colors(colores) %>%\n  hc_plotOptions(column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\"), series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>%\n  hc_xAxis(type = \"category\", labels = list(formatter = JS(\"function () {formatted = this.value.length > 10? this.value.substring(0,10) + '...' : this.value;return formatted;}\"))) %>% \n  hc_yAxis(title = list(text = \"Link Clicks\")) %>% \n  hc_add_series_list(ds) %>% \n  hc_drilldown(series = drilldown) %>% \n  hc_exporting(enabled = FALSE)%>% \n  hc_legend(enabled = TRUE) %>% \n  hc_add_theme(hc_theme_smpl())\n\nhc\n\n\n\n\n\n\n\n\n\n\n\n\noutput$Plot1_Title <- renderHighchart({\n  \n  plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n  plot_subtitle <- paste(as.character(number_article$n-9), \" - \", as.character(number_article$n))\n  \n  hc <- highchart() %>% \n    hc_chart(type = \"bar\", height = 500) %>%\n    hc_title(text = plot_title, align = \"center\") %>%\n    hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n    hc_add_theme(hc_theme_smpl())\n  hc\n  \n})\n\n\n\n\nWeekLinksTop <- DataArticles[which(DataArticles$date >= \"2016-07-07\" & DataArticles$date <= \"2016-07-14\"),]\nWeekLinksTop <- WeekLinksTop[order(WeekLinksTop$link_clicks, decreasing = TRUE),]\nWeekLinksTop <- WeekLinksTop[1:10,]\nWeekLinksTop <- WeekLinksTop[,c(2,5,17)]\n\nds <- lapply(seq(10), function(x){\n  list(data = WeekLinksTop[x,]$link_clicks, name = WeekLinksTop[x,]$headline, url = WeekLinksTop[x,]$permalink)\n})\n\ndf <- data.frame( x = WeekLinksTop$headline, y = WeekLinksTop$link_clicks, url = WeekLinksTop$permalink, name = \"Link Clicks\")\n\nhc <- highchart() %>% \n  hc_plotOptions(series = list(marker = list(enabled = FALSE))) %>% \n  hc_add_series_df(data = df)\n  \nhc  \n  \n  \n  # hc_plotOptions(bar = list(borderColor = \"black\")) %>% \n  # hc_xAxis(categories = reorder(WeekLinksTop$headline, WeekLinksTop$link_clicks)) %>% \n  # hc_yAxis(title = list(text = \"Link Clicks\"))%>% \n  # hc_add_series(data = c(WeekLinksTop$link_clicks), name = \"Link Clicks\")%>% \n  # hc_exporting(enabled = FALSE)%>% \n  # hc_legend(enabled = FALSE)%>% \n  # hc_add_theme(hc_theme_smpl())\n\n\n\n\n\nWeekVideosTop <- DataVideos[which(DataVideos$date >= \"2016-07-07\" & DataVideos$date <= \"2016-07-14\"),]\nWeekVideosTop <- WeekVideosTop[order(WeekVideosTop$post_video_views, decreasing = TRUE),]\nWeekVideosTop <- WeekVideosTop[1:min(nrow(WeekVideosTop),5),]\n\ndf <- WeekVideosTop[,c(4,52:92)]\ndf <- gather(df, \"seconds_viewed\", \"percentage_viewed\", 2:42)\ndf <- dlply(df,\"sharetext\", function (x){list(data = x$percentage_viewed, name = unique(x$sharetext))})\nds <- lapply(1:nrow(WeekVideosTop), function(x){\n  list(data = df[[x]]$data, name = df[[x]]$name)\n})\n\nhc <- highchart() %>% \n  hc_chart(type = \"spline\") %>%\n  hc_plotOptions(series = list(marker = list(enabled = FALSE))) %>% \n  hc_add_series_list(ds) %>% \n  hc_add_theme(hc_theme_smpl()) %>% \n  hc_legend(align = \"right\", verticalAlign = \"top\", layout = \"vertical\", floating = TRUE, y = 1) %>%  \n  hc_xAxis(title = list(text = \"Seconds Viewed\")) %>%\n  hc_tooltip(shared = TRUE)\nhc\n\n\n\n\n\nWeekVideosTop <- DataVideos[which(DataVideos$date >= \"2016-07-07\" & DataVideos$date <= \"2016-07-14\"),]\nWeekLinksTop <- WeekLinksTop[order(WeekLinksTop$link_clicks, decreasing = TRUE),]\nWeekLinksTop <- WeekLinksTop[1:10,]\nWeekLinksTop <- WeekLinksTop[,c(2,5,17)]\n\nds <- lapply(seq(10), function(x){\n  list(y = WeekLinksTop[x,]$link_clicks, url = WeekLinksTop[x,]$permalink)\n})\n\n# df <- data.frame( x = WeekLinksTop$headline, y = WeekLinksTop$link_clicks, url = WeekLinksTop$permalink, name = \"Link Clicks\")\n\n# DataTop <- data.frame(y = WeekLinksTop$link_clicks, url = WeekLinksTop$permalink)\n# DataTop$y <- as.numeric(DataTop$y)\n# DataTop$url <- as.character(DataTop$url)\n# DataTop <- lapply(split(DataTop,seq_along(DataTop[,1])), as.list)\n\nhc <- highchart() %>% \n  hc_chart(type = \"bar\") %>% \n  hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { location.href = this.options.url; }\"))))) %>% \n  hc_xAxis(categories = reorder(WeekLinksTop$headline, WeekLinksTop$link_clicks)) %>% \n  hc_yAxis(title = list(text = \"Link Clicks\"))%>% \n  hc_add_series(data = ds)%>% \n  hc_exporting(enabled = FALSE)%>% \n  hc_legend(enabled = FALSE)%>% \n  hc_add_theme(hc_theme_smpl())\n\nhc\n\nhc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { location.href = this.options.url; }\")))), bar = list(borderColor = \"black\")) %>% \n  \n  \n\nWeekLinksTop <- DataArticles[which(DataArticles$date >= \"2016-07-07\" & DataArticles$date <= \"2016-07-14\"),]\nWeekLinksTop <- WeekLinksTop[order(WeekLinksTop$link_clicks, decreasing = TRUE),]\nWeekLinksTop <- WeekLinksTop[1:min(nrow(WeekLinksTop),10),]\n\nds <- lapply(1:nrow(WeekLinksTop), function(x){\n  list(y = WeekLinksTop[x,]$link_clicks, url = WeekLinksTop[x,]$permalink)\n})\n\nhc <- highchart() %>% \n  hc_chart(type = \"bar\") %>% \n  hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), bar = list(borderColor = \"black\")) %>% \n  hc_xAxis(categories = reorder(WeekLinksTop$headline, WeekLinksTop$link_clicks)) %>% \n  hc_yAxis(title = list(text = \"Link Clicks\"))%>% \n  hc_add_series(data = ds, name = \"Link Clicks\")%>% \n  hc_exporting(enabled = FALSE)%>% \n  hc_legend(enabled = FALSE)%>% \n  hc_add_theme(hc_theme_smpl())\n\nhc\n\nhcwaffle(c(\"nice\", \"good\"), c(10, 20))\n\nhcwaffle(c(\"nice\", \"good\"), c(10, 20), size = 10)\n\nhcwaffle(c(\"nice\", \"good\"), c(100, 200), icons = \"child\")\n\nhcwaffle(c(\"car\", \"truck\", \"plane\"), c(75, 30, 20), icons = c(\"car\", \"truck\", \"plane\"))\n\nmtcars2 <- mtcars[1:20, ]\nx <- dist(mtcars2)\n\nhchart\n\n\n\n\n\n\nhc <- highchart() %>% \n  hc_chart(type = \"heatmap\") %>% \n  hc_xAxis(categories = ) %>% \n  \n  \n  \n  \n  hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), bar = list(borderColor = \"black\")) %>% \n  \n  hc_yAxis(title = list(text = \"Link Clicks\"))%>% \n  hc_add_series(data = ds, name = \"Link Clicks\")%>% \n  hc_exporting(enabled = FALSE)%>% \n  hc_legend(enabled = FALSE)%>% \n  hc_add_theme(hc_theme_smpl())\n\nhc\n\n\n\n\n\n\n\n\nWeekLinks <- DataArticles[which(DataArticles$date >= \"2016-07-20\" & DataArticles$date <= \"2016-07-27\"),]\n\n\nCatdfm1 <- ddply(WeekLinks, \"category\", summarize, AvgCTR = mean(na.omit(ctr)), AvgIR = mean(na.omit(interaction_rate)), AvgReach = mean(na.omit(post_reach)), AvgLinkClicks = mean(na.omit(link_clicks)))\nCatdfm2 <- as.data.frame(table(WeekLinks$category))\ncolnames(Catdfm2) <- c(\"category\", \"Freq\")\nCatdfm <- merge(Catdfm2, Catdfm1, by = \"category\", all = TRUE)\nCatdfm[is.na(Catdfm)] <- 0\n\n\nds <- lapply(1:nrow(Catdfm), function(x){\n  \n  Catdfm <- Catdfm[order(Catdfm$category, decreasing = FALSE),]\n  \n  list(name = as.character(Catdfm[x,]$category), y = Catdfm[x,]$Freq, drilldown = ifelse(Catdfm[x,]$Freq != 0, as.character(Catdfm[x,]$category), \"null\"))\n})\n\ndrilldown <- lapply(1:nrow(WeekLinks), function(x){\n  \n  list(name = \"Link Clicks\" , id = as.character(Catdfm[x,]$category), \n       \n       data = lapply(1:nrow(WeekLinks[which(WeekLinks$category == Catdfm[x,]$category),]), function(y){\n         \n         WeekLinksCat <- WeekLinks[which(WeekLinks$category == Catdfm[x,]$category),]\n         WeekLinksCat <- WeekLinksCat[order(WeekLinksCat$link_clicks, decreasing = TRUE),]\n         \n         list(name = WeekLinksCat[y,]$headline, y = WeekLinksCat[y,]$link_clicks, url = WeekLinksCat[y,]$permalink)}\n         \n       ))\n})\n\n\ncolorCount = length(unique(WeekLinks$category))\n\nhc <- highchart() %>% \n  hc_chart(type = \"pie\") %>% \n  hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), pie = list(borderColor = \"black\", dataLabels = list(formatter = JS(\"function () {formatted = this.point.name.length > 25? this.point.name.substring(0,25) + '...' : this.point.name;return formatted;}\"), style = list(width = \"100px\", format: '{point.y:,.0f}%'))))%>%\n  \n  hc_add_series(data = ds, name = \"Number of Articles\")%>% \n  hc_drilldown(series = drilldown) %>% \n  hc_exporting(enabled = FALSE)%>% \n  hc_legend(enabled = FALSE)%>% \n  hc_colors(colorRampPalette(brewer.pal(12, \"Spectral\"))(colorCount)) %>%\n  hc_add_theme(hc_theme_smpl())\n\nhc\n\n\n\n\n\nCatdf <- Catdf[order(Catdf$TotalLC  , decreasing = TRUE),]\nCatdf <- Catdf[1:min(nrow(Catdf),5),]\ncolorCount = length(unique(DataArticles$category))\n\nhc <- highchart() %>% \n  hc_chart(type = \"column\") %>% \n  hc_colors(colorRampPalette(brewer.pal(12, \"Spectral\"))(colorCount)) %>%\n  hc_plotOptions(column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>% \n  hc_xAxis(categories = Catdf$date) %>% \n  hc_yAxis(title = list(text = \"Link Clicks\")) %>% \n  hc_add_series(data = Catdf$AnimalsLC, name = \"Animals\") %>% \n  hc_add_series(data = Catdf$BeautyLC, name = \"Beauty & Fashion\") %>%\n  hc_add_series(data = Catdf$CelebLC, name = \"Celebrity & Gossip\") %>%\n  hc_add_series(data = Catdf$PoliticsLC, name = \"Citizenship & Politics\") %>%\n  hc_add_series(data = Catdf$FamilyLC, name = \"Family & Friends\") %>%\n  hc_add_series(data = Catdf$FoodLC, name = \"Food & Beverages\") %>%\n  hc_add_series(data = Catdf$IdentityLC, name = \"Identities\") %>%\n  hc_add_series(data = Catdf$LatinoLC, name = \"Latino Culture\") %>%\n  hc_add_series(data = Catdf$MusicLC, name = \"Music\") %>%\n  hc_add_series(data = Catdf$NewsLC, name = \"News & Issues\") %>%\n  hc_add_series(data = Catdf$SensationLC, name = \"Sensationalist\") %>%\n  hc_add_series(data = Catdf$SexLC, name = \"Sex & Relationships\") %>%\n  hc_add_series(data = Catdf$SportsLC, name = \"Sports\") %>%\n  hc_add_series(data = Catdf$TvLC, name = \"TV & Movies\") %>%\n  hc_exporting(enabled = FALSE)%>% \n  hc_legend(enabled = TRUE) %>% \n  hc_add_theme(hc_theme_smpl())\n\nhc\n\n\n\nCatdf <- ddply(WeekLinks, \"date\", summarize, AnimalsLC = sum(ifelse(category == \"Animals\", link_clicks, 0)), BeautyLC = sum(ifelse(category == \"Beauty & Fashion\", link_clicks, 0)), CelebLC = sum(ifelse(category == \"Celebrity & Gossip\", link_clicks, 0)), CitiPoliticsLC = sum(ifelse(category == \"Citizenship & Politics\", link_clicks, 0)), FamilyLC = sum(ifelse(category == \"Family & Friends\", link_clicks, 0)), FoodLC = sum(ifelse(category == \"Food & Beverages\", link_clicks, 0)), IdentityLC = sum(ifelse(category == \"Identities\", link_clicks, 0)), LatinoLC = sum(ifelse(category == \"Latino Culture\", link_clicks, 0)), MusicLC = sum(ifelse(category == \"Music\", link_clicks, 0)), NewsLC = sum(ifelse(category == \"News & Issues\", link_clicks, 0)), SensationLC = sum(ifelse(category == \"Sensationalist\", link_clicks, 0)), SexLC = sum(ifelse(category == \"Sex & Relationships\", link_clicks, 0)), SportsLC = sum(ifelse(category == \"Sports\", link_clicks, 0)), TvLC = sum(ifelse(category == \"TV & Movies\", link_clicks, 0)), TotalLC = sum(link_clicks))\n\nCatdf <- Catdf[order(Catdf$TotalLC  , decreasing = TRUE),]\nCatdf <- Catdf[1:min(nrow(Catdf),5), -16]\n\nCatdfg <- gather(Catdf, \"date\", \"link_clicks\", 2:15)\nnames(Catdfg) <- c(\"date\", \"category\", \"y\")\n\nCatdfs <- spread(Catdfg, \"date\", \"y\")\nCatdfs$category <- as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category))\nCatdfs <- Catdfs[,c(\"category\",as.character(Catdf$date))]\n\n\nds <- lapply(1:nrow(Catdfs), function(x){\n  \n    list(name = as.character(Catdfs[x,]$category), \n         \n         data = lapply(2:ncol(Catdfs), function(y){\n           \n           list(name = as.character(names(Catdfs[y])), y = Catdfs[x,y], drilldown = as.character(names(Catdfs[y])))}\n           \n           ))\n})\n\n\ndrilldown <- lapply(1:nrow(Catdf), function(x){\n  \n  list(name = \"Link Clicks\", id = as.character(Catdf[x,]$date), \n       \n       data = lapply(1:nrow(WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]), function(y){\n         \n         WeekLinksDay <- WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]\n         WeekLinksDay <- WeekLinksDay[order(WeekLinksDay$link_clicks, decreasing = TRUE),]\n         CatColors <- data.frame(category = as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category)), color = colorRampPalette(brewer.pal(12, \"Spectral\"))(colorCount))\n         \n         list(name = WeekLinksDay[y,]$headline, data = list(name = as.character(WeekLinksDay[y,]$category), y = WeekLinksDay[y,]$link_clicks), url = WeekLinksDay[y,]$permalink, \n              color = as.character(CatColors[which(CatColors$category == WeekLinksDay[y,]$category),]$color))}\n         \n       ))\n})\n\n'#800026','#9E0142','#D53E4F','#F46D43','#FFFFD9','#EDF8B1','#C7E9B4','#7FCDBB','#41B6C4','#1D91C0','#225EA8','#253494','#081D58'\n\n\n'#800026','#9E0142','#D53E4F','#F46D43','#FDAE61','#FEE08B','#E6F598','#ABDDA4','#66C2A5','#3288BD','#5E4FA2','#3F007D'\n\ncolorCount = length(unique(DataArticles$category))\n\nhc <- highchart() %>% \n  hc_chart(type = \"column\") %>% \n  hc_colors(c('#B2182B','#D73027','#F46D43','#FDAE61','#FEE090','#FFFFD9','#EDF8B1','#C7E9B4','#7FCDBB','#41B6C4','#1D91C0','#225EA8','#253494','#081D58')) %>%\n  hc_plotOptions(column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\"), series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>%\n  hc_xAxis(type = \"category\", labels = list(formatter = JS(\"function () {formatted = this.value.length > 10? this.value.substring(0,10) + '...' : this.value;return formatted;}\"))) %>% \n  hc_yAxis(title = list(text = \"Link Clicks\")) %>% \n  hc_add_series_list(ds) %>% \n  hc_drilldown(series = drilldown) %>% \n  hc_exporting(enabled = FALSE)%>% \n  hc_legend(enabled = TRUE) %>% \n  hc_add_theme(hc_theme_smpl())\n\nhc\n\n\na <-  WeekLinks[which(WeekLinks$date %in% Catdf$date), c(\"permalink\", \"headline\", \"date\", \"category\", \"link_clicks\")]\n\na <- a[order(a$date,a$link_clicks, decreasing = TRUE),]\na <- ddply(a, \"date\", mutate, order = seq(1, length(date), by = 1)) \n\nas <- spread(a, \"order\", \"link_clicks\", fill = 0)\n\n\ndrilldown <- lapply(1:nrow(Catdfs), function(x){\n  \n  list(name = as.character(Catdfs[x,]$category) ,id = lapply(1:nrow(Catdf),), function(y){Catdf[y,]$date}), \n  \n       data = lapply(1:nrow(WeekLinks[which(WeekLinks$date == Catdf[y,]$date),]), function(z){\n         \n         \n         \n         \n         \n         })\n  \n  \n       \n       data = lapply(1:nrow(WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]), function(y){\n         \n         WeekLinksDay <- WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]\n         WeekLinksDay <- WeekLinksDay[order(WeekLinksDay$link_clicks, decreasing = TRUE),]\n         CatColors <- data.frame(category = as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category)), color = colorRampPalette(brewer.pal(12, \"Spectral\"))(colorCount))\n         \n         list(name = as.character(WeekLinksDay[y,]$category), data = list(name = as.character(WeekLinksDay[y,]$headline), y = WeekLinksDay[y,]$link_clicks, url = WeekLinksDay[y,]$permalink, \n              color = as.character(CatColors[which(CatColors$category == WeekLinksDay[y,]$category),]$color)))}\n         \n       ))\n})\n\n\ndrilldown <- list(name = \"Sensationalist\", id = \"2016-07-07\", data = lapply(1: nrow(a[which(a$category == \"Sensationalist\" && a$date == \"2016-07-07\"),]), function(x){\n  \n            aday <- a[which(a$category == \"Sensationalist\" && a$date == \"2016-07-07\"),]\n  \n            list(name = aday[x,]$headline, y = aday[x,]$link_clicks) \n  \n}       \n))\n\n\nusdjpy <- getSymbols(\"USD/JPY\", src = \"oanda\", auto.assign = FALSE)\neurkpw <- getSymbols(\"EUR/KPW\", src = \"oanda\", auto.assign = FALSE)\n\ndates <- as.Date(c(\"2015-05-08\", \"2015-09-12\"), format = \"%Y-%m-%d\")\n\n\nAvgDailyArticleReach <- ddply(DataArticles, \"date\", summarise, AvgDailyReach = mean(post_reach))\nrow.names(AvgDailyArticleReach) <- AvgDailyArticleReach$date\nAvgDailyArticleReach$AvgDailyReach <- as.numeric(formatC(AvgDailyArticleReach$AvgDailyReach, format = \"f\", digits = 2))\nAvgDailyArticleReach$date <- NULL\nAvgDailyArticleReach <- as.xts(AvgDailyArticleReach)\n\nAvgDailyArticleLC <- ddply(DataArticles, \"date\", summarise, AvgDailyLC = mean(link_clicks))\nrow.names(AvgDailyArticleLC) <- AvgDailyArticleLC$date\nAvgDailyArticleLC$AvgDailyLC <- as.numeric(formatC(AvgDailyArticleLC$AvgDailyLC, format = \"f\", digits = 2))\nAvgDailyArticleLC$date <- NULL\nAvgDailyArticleLC <- as.xts(AvgDailyArticleLC)\n\nAvgDailyArticleCTR <- ddply(DataArticles, \"date\", summarise, AvgDailyCTR = mean(ctr)*100)\nrow.names(AvgDailyArticleCTR) <- AvgDailyArticleCTR$date\nAvgDailyArticleCTR$AvgDailyCTR <- as.numeric(formatC(AvgDailyArticleCTR$AvgDailyCTR, format = \"f\", digits = 2))\nAvgDailyArticleCTR$date <- NULL\nAvgDailyArticleCTR <- as.xts(AvgDailyArticleCTR)\n\nplotLines = list(value = 10000, color = \"red\", dashStyle = \"shortdash\", width = 2, label = list(text = \"10k Clicks\")\n\nhighchart(type = \"stock\") %>%\n  hc_yAxis_multiples(\n    list(offset = 30, title = list(text = \"REACH\"), height = \"45%\", top = \"0%\"),\n    list(offset = 30, title = list(text = \"CTR\"), height = \"25%\", top = \"47.5%\"),\n    list(offset = 30, title = list(text = \"Link Cicks\"), height = \"25%\", top = \"75%\")\n  ) %>% \n  \n  hc_add_series_xts(AvgDailyArticleReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0) %>% \n  hc_add_series_xts(AvgDailyArticleCTR, id = \"Daily CTR\", yAxis = 1, name = \"CTR\", type = \"column\") %>% \n  hc_add_series_xts(AvgDailyArticleLC, id = \"Daily LC\", yAxis = 2, name = \"Link Clicks\", color = \"yellow\") %>%\n  hc_add_series_flags(as.Date(\"2016-07-01\"), title = c(\":(\"), text = c(\"FB Bad Reporting\"), id = \"Daily Reach\") %>%\n  hc_scrollbar(enabled = FALSE) %>%\n  hc_rangeSelector(selected = 0) %>%\n  hc_add_theme(hc_theme_smpl())\n\n\nAvgDailyVideoReach <- ddply(DataVideos, \"date\", summarise, AvgDailyReach = mean(post_reach))\nrow.names(AvgDailyVideoReach) <- AvgDailyVideoReach$date\nAvgDailyVideoReach$AvgDailyReach <- as.numeric(formatC(AvgDailyVideoReach$AvgDailyReach, format = \"f\", digits = 2))\nAvgDailyVideoReach$date <- NULL\nAvgDailyVideoReach <- as.xts(AvgDailyVideoReach)\n\nAvgDailyVideoViews <- ddply(DataVideos, \"date\", summarise, AvgDailyVV = mean(post_video_views))\nrow.names(AvgDailyVideoViews) <- AvgDailyVideoViews$date\nAvgDailyVideoViews$AvgDailyVV <- as.numeric(formatC(AvgDailyVideoViews$AvgDailyVV, format = \"f\", digits = 2))\nAvgDailyVideoViews$date <- NULL\nAvgDailyVideoViews <- as.xts(AvgDailyVideoViews)\n\nAvgDailyVideoIR <- ddply(DataVideos, \"date\", summarise, AvgDailyIR = mean(interaction_rate)*100)\nrow.names(AvgDailyVideoIR) <- AvgDailyVideoIR$date\nAvgDailyVideoIR$AvgDailyIR <- as.numeric(formatC(AvgDailyVideoIR$AvgDailyIR, format = \"f\", digits = 2))\nAvgDailyVideoIR$date <- NULL\nAvgDailyVideoIR <- as.xts(AvgDailyVideoIR)\n\nhighchart(type = \"stock\") %>%\n  hc_yAxis_multiples(\n    list(offset = 30, title = list(text = NULL), height = \"45%\", top = \"0%\"),\n    list(title = list(text = NULL), height = \"25%\", top = \"47.5%\"),\n    list(title = list(text = NULL), height = \"25%\", top = \"75%\")\n  ) %>% \n  \n  hc_add_series_xts(AvgDailyVideoReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0) %>% \n  hc_add_series_xts(AvgDailyArticleIR, id = \"Daily IR\", yAxis = 1, name = \"IR\", type = \"column\") %>% \n  hc_add_series_xts(AvgDailyVideoViews, id = \"Daily Video Views\", yAxis = 2, name = \"Video Views\", color = \"yellow\") %>%\n  hc_add_series_flags(as.Date(\"2016-07-01\"), title = c(\":(\"), text = c(\"FB Bad Reporting\"), id = \"Daily Reach\") %>%\n  hc_scrollbar(enabled = FALSE) %>%\n  hc_rangeSelector(selected = 0) %>%\n  hc_add_theme(hc_theme_smpl())               \n\n\n\nAvgDailyPhotoReach <- ddply(DataPhotos, \"date\", summarise, AvgDailyReach = mean(post_reach))\nrow.names(AvgDailyPhotoReach) <- AvgDailyPhotoReach$date\nAvgDailyPhotoReach$date <- NULL\nAvgDailyPhotoReach <- as.xts(AvgDailyPhotoReach)\n\nAvgDailyPhotoFanReach <- ddply(DataPhotos, \"date\", summarise, AvgDailyVV = mean(post_reach_fan_unique))\nrow.names(AvgDailyPhotoFanReach) <- AvgDailyPhotoFanReach$date\nAvgDailyPhotoFanReach$date <- NULL\nAvgDailyPhotoFanReach <- as.xts(AvgDailyPhotoFanReach)\n\nAvgDailyPhotoIR <- ddply(DataPhotos, \"date\", summarise, AvgDailyCTR = mean(interaction_rate)*100)\nrow.names(AvgDailyPhotoIR) <- AvgDailyPhotoIR$date\nAvgDailyPhotoIR$date <- NULL\nAvgDailyPhotoIR <- as.xts(AvgDailyPhotoIR)\n\n\n\nhighchart(type = \"stock\") %>%\n  hc_yAxis_multiples(\n    list(offset = 30, title = list(text = NULL), height = \"45%\", top = \"0%\"),\n    list(title = list(text = NULL), height = \"25%\", top = \"47.5%\"),\n    list(title = list(text = NULL), height = \"25%\", top = \"75%\")\n  ) %>% \n  \n  hc_add_series_xts(AvgDailyVideoReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0) %>% \n  hc_add_series_xts(AvgDailyArticleIR, id = \"Daily IR\", yAxis = 1, name = \"IR\", type = \"column\") %>% \n  hc_add_series_xts(AvgDailyVideoViews, id = \"Daily Fan Reach\", yAxis = 2, name = \"Fan Reach\", color = \"yellow\") %>%\n  hc_add_series_flags(as.Date(\"2016-07-01\"), title = c(\":(\"), text = c(\"FB Bad Reporting\"), id = \"Daily Reach\") %>%\n  hc_scrollbar(enabled = FALSE) %>%\n  hc_rangeSelector(selected = 0) %>%\n  hc_add_theme(hc_theme_smpl())  \n\n\n\n\n\n\n\n\n\nAvgDailyPhotoReach <- ddply(DataPhotos, \"date\", summarise, AvgDailyReach = mean(post_reach))\nrow.names(AvgDailyPhotoReach) <- AvgDailyPhotoReach$date\nAvgDailyPhotoReach$date <- NULL\nAvgDailyPhotoReach <- as.xts(AvgDailyPhotoReach)\n\nAvgDailyPhotoFanReach <- ddply(DataPhotos, \"date\", summarise, AvgDailyVV = mean(post_reach_fan_unique))\nrow.names(AvgDailyPhotoFanReach) <- AvgDailyPhotoFanReach$date\nAvgDailyPhotoFanReach$date <- NULL\nAvgDailyPhotoFanReach <- as.xts(AvgDailyPhotoFanReach)\n\nAvgDailyPhotoIR <- ddply(DataPhotos, \"date\", summarise, AvgDailyCTR = mean(interaction_rate)*100)\nrow.names(AvgDailyPhotoIR) <- AvgDailyPhotoIR$date\nAvgDailyPhotoIR$date <- NULL\nAvgDailyPhotoIR <- as.xts(AvgDailyPhotoIR)\n\nlabels = list(formatter = JS(\"function () {return (this.value + '%';}\"))\n\nhighchart(type = \"stock\") %>%\n  hc_yAxis_multiples(\n    list(offset = 30, title = list(text = NULL), height = \"45%\", top = \"0%\"),\n    list(title = list(text = NULL), height = \"25%\", top = \"47.5%\"),\n    list(title = list(text = NULL), height = \"25%\", top = \"75%\")\n  ) %>% \n  \n  hc_add_series_xts(AvgDailyPhotoReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0) %>% \n  hc_add_series_xts(AvgDailyPhotoIR, id = \"Daily IR\", yAxis = 1, name = \"IR\", type = \"column\") %>% \n  hc_add_series_xts(AvgDailyPhotoFanReach, id = \"Daily Fan Reach\", yAxis = 2, name = \"Fan Reach\", color = \"yellow\") %>%\n  hc_add_series_flags(as.Date(\"2016-07-01\"), title = c(\":(\"), text = c(\"FB Bad Reporting\"), id = \"Daily Reach\") %>%\n  hc_scrollbar(enabled = FALSE) %>%\n  hc_rangeSelector(selected = 0) %>%\n  hc_add_theme(hc_theme_smpl())  \n\n\n\n\n\nAvgDailyAnimalsReach <- ddply(DataPhotos, \"date\", summarise, AvgDailyReach = mean(post_reach))\nrow.names(AvgDailyPhotoReach) <- AvgDailyPhotoReach$date\nAvgDailyPhotoReach$date <- NULL\nAvgDailyPhotoReach <- as.xts(AvgDailyPhotoReach)\n\nAvgDailyPhotoFanReach <- ddply(DataPhotos, \"date\", summarise, AvgDailyVV = mean(post_reach_fan_unique))\nrow.names(AvgDailyPhotoFanReach) <- AvgDailyPhotoFanReach$date\nAvgDailyPhotoFanReach$date <- NULL\nAvgDailyPhotoFanReach <- as.xts(AvgDailyPhotoFanReach)\n\nAvgDailyPhotoIR <- ddply(DataPhotos, \"date\", summarise, AvgDailyCTR = mean(interaction_rate)*100)\nrow.names(AvgDailyPhotoIR) <- AvgDailyPhotoIR$date\nAvgDailyPhotoIR$date <- NULL\nAvgDailyPhotoIR <- as.xts(AvgDailyPhotoIR)\n\nlabels = list(formatter = JS(\"function () {return (this.value + '%';}\"))\n\nhighchart(type = \"stock\") %>%\n  hc_yAxis_multiples(\n    list(offset = 30, title = list(text = NULL), height = \"45%\", top = \"0%\"),\n    list(title = list(text = NULL), height = \"25%\", top = \"47.5%\"),\n    list(title = list(text = NULL), height = \"25%\", top = \"75%\")\n  ) %>% \n  \n  hc_add_series_xts(AvgDailyPhotoReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0) %>% \n  hc_add_series_xts(AvgDailyPhotoIR, id = \"Daily IR\", yAxis = 1, name = \"IR\", type = \"column\") %>% \n  hc_add_series_xts(AvgDailyPhotoFanReach, id = \"Daily Fan Reach\", yAxis = 2, name = \"Fan Reach\", color = \"yellow\") %>%\n  hc_add_series_flags(as.Date(\"2016-07-01\"), title = c(\":(\"), text = c(\"FB Bad Reporting\"), id = \"Daily Reach\") %>%\n  hc_scrollbar(enabled = FALSE) %>%\n  hc_rangeSelector(selected = 0) %>%\n  hc_add_theme(hc_theme_smpl())  \n\n\n\n#-----------------------------------------------\n\n\n\nAvgDaily <- ddply(DataArticles, c(\"category\", \"date\"), summarise, AvgDailyReach = mean(post_reach))\n\ndates <- data.frame(date = unique(DataArticles$date))\ndates$date <- as.Date(dates$date)\n                                    \nanimals <- merge(dates, AvgDaily[which(AvgDaily$category == \"Animals\"),], by = \"date\", all = TRUE) \nanimals$category <- NULL\nrow.names(animals) <- animals$date\nanimals$date <- NULL\nanimals[is.na(animals)] <- 0\nanimals <- as.xts(animals) \nanimals_ma <- SMA(animals, n = 7)\n\nceleb <- merge(dates, AvgDaily[which(AvgDaily$category == \"Celebrity & Gossip\"),], by = \"date\", all = TRUE)                  \nceleb$category <- NULL\nrow.names(celeb) <- celeb$date\nceleb$date <- NULL\nceleb[is.na(celeb)] <- 0                  \nceleb <- as.xts(celeb)                 \nceleb_ma <- SMA(celeb, n = 7)\n\nlatino <- merge(dates, AvgDaily[which(AvgDaily$category == \"Latino Culture\"),], by = \"date\", all = TRUE)                  \nlatino$category <- NULL\nrow.names(latino) <- latino$date\nlatino$date <- NULL\nlatino[is.na(latino)] <- 0                  \nlatino <- as.xts(latino) \nlatino_ma <- SMA(latino, n = 7)\n\nsensat <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sensationalist\"),], by = \"date\", all = TRUE)                  \nsensat$category <- NULL\nrow.names(sensat) <- sensat$date\nsensat$date <- NULL\nsensat[is.na(sensat)] <- 0                  \nsensat <- as.xts(sensat) \nsensat_ma <- SMA(sensat, n = 7)\n\n\n\nhc <-highchart(type = \"stock\") %>%\n\n  # hc_add_series_xts(animals, id = \"Daily Reach Animals\", name = \"Animals\", color = \"#CF5700\") %>% \n  hc_add_series_xts(animals, id = \"Daily Reach\", name = \"Animals\", color = \"blue\") %>%\n  hc_add_series_xts(animals_ma, id = \"Daily Reach\", name = \"Animals SMA\", color = \"red\") %>%\n  hc_add_series_xts(celeb, id = \"Daily Reach\", name = \"Celebrity & Gossip\", color = \"blue\") %>%\n  hc_add_series_xts(celeb_ma, id = \"Daily Reach\", name = \"Celebrity & Gossip SMA\", color = \"red\") %>%\n  hc_add_series_xts(latino, id = \"Daily Reach\", name = \"Latino Culture\", color = \"blue\") %>%\n  hc_add_series_xts(latino_ma, id = \"Daily Reach\", name = \"Latino Culture SMA\", color = \"red\") %>%\n  hc_add_series_xts(sensat, id = \"Daily Reach\", name = \"Sensationalist\", color = \"blue\") %>%\n  hc_add_series_xts(sensat_ma, id = \"Daily Reach\", name = \"Sensationalist SMA\", color = \"red\") %>%\n  \n  # hc_add_series_xts(latino, id = \"Daily Reach\", name = \"Latino Culture\", color = \"blue\", dataGrouping = list(approximation = \"average\", enabled = TRUE, forced = TRUE, units = list(list(\"week\", list(1))) )) %>%\n  # hc_add_series_xts(b, id = \"Daily Reach\", name = \"Latino Culture SMA\", color = \"red\") %>%\n  # hc_add_series_flags(as.Date(\"2016-07-01\"), title = c(\"-_-\"), text = c(\"FB Bad Reporting\"), id = \"Daily Reach\") %>%\n  hc_scrollbar(enabled = FALSE) %>%\n  hc_rangeSelector(selected = 0) %>%\n  hc_legend(enabled = TRUE) %>%\n  # hc_tooltip(pointFormat = \"{series.name}: <b>{point.y}</b><br/>\", valueSuffix = \" %\") %>%\n  # hc_tooltip(formatter = JS(\"function() {\n  #     var unit = ' %',\n  #                           result = this.y;\n  #                           if(this.series.name == 'CTR'){\n  #                           result += unit;\n  #                           }\n  #                           return result;}\")) %>%\n  \n  hc_add_theme(hc_theme_smpl())\nhc\n\n\n\n\n\n\nAvgDaily <- ddply(DataArticles, c(\"category\", \"date\"), summarise, AvgDailyReach = sum(link_clicks))\n\ndates <- data.frame(date = unique(DataArticles$date))\ndates$date <- as.Date(dates$date)\n\nanimals <- merge(dates, AvgDaily[which(AvgDaily$category == \"Animals\"),], by = \"date\", all = TRUE) \nanimals$category <- NULL\nrow.names(animals) <- animals$date\nanimals$date <- NULL\nanimals[is.na(animals)] <- 0\nanimals <- as.xts(animals) \n\nbeauty <- merge(dates, AvgDaily[which(AvgDaily$category == \"Beauty & Fashion\"),], by = \"date\", all = TRUE)                  \nbeauty$category <- NULL\nrow.names(beauty) <- beauty$date\nbeauty$date <- NULL\nbeauty[is.na(beauty)] <- 0                  \nbeauty <- as.xts(beauty)   \n\nceleb <- merge(dates, AvgDaily[which(AvgDaily$category == \"Celebrity & Gossip\"),], by = \"date\", all = TRUE)                  \nceleb$category <- NULL\nrow.names(celeb) <- celeb$date\nceleb$date <- NULL\nceleb[is.na(celeb)] <- 0                  \nceleb <- as.xts(celeb)   \n\ncitizen <- merge(dates, AvgDaily[which(AvgDaily$category == \"Citizenship & Politics\"),], by = \"date\", all = TRUE)                  \ncitizen$category <- NULL\nrow.names(citizen) <- citizen$date\ncitizen$date <- NULL\ncitizen[is.na(citizen)] <- 0                  \ncitizen <- as.xts(citizen) \n\nfamily <- merge(dates, AvgDaily[which(AvgDaily$category == \"Family & Friends\"),], by = \"date\", all = TRUE)                  \nfamily$category <- NULL\nrow.names(family) <- family$date\nfamily$date <- NULL\nfamily[is.na(family)] <- 0                  \nfamily <- as.xts(family) \n\nfood <- merge(dates, AvgDaily[which(AvgDaily$category == \"Food & Beverages\"),], by = \"date\", all = TRUE)                  \nfood$category <- NULL\nrow.names(food) <- food$date\nfood$date <- NULL\nfood[is.na(food)] <- 0                  \nfood <- as.xts(food) \n\nidentities <- merge(dates, AvgDaily[which(AvgDaily$category == \"Identities\"),], by = \"date\", all = TRUE)               \nidentities$category <- NULL\nrow.names(identities) <- identities$date\nidentities$date <- NULL\nidentities[is.na(identities)] <- 0                  \nidentities <- as.xts(identities) \n\nlatino <- merge(dates, AvgDaily[which(AvgDaily$category == \"Latino Culture\"),], by = \"date\", all = TRUE)                  \nlatino$category <- NULL\nrow.names(latino) <- latino$date\nlatino$date <- NULL\nlatino[is.na(latino)] <- 0                  \nlatino <- as.xts(latino) \n\nmusic <- merge(dates, AvgDaily[which(AvgDaily$category == \"Music\"),], by = \"date\", all = TRUE)                  \nmusic$category <- NULL\nrow.names(music) <- music$date\nmusic$date <- NULL\nmusic[is.na(music)] <- 0                  \nmusic <- as.xts(music) \n\nnews <- merge(dates, AvgDaily[which(AvgDaily$category == \"News & Issues\"),], by = \"date\", all = TRUE)                  \nnews$category <- NULL\nrow.names(news) <- news$date\nnews$date <- NULL\nnews[is.na(news)] <- 0                  \nnews <- as.xts(news) \n\nsensat <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sensationalist\"),], by = \"date\", all = TRUE)                  \nsensat$category <- NULL\nrow.names(sensat) <- sensat$date\nsensat$date <- NULL\nsensat[is.na(sensat)] <- 0                  \nsensat <- as.xts(sensat) \n\nsex <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sex & Relationships\"),], by = \"date\", all = TRUE)                  \nsex$category <- NULL\nrow.names(sex) <- sex$date\nsex$date <- NULL\nsex[is.na(sex)] <- 0                  \nsex <- as.xts(sex) \n\nsports <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sports\"),], by = \"date\", all = TRUE)                  \nsports$category <- NULL\nrow.names(sports) <- sports$date\nsports$date <- NULL\nsports[is.na(sports)] <- 0                  \nsports <- as.xts(sports) \n\ntv <- merge(dates, AvgDaily[which(AvgDaily$category == \"TV & Movies\"),], by = \"date\", all = TRUE)                  \ntv$category <- NULL\nrow.names(tv) <- tv$date\ntv$date <- NULL\ntv[is.na(tv)] <- 0                  \ntv <- as.xts(tv) \n\n\n\ncolores<- c('#B2182B','#D73027','#F46D43','#FDAE61','#FEE090','#FFFFD9','#EDF8B1','#C7E9B4','#7FCDBB','#41B6C4','#1D91C0','#225EA8','#253494','#081D58')\n\nhc <-highchart(type = \"stock\") %>%\n  \n  hc_colors(colores) %>%\n\n  hc_add_series_xts(animals, id = \"Daily Reach\", name = \"Animals\", type = \"area\") %>%\n  hc_add_series_xts(beauty, id = \"Daily Reach\", name = \"Beauty & Fashion\", type = \"area\") %>%\n  hc_add_series_xts(celeb, id = \"Daily Reach\", name = \"Celebrity & Gossip\", type = \"area\") %>%\n  hc_add_series_xts(citizen, id = \"Daily Reach\", name = \"Citizenship & Politics\", type = \"area\") %>%\n  hc_add_series_xts(family, id = \"Daily Reach\", name = \"Family & Friends\", type = \"area\") %>%\n  hc_add_series_xts(food, id = \"Daily Reach\", name = \"Food & Beverages\", type = \"area\") %>%\n  hc_add_series_xts(identities, id = \"Daily Reach\", name = \"Identities\", type = \"area\") %>%\n  hc_add_series_xts(latino, id = \"Daily Reach\", name = \"Latino Culture\", type = \"area\") %>%\n  hc_add_series_xts(music, id = \"Daily Reach\", name = \"Music\", type = \"area\") %>%\n  hc_add_series_xts(news, id = \"Daily Reach\", name = \"News & Issues\", type = \"area\") %>%\n  hc_add_series_xts(sensat, id = \"Daily Reach\", name = \"Sensationalist\", type = \"area\") %>%\n  hc_add_series_xts(sex, id = \"Daily Reach\", name = \"Sex & Relationships\", type = \"area\") %>%\n  hc_add_series_xts(sports, id = \"Daily Reach\", name = \"Sports\", type = \"area\") %>%\n  hc_add_series_xts(tv, id = \"Daily Reach\", name = \"TV & Movies\", type = \"area\") %>%\n  \n  hc_scrollbar(enabled = FALSE) %>%\n  hc_rangeSelector(selected = 0) %>%\n  hc_legend(enabled = TRUE) %>%\n  hc_plotOptions(series = list(borderColor = \"black\", stacking = \"normal\", dataGrouping = list(approximation = \"average\", enabled = TRUE, forced = TRUE, units = list(list(\"week\", list(1)))))) %>%\n  hc_tooltip(valueDecimals = 0) %>%\n  \n  hc_add_theme(hc_theme_smpl())\nhc\n\n#---------------------------------\n\nAvgDaily <- ddply(DataArticles, c(\"category\", \"date\"), summarise, AvgDailyReach = mean(post_reach))\n\ndates <- data.frame(date = unique(DataArticles$date))\ndates$date <- as.Date(dates$date)\n\nanimals <- merge(dates, AvgDaily[which(AvgDaily$category == \"Animals\"),], by = \"date\", all = TRUE) \nanimals$category <- NULL\nrow.names(animals) <- animals$date\nanimals$date <- NULL\nanimals[is.na(animals)] <- 0\nanimals <- as.xts(animals) \n\nbeauty <- merge(dates, AvgDaily[which(AvgDaily$category == \"Beauty & Fashion\"),], by = \"date\", all = TRUE)                  \nbeauty$category <- NULL\nrow.names(beauty) <- beauty$date\nbeauty$date <- NULL\nbeauty[is.na(beauty)] <- 0                  \nbeauty <- as.xts(beauty)   \n\nceleb <- merge(dates, AvgDaily[which(AvgDaily$category == \"Celebrity & Gossip\"),], by = \"date\", all = TRUE)                  \nceleb$category <- NULL\nrow.names(celeb) <- celeb$date\nceleb$date <- NULL\nceleb[is.na(celeb)] <- 0                  \nceleb <- as.xts(celeb)   \n\ncitizen <- merge(dates, AvgDaily[which(AvgDaily$category == \"Citizenship & Politics\"),], by = \"date\", all = TRUE)                  \ncitizen$category <- NULL\nrow.names(citizen) <- citizen$date\ncitizen$date <- NULL\ncitizen[is.na(citizen)] <- 0                  \ncitizen <- as.xts(citizen) \n\nfamily <- merge(dates, AvgDaily[which(AvgDaily$category == \"Family & Friends\"),], by = \"date\", all = TRUE)                  \nfamily$category <- NULL\nrow.names(family) <- family$date\nfamily$date <- NULL\nfamily[is.na(family)] <- 0                  \nfamily <- as.xts(family) \n\nfood <- merge(dates, AvgDaily[which(AvgDaily$category == \"Food & Beverages\"),], by = \"date\", all = TRUE)                  \nfood$category <- NULL\nrow.names(food) <- food$date\nfood$date <- NULL\nfood[is.na(food)] <- 0                  \nfood <- as.xts(food) \n\nidentities <- merge(dates, AvgDaily[which(AvgDaily$category == \"Identities\"),], by = \"date\", all = TRUE)               \nidentities$category <- NULL\nrow.names(identities) <- identities$date\nidentities$date <- NULL\nidentities[is.na(identities)] <- 0                  \nidentities <- as.xts(identities) \n\nlatino <- merge(dates, AvgDaily[which(AvgDaily$category == \"Latino Culture\"),], by = \"date\", all = TRUE)                  \nlatino$category <- NULL\nrow.names(latino) <- latino$date\nlatino$date <- NULL\nlatino[is.na(latino)] <- 0                  \nlatino <- as.xts(latino) \n\nmusic <- merge(dates, AvgDaily[which(AvgDaily$category == \"Music\"),], by = \"date\", all = TRUE)                  \nmusic$category <- NULL\nrow.names(music) <- music$date\nmusic$date <- NULL\nmusic[is.na(music)] <- 0                  \nmusic <- as.xts(music) \n\nnews <- merge(dates, AvgDaily[which(AvgDaily$category == \"News & Issues\"),], by = \"date\", all = TRUE)                  \nnews$category <- NULL\nrow.names(news) <- news$date\nnews$date <- NULL\nnews[is.na(news)] <- 0                  \nnews <- as.xts(news) \n\nsensat <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sensationalist\"),], by = \"date\", all = TRUE)                  \nsensat$category <- NULL\nrow.names(sensat) <- sensat$date\nsensat$date <- NULL\nsensat[is.na(sensat)] <- 0                  \nsensat <- as.xts(sensat) \n\nsex <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sex & Relationships\"),], by = \"date\", all = TRUE)                  \nsex$category <- NULL\nrow.names(sex) <- sex$date\nsex$date <- NULL\nsex[is.na(sex)] <- 0                  \nsex <- as.xts(sex) \n\nsports <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sports\"),], by = \"date\", all = TRUE)                  \nsports$category <- NULL\nrow.names(sports) <- sports$date\nsports$date <- NULL\nsports[is.na(sports)] <- 0                  \nsports <- as.xts(sports) \n\ntv <- merge(dates, AvgDaily[which(AvgDaily$category == \"TV & Movies\"),], by = \"date\", all = TRUE)                  \ntv$category <- NULL\nrow.names(tv) <- tv$date\ntv$date <- NULL\ntv[is.na(tv)] <- 0                  \ntv <- as.xts(tv) \n\n\n\ncolores<- c('#B2182B','#D73027','#F46D43','#FDAE61','#FEE090','#FFFFD9','#EDF8B1','#C7E9B4','#7FCDBB','#41B6C4','#1D91C0','#225EA8','#253494','#081D58')\n\nhc <-highchart(type = \"stock\") %>%\n  \n  hc_colors(colores) %>%\n  \n  hc_add_series_xts(animals, id = \"Daily Reach\", name = \"Animals\", type = \"column\") %>%\n  hc_add_series_xts(beauty, id = \"Daily Reach\", name = \"Beauty & Fashion\", type = \"column\") %>%\n  hc_add_series_xts(celeb, id = \"Daily Reach\", name = \"Celebrity & Gossip\", type = \"column\") %>%\n  hc_add_series_xts(citizen, id = \"Daily Reach\", name = \"Citizenship & Politics\", type = \"column\") %>%\n  hc_add_series_xts(family, id = \"Daily Reach\", name = \"Family & Friends\", type = \"column\") %>%\n  hc_add_series_xts(food, id = \"Daily Reach\", name = \"Food & Beverages\", type = \"column\") %>%\n  hc_add_series_xts(identities, id = \"Daily Reach\", name = \"Identities\", type = \"column\") %>%\n  hc_add_series_xts(latino, id = \"Daily Reach\", name = \"Latino Culture\", type = \"column\") %>%\n  hc_add_series_xts(music, id = \"Daily Reach\", name = \"Music\", type = \"column\") %>%\n  hc_add_series_xts(news, id = \"Daily Reach\", name = \"News & Issues\", type = \"column\") %>%\n  hc_add_series_xts(sensat, id = \"Daily Reach\", name = \"Sensationalist\", type = \"column\") %>%\n  hc_add_series_xts(sex, id = \"Daily Reach\", name = \"Sex & Relationships\", type = \"column\") %>%\n  hc_add_series_xts(sports, id = \"Daily Reach\", name = \"Sports\", type = \"column\") %>%\n  hc_add_series_xts(tv, id = \"Daily Reach\", name = \"TV & Movies\", type = \"column\") %>%\n  \n  hc_scrollbar(enabled = FALSE) %>%\n  hc_rangeSelector(selected = 0) %>%\n  hc_legend(enabled = TRUE) %>%\n  hc_plotOptions(series = list(borderColor = \"black\", stacking = \"normal\", dataGrouping = list(approximation = \"average\", enabled = TRUE, forced = TRUE, units = list(list(\"week\", list(1)))))) %>%\n  hc_tooltip(valueDecimals = 0) %>%\n  \n  hc_add_theme(hc_theme_smpl())\nhc\n\n\n\n#--------------------\n\nAvgDaily <- ddply(DataArticles, c(\"category\", \"date\"), summarise, AvgDailyReach = mean(post_reach))\n\ndates <- data.frame(date = unique(DataArticles$date))\ndates$date <- as.Date(dates$date)\n\nanimals <- merge(dates, AvgDaily[which(AvgDaily$category == \"Animals\"),], by = \"date\", all = TRUE) \nanimals$category <- NULL\nrow.names(animals) <- animals$date\nanimals$date <- NULL\nanimals[is.na(animals)] <- 0\nanimals <- as.xts(animals) \n\nbeauty <- merge(dates, AvgDaily[which(AvgDaily$category == \"Beauty & Fashion\"),], by = \"date\", all = TRUE)                  \nbeauty$category <- NULL\nrow.names(beauty) <- beauty$date\nbeauty$date <- NULL\nbeauty[is.na(beauty)] <- 0                  \nbeauty <- as.xts(beauty)   \n\nceleb <- merge(dates, AvgDaily[which(AvgDaily$category == \"Celebrity & Gossip\"),], by = \"date\", all = TRUE)                  \nceleb$category <- NULL\nrow.names(celeb) <- celeb$date\nceleb$date <- NULL\nceleb[is.na(celeb)] <- 0                  \nceleb <- as.xts(celeb)   \n\ncitizen <- merge(dates, AvgDaily[which(AvgDaily$category == \"Citizenship & Politics\"),], by = \"date\", all = TRUE)                  \ncitizen$category <- NULL\nrow.names(citizen) <- citizen$date\ncitizen$date <- NULL\ncitizen[is.na(citizen)] <- 0                  \ncitizen <- as.xts(citizen) \n\nfamily <- merge(dates, AvgDaily[which(AvgDaily$category == \"Family & Friends\"),], by = \"date\", all = TRUE)                  \nfamily$category <- NULL\nrow.names(family) <- family$date\nfamily$date <- NULL\nfamily[is.na(family)] <- 0                  \nfamily <- as.xts(family) \n\nfood <- merge(dates, AvgDaily[which(AvgDaily$category == \"Food & Beverages\"),], by = \"date\", all = TRUE)                  \nfood$category <- NULL\nrow.names(food) <- food$date\nfood$date <- NULL\nfood[is.na(food)] <- 0                  \nfood <- as.xts(food) \n\nidentities <- merge(dates, AvgDaily[which(AvgDaily$category == \"Identities\"),], by = \"date\", all = TRUE)               \nidentities$category <- NULL\nrow.names(identities) <- identities$date\nidentities$date <- NULL\nidentities[is.na(identities)] <- 0                  \nidentities <- as.xts(identities) \n\nlatino <- merge(dates, AvgDaily[which(AvgDaily$category == \"Latino Culture\"),], by = \"date\", all = TRUE)                  \nlatino$category <- NULL\nrow.names(latino) <- latino$date\nlatino$date <- NULL\nlatino[is.na(latino)] <- 0                  \nlatino <- as.xts(latino) \n\nmusic <- merge(dates, AvgDaily[which(AvgDaily$category == \"Music\"),], by = \"date\", all = TRUE)                  \nmusic$category <- NULL\nrow.names(music) <- music$date\nmusic$date <- NULL\nmusic[is.na(music)] <- 0                  \nmusic <- as.xts(music) \n\nnews <- merge(dates, AvgDaily[which(AvgDaily$category == \"News & Issues\"),], by = \"date\", all = TRUE)                  \nnews$category <- NULL\nrow.names(news) <- news$date\nnews$date <- NULL\nnews[is.na(news)] <- 0                  \nnews <- as.xts(news) \n\nsensat <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sensationalist\"),], by = \"date\", all = TRUE)                  \nsensat$category <- NULL\nrow.names(sensat) <- sensat$date\nsensat$date <- NULL\nsensat[is.na(sensat)] <- 0                  \nsensat <- as.xts(sensat) \n\nsex <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sex & Relationships\"),], by = \"date\", all = TRUE)                  \nsex$category <- NULL\nrow.names(sex) <- sex$date\nsex$date <- NULL\nsex[is.na(sex)] <- 0                  \nsex <- as.xts(sex) \n\nsports <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sports\"),], by = \"date\", all = TRUE)                  \nsports$category <- NULL\nrow.names(sports) <- sports$date\nsports$date <- NULL\nsports[is.na(sports)] <- 0                  \nsports <- as.xts(sports) \n\ntv <- merge(dates, AvgDaily[which(AvgDaily$category == \"TV & Movies\"),], by = \"date\", all = TRUE)                  \ntv$category <- NULL\nrow.names(tv) <- tv$date\ntv$date <- NULL\ntv[is.na(tv)] <- 0                  \ntv <- as.xts(tv) \n\n\n\ncolores<- c('#B2182B','#D73027','#F46D43','#FDAE61','#FEE090','#FFFFD9','#EDF8B1','#C7E9B4','#7FCDBB','#41B6C4','#1D91C0','#225EA8','#253494','#081D58')\n\nhc <-highchart(type = \"stock\") %>%\n  \n  hc_colors(colores) %>%\n  \n  hc_add_series_xts(animals, id = \"Daily Reach\", name = \"Animals\", type = \"column\") %>%\n  hc_add_series_xts(beauty, id = \"Daily Reach\", name = \"Beauty & Fashion\", type = \"column\") %>%\n  hc_add_series_xts(celeb, id = \"Daily Reach\", name = \"Celebrity & Gossip\", type = \"column\") %>%\n  hc_add_series_xts(citizen, id = \"Daily Reach\", name = \"Citizenship & Politics\", type = \"column\") %>%\n  hc_add_series_xts(family, id = \"Daily Reach\", name = \"Family & Friends\", type = \"column\") %>%\n  hc_add_series_xts(food, id = \"Daily Reach\", name = \"Food & Beverages\", type = \"column\") %>%\n  hc_add_series_xts(identities, id = \"Daily Reach\", name = \"Identities\", type = \"column\") %>%\n  hc_add_series_xts(latino, id = \"Daily Reach\", name = \"Latino Culture\", type = \"column\") %>%\n  hc_add_series_xts(music, id = \"Daily Reach\", name = \"Music\", type = \"column\") %>%\n  hc_add_series_xts(news, id = \"Daily Reach\", name = \"News & Issues\", type = \"column\") %>%\n  hc_add_series_xts(sensat, id = \"Daily Reach\", name = \"Sensationalist\", type = \"column\") %>%\n  hc_add_series_xts(sex, id = \"Daily Reach\", name = \"Sex & Relationships\", type = \"column\") %>%\n  hc_add_series_xts(sports, id = \"Daily Reach\", name = \"Sports\", type = \"column\") %>%\n  hc_add_series_xts(tv, id = \"Daily Reach\", name = \"TV & Movies\", type = \"column\") %>%\n  \n  hc_scrollbar(enabled = FALSE) %>%\n  hc_rangeSelector(selected = 0) %>%\n  hc_legend(enabled = TRUE) %>%\n  hc_plotOptions(series = list(borderColor = \"black\", stacking = \"normal\", dataGrouping = list(approximation = \"average\", enabled = TRUE, forced = TRUE, units = list(list(\"week\", list(1)))))) %>%\n  hc_tooltip(valueDecimals = 0) %>%\n  \n  hc_add_theme(hc_theme_smpl())\nhc\n\n#---------------------\n\nAvgDaily <- ddply(DataArticles, c(\"category\", \"date\"), summarise, AvgDailyReach = mean(ctr)*100)\n\ndates <- data.frame(date = unique(DataArticles$date))\ndates$date <- as.Date(dates$date)\n\nanimals <- merge(dates, AvgDaily[which(AvgDaily$category == \"Animals\"),], by = \"date\", all = TRUE) \nanimals$category <- NULL\nrow.names(animals) <- animals$date\nanimals$date <- NULL\nanimals[is.na(animals)] <- 0\nanimals <- as.xts(animals) \n\nbeauty <- merge(dates, AvgDaily[which(AvgDaily$category == \"Beauty & Fashion\"),], by = \"date\", all = TRUE)                  \nbeauty$category <- NULL\nrow.names(beauty) <- beauty$date\nbeauty$date <- NULL\nbeauty[is.na(beauty)] <- 0                  \nbeauty <- as.xts(beauty)   \n\nceleb <- merge(dates, AvgDaily[which(AvgDaily$category == \"Celebrity & Gossip\"),], by = \"date\", all = TRUE)                  \nceleb$category <- NULL\nrow.names(celeb) <- celeb$date\nceleb$date <- NULL\nceleb[is.na(celeb)] <- 0                  \nceleb <- as.xts(celeb)   \n\ncitizen <- merge(dates, AvgDaily[which(AvgDaily$category == \"Citizenship & Politics\"),], by = \"date\", all = TRUE)                  \ncitizen$category <- NULL\nrow.names(citizen) <- citizen$date\ncitizen$date <- NULL\ncitizen[is.na(citizen)] <- 0                  \ncitizen <- as.xts(citizen) \n\nfamily <- merge(dates, AvgDaily[which(AvgDaily$category == \"Family & Friends\"),], by = \"date\", all = TRUE)                  \nfamily$category <- NULL\nrow.names(family) <- family$date\nfamily$date <- NULL\nfamily[is.na(family)] <- 0                  \nfamily <- as.xts(family) \n\nfood <- merge(dates, AvgDaily[which(AvgDaily$category == \"Food & Beverages\"),], by = \"date\", all = TRUE)                  \nfood$category <- NULL\nrow.names(food) <- food$date\nfood$date <- NULL\nfood[is.na(food)] <- 0                  \nfood <- as.xts(food) \n\nidentities <- merge(dates, AvgDaily[which(AvgDaily$category == \"Identities\"),], by = \"date\", all = TRUE)               \nidentities$category <- NULL\nrow.names(identities) <- identities$date\nidentities$date <- NULL\nidentities[is.na(identities)] <- 0                  \nidentities <- as.xts(identities) \n\nlatino <- merge(dates, AvgDaily[which(AvgDaily$category == \"Latino Culture\"),], by = \"date\", all = TRUE)                  \nlatino$category <- NULL\nrow.names(latino) <- latino$date\nlatino$date <- NULL\nlatino[is.na(latino)] <- 0                  \nlatino <- as.xts(latino) \n\nmusic <- merge(dates, AvgDaily[which(AvgDaily$category == \"Music\"),], by = \"date\", all = TRUE)                  \nmusic$category <- NULL\nrow.names(music) <- music$date\nmusic$date <- NULL\nmusic[is.na(music)] <- 0                  \nmusic <- as.xts(music) \n\nnews <- merge(dates, AvgDaily[which(AvgDaily$category == \"News & Issues\"),], by = \"date\", all = TRUE)                  \nnews$category <- NULL\nrow.names(news) <- news$date\nnews$date <- NULL\nnews[is.na(news)] <- 0                  \nnews <- as.xts(news) \n\nsensat <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sensationalist\"),], by = \"date\", all = TRUE)                  \nsensat$category <- NULL\nrow.names(sensat) <- sensat$date\nsensat$date <- NULL\nsensat[is.na(sensat)] <- 0                  \nsensat <- as.xts(sensat) \n\nsex <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sex & Relationships\"),], by = \"date\", all = TRUE)                  \nsex$category <- NULL\nrow.names(sex) <- sex$date\nsex$date <- NULL\nsex[is.na(sex)] <- 0                  \nsex <- as.xts(sex) \n\nsports <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sports\"),], by = \"date\", all = TRUE)                  \nsports$category <- NULL\nrow.names(sports) <- sports$date\nsports$date <- NULL\nsports[is.na(sports)] <- 0                  \nsports <- as.xts(sports) \n\ntv <- merge(dates, AvgDaily[which(AvgDaily$category == \"TV & Movies\"),], by = \"date\", all = TRUE)                  \ntv$category <- NULL\nrow.names(tv) <- tv$date\ntv$date <- NULL\ntv[is.na(tv)] <- 0                  \ntv <- as.xts(tv) \n\n\n\ncolores<- c('#B2182B','#D73027','#F46D43','#FDAE61','#FEE090','#FFFFD9','#EDF8B1','#C7E9B4','#7FCDBB','#41B6C4','#1D91C0','#225EA8','#253494','#081D58')\n\nhc <-highchart(type = \"stock\") %>%\n  \n  hc_colors(colores) %>%\n  \n  hc_add_series_xts(animals, name = \"Animals\", type = \"column\", visible = FALSE) %>%\n  hc_add_series_xts(beauty, name = \"Beauty & Fashion\", type = \"column\", visible = FALSE) %>%\n  hc_add_series_xts(celeb, name = \"Celebrity & Gossip\", type = \"column\", visible = FALSE) %>%\n  hc_add_series_xts(citizen, name = \"Citizenship & Politics\", type = \"column\", visible = FALSE) %>%\n  hc_add_series_xts(family, name = \"Family & Friends\", type = \"column\", visible = FALSE) %>%\n  hc_add_series_xts(food, name = \"Food & Beverages\", type = \"column\", visible = FALSE) %>%\n  hc_add_series_xts(identities, name = \"Identities\", type = \"column\", visible = FALSE) %>%\n  hc_add_series_xts(latino, name = \"Latino Culture\", type = \"column\", visible = FALSE) %>%\n  hc_add_series_xts(music, name = \"Music\", type = \"column\", visible = FALSE) %>%\n  hc_add_series_xts(news, name = \"News & Issues\", type = \"column\", visible = FALSE) %>%\n  hc_add_series_xts(sensat, name = \"Sensationalist\", type = \"column\", visible = FALSE) %>%\n  hc_add_series_xts(sex, name = \"Sex & Relationships\", type = \"column\", visible = FALSE) %>%\n  hc_add_series_xts(sports, name = \"Sports\", type = \"column\", visible = FALSE) %>%\n  hc_add_series_xts(tv, name = \"TV & Movies\", type = \"column\", visible = FALSE) %>%\n  \n  hc_scrollbar(enabled = FALSE) %>%\n  hc_rangeSelector(selected = 0) %>%\n  hc_legend(enabled = TRUE) %>%\n  hc_plotOptions(column = list(borderColor = \"black\", stacking = NULL, dataGrouping = list(approximation = \"average\", enabled = TRUE, forced = TRUE, units = list(list(\"week\", list(1)))))) %>%\n  hc_tooltip(valueDecimals = 2, valueSuffix = \" %\") %>%\n  \n  hc_add_theme(hc_theme_smpl())\nhc\n\n\nBubbleVideos <- DataVideos[which(DataVideos$video_meme == 0),] \n \n\nds <- lapply(1:nrow(BubbleVideos), function(x){\n  \n  list(x = BubbleVideos[x,]$total_comments + BubbleVideos[x,]$total_likes + BubbleVideos[x,]$total_shares, y = BubbleVideos[x,]$post_reach, z = BubbleVideos[x,]$post_video_views, name = BubbleVideos[x,]$sharetext)\n})\n\n\n\n\nhc <-highchart() %>%\n  hc_chart(type = \"scatter\", plotBorderWidth = 1, zoomType = \"xy\") %>%\n  hc_legend(enabled = FALSE) %>%\n  hc_title(text = \"Sugar and fat intake per country\") %>%\n  \n\n  # hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>% \n\n  hc_xAxis(title = list(text = \"Engagement\")) %>%\n  hc_yAxis(title = list(text = \" Reach\")) %>%\n  hc_series(data = list(x = 95, y = 95, z = 13.8, name = \"point1\"))\nhc\n\n\nds <- lapply(1:nrow(BubbleVideos), function(x){\n  \n  list(name = BubbleVideos[x,]$sharetext,\n  \n  data = list(x = BubbleVideos[x,]$total_comments + BubbleVideos[x,]$total_likes + BubbleVideos[x,]$total_shares, y = BubbleVideos[x,]$post_reach, z = BubbleVideos[x,]$post_video_views))\n})\n\n\n\ndf1 <- data.frame(\n  name = BubbleVideos[which(BubbleVideos$category == \"Latino Culture\"),]$sharetext,\n  x=BubbleVideos[which(BubbleVideos$category == \"Latino Culture\"),]$total_comments+BubbleVideos[which(BubbleVideos$category == \"Latino Culture\"),]$total_likes+BubbleVideos[which(BubbleVideos$category == \"Latino Culture\"),]$total_shares,\n  y=BubbleVideos[which(BubbleVideos$category == \"Latino Culture\"),]$post_reach,\n  z = BubbleVideos[which(BubbleVideos$category == \"Latino Culture\"),]$post_video_views, \n  url = BubbleVideos[which(BubbleVideos$category == \"Latino Culture\"),]$permalink,\n  stringsAsFactors = FALSE)\n  \n\n\n\nds1 <- list.parse(df1)\nnames(ds1) <- NULL\n\ndf <- data.frame(\n  name = BubbleVideos$sharetext,\n  x = BubbleVideos$post_reach_fan_unique/BubbleVideos$post_reach,\n  y = BubbleVideos$post_reach_viral_unique/BubbleVideos$post_reach,\n  z = BubbleVideos$post_video_views, \n  url = BubbleVideos$permalink,\n  stringsAsFactors = FALSE)\n# ds: data series\nds <- list.parse(df)\nnames(ds) <- NULL\n\nhc <-highchart() %>%\n  hc_chart(zoomType = \"xy\", type = \"bubble\") %>%\n  hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>%\n  hc_xAxis(title = list(text = \"\")) %>%\n  hc_yAxis(title = list(text = \" \")) %>%\n  hc_legend(enabled = FALSE) %>%\n  hc_tooltip(headerFormat = '<table>', pointFormat ='<b>{point.name}</b><br> <b>Engagement: </b> {point.x}<br> <b>Reach: </b> {point.y}<br><b>Video Views:  </b> {point.z}') %>%\n  hc_add_series(data = ds, name = \"others\")\n  # hc_add_series(data = ds1, name = \"Latino Culture\", color = \"red\")\n\nhc\n\n\nBubbleVideos <- DataVideos[which(DataVideos$video_meme == 1 & DataVideos$post_video_views <= 5000000),] \n\ndf <- data.frame(\n  name = BubbleVideos[which(BubbleVideos$format == \"Regular\"),]$sharetext,\n  x = BubbleVideos[which(BubbleVideos$format == \"Regular\"),]$post_reach,\n  y = BubbleVideos[which(BubbleVideos$format == \"Regular\"),]$post_engaged_users,\n  z = BubbleVideos[which(BubbleVideos$format == \"Regular\"),]$post_video_views, \n  url = BubbleVideos[which(BubbleVideos$format == \"Regular\"),]$permalink,\n  stringsAsFactors = FALSE)\n# ds: data series\nds <- list.parse(df)\nnames(ds) <- NULL\n\ndf1 <- data.frame(\n  name = BubbleVideos[which(BubbleVideos$format == \"Square\"),]$sharetext,\n  x = BubbleVideos[which(BubbleVideos$format == \"Square\"),]$post_reach,\n  y = BubbleVideos[which(BubbleVideos$format == \"Square\"),]$post_engaged_users,\n  z = BubbleVideos[which(BubbleVideos$format == \"Square\"),]$post_video_views, \n  url = BubbleVideos[which(BubbleVideos$format == \"Square\"),]$permalink,\n  stringsAsFactors = FALSE)\n# ds: data series\nds1 <- list.parse(df1)\nnames(ds1) <- NULL\n\nhc <-highchart() %>%\n  hc_chart(zoomType = \"xy\", type = \"bubble\") %>%\n  hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>%\n  hc_xAxis(title = list(text = \"\")) %>%\n  hc_yAxis(title = list(text = \" \")) %>%\n  hc_legend(enabled = TRUE) %>%\n  hc_tooltip(headerFormat = '<table>', pointFormat ='<b>{point.name}</b><br> <b>X: </b> {point.x:,.0f}<br> <b>Y: </b> {point.y}<br><b>Z:  </b> {point.z}') %>%\n  hc_add_series(data = ds, name = \"Regular\") %>%\nhc_add_series(data = ds1, name = \"Square\")\n\nhc\n\n\n\nBubbleVideos <- DataVideos[which(DataVideos$video_meme == 0 & DataVideos$post_video_views <= 100000000),] \n\nVideoCategories <- data.frame(category = unique(VideoData[which(DataVideos$video_meme == 0 & DataVideos$post_video_views <= 100000000),]$category), colores = c('#B2182B', '#D73027', '#F46D43', '#FDAE61', '#fdc835','#FEE090', '#FFFFD9', '#EDF8B1', '#C7E9B4', '#7FCDBB', '#7FCDBB', '#36a3b0', '#41B6C4', '#225EA8', '#253494'))\n\ndf <- data.frame(\n  name = BubbleVideos$sharetext,\n  x = BubbleVideos$post_reach,\n  y = BubbleVideos$post_engaged_users,\n  z = BubbleVideos$post_video_views, \n  url = BubbleVideos$permalink,\n  color = b[which(b$video_meme == 0),]$colores,\n  stringsAsFactors = FALSE)\n# ds: data series\nds <- list.parse(df)\nnames(ds) <- NULL\n\n\nBubbleVideos <- DataVideos[which(DataVideos$video_meme == 0 & DataVideos$post_video_views <= 100000000),] \n\nds1 <- lapply(1:nrow(VideoCategories[which(VideoCategories$category %in% c(\"Others\", \"DIY\", \"Sex & Relationships\", \"Identities\", \"Family & Friends\", \"Sports\", \"Citizenship & Politics\", \"Music\", \"Latino Culture\",\"Food & Beverages\", \"News & Issues\", \"Beauty & Fashion\", \"TV & Movies\", \"Celebrity & Gossip\", \"Live\")),]), function(x){\n  \n  VideoCategories1 <- VideoCategories[which(VideoCategories$category %in% c(\"Others\", \"DIY\", \"Sex & Relationships\", \"Identities\", \"Family & Friends\", \"Sports\", \"Citizenship & Politics\", \"Music\", \"Latino Culture\",\"Food & Beverages\", \"News & Issues\", \"Beauty & Fashion\", \"TV & Movies\", \"Celebrity & Gossip\", \"Live\")),]\n  \n  list(name = as.character(VideoCategories1[x,]$category),\n       \n       data = lapply(1:nrow(BubbleVideos[which(BubbleVideos$category == as.character(VideoCategories1[x,]$category)),]), function(y){\n         \n         BubbleVideos1 <- BubbleVideos[which(BubbleVideos$category == as.character(VideoCategories1[x,]$category)),]\n         \n         list(x = (BubbleVideos1[y,]$total_comments + BubbleVideos1[y,]$total_likes + BubbleVideos1[y,]$total_shares), y = BubbleVideos1[y,]$post_video_complete_views_30s_unique, z = BubbleVideos1[y,]$post_video_views, name = BubbleVideos1[y,]$sharetext, url = BubbleVideos1[y,]$permalink)\n         \n       }),\n       \n       color = as.character(VideoCategories1[x,]$colores)\n       \n       )\n\n})\n\nhc <-highchart() %>%\n  hc_chart(zoomType = \"xy\", type = \"bubble\") %>%\n  hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>%\n  hc_xAxis(title = list(text = \"\")) %>%\n  hc_yAxis(title = list(text = \" \")) %>%\n  hc_legend(enabled = TRUE) %>%\n  hc_tooltip(headerFormat = '<table>', pointFormat ='<b>{point.name}</b><br> <b>X: </b> {point.x}<br> <b>Y: </b> {point.y}<br><b>Z:  </b> {point.z}') %>%\n  hc_add_series_list(ds1)\n\n\nhc\n\n\nhc <-highchart() %>%\n  hc_chart(type = \"scatter\", options3d = list(enabled = TRUE, beta = 20, alpha = 150)) %>%\n  hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>%\n  hc_xAxis(title = list(text = \"\")) %>%\n  hc_yAxis(title = list(text = \" \")) %>%\n  hc_legend(enabled = TRUE) %>%\n  hc_tooltip(headerFormat = '<table>', pointFormat ='<b>{point.name}</b><br> <b>X: </b> {point.x}<br> <b>Y: </b> {point.y}<br><b>Z:  </b> {point.z}') %>%\n  hc_add_series_list(ds1)\n\n\nhc\n\n\n\nBubbleVideos <- DataVideos[which(DataVideos$video_meme == 0 & DataVideos$post_video_views <= 100000000),] \n\nds <- lapply(1:nrow(VideoCategories), function(x){\n\n  list(name = as.character(VideoCategories[x,]$category),\n       \n       data = lapply(1:nrow(BubbleVideos[which(BubbleVideos$category == as.character(VideoCategories[x,]$category)),]), function(z){\n         \n         BubbleVideos1 <- BubbleVideos[which(BubbleVideos$category == as.character(VideoCategories[x,]$category)),]\n         \n         list(x = (BubbleVideos1[z,]$total_comments + BubbleVideos1[z,]$total_likes + BubbleVideos1[z,]$total_shares)/BubbleVideos1[z,]$post_reach, y = BubbleVideos1[z,]$post_reach, z = BubbleVideos1[z,]$post_video_views, name = BubbleVideos1[z,]$sharetext, url = BubbleVideos1[z,]$permalink)\n         \n       }),\n       \n       color = as.character(VideoCategories[x,]$colores)\n       \n  )\n  \n})\n\n\n\n\nhc <-highchart() %>%\n  hc_chart(zoomType = \"xy\", type = \"bubble\") %>%\n  hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>%\n  hc_xAxis(title = list(text = \"\")) %>%\n  hc_yAxis(title = list(text = \" \")) %>%\n  hc_legend(enabled = TRUE) %>%\n  hc_tooltip(headerFormat = '<table>', pointFormat ='<b>{point.name}</b><br> <b>X: </b> {point.x:,.0f}<br> <b>Y: </b> {point.y}<br><b>Z:  </b> {point.z}') %>%\n  hc_add_series_list(ds)\n\n\nhc\n\nfit <- lm(post_video_views/post_reach ~ (total_comments/post_reach)+(total_likes/post_reach)+(total_shares/post_reach), data = BubbleVideos)\nsummary(fit)\n\n\n\n\n\nVideoCategories <- data.frame(category = unique(VideoData[which(DataVideos$video_meme == 1),]$category), colores = c('#B2182B', '#D73027', '#F46D43', '#FDAE61', '#fdc835','#FEE090', '#FFFFD9', '#EDF8B1', '#C7E9B4', '#7FCDBB', '#7FCDBB', '#36a3b0', '#41B6C4', '#225EA8', '#253494'))\n\nBubbleVideos <- DataVideos[which(DataVideos$video_meme == 1),] \n\nds <- lapply(1:nrow(VideoCategories), function(x){\n  \n  list(name = as.character(VideoCategories[x,]$category),\n       \n       data = lapply(1:nrow(BubbleVideos[which(BubbleVideos$category == as.character(VideoCategories[x,]$category)),]), function(z){\n         \n         BubbleVideos1 <- BubbleVideos[which(BubbleVideos$category == as.character(VideoCategories[x,]$category)),]\n         \n         list(x = (BubbleVideos1[z,]$total_comments + BubbleVideos1[z,]$total_likes + BubbleVideos1[z,]$total_shares)/BubbleVideos1[z,]$post_reach, y = BubbleVideos1[z,]$post_reach, z = BubbleVideos1[z,]$post_video_views, name = BubbleVideos1[z,]$sharetext, url = BubbleVideos1[z,]$permalink)\n         \n       }),\n       \n       color = as.character(VideoCategories[x,]$colores)\n       \n  )\n  \n})\n\n\nhc <-highchart() %>%\n  hc_chart(zoomType = \"xy\", type = \"bubble\") %>%\n  hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>%\n  hc_xAxis(title = list(text = \"\")) %>%\n  hc_yAxis(title = list(text = \" \")) %>%\n  hc_legend(enabled = TRUE) %>%\n  hc_tooltip(headerFormat = '<table>', pointFormat ='<b>{point.name}</b><br> <b>X: </b> {point.x:,.0f}<br> <b>Y: </b> {point.y}<br><b>Z:  </b> {point.z}') %>%\n  hc_add_series_list(ds)\n\n\nhc\n\n\nDataVideosOnly <- DataVideos[which(DataVideos$video_meme == 0),]\nWeekLinks <- DataVideosOnly[which(DataVideosOnly$date >= \"2016-09-15\" & DataVideosOnly$date <= \"2016-09-21\"),]\n\nCatdfm <- as.data.frame(table(WeekLinks$category))\ncolnames(Catdfm) <- c(\"category\", \"Freq\")\n\ncolores<- c('#B2182B', '#D73027', '#F46D43', '#FDAE61', '#fdc835','#FEE090', '#FFFFD9', '#EDF8B1', '#C7E9B4', '#7FCDBB', '#7FCDBB', '#36a3b0', '#41B6C4', '#225EA8', '#253494', '#081D58')\n\nds <- lapply(1:nrow(Catdfm), function(x){\n  list(name = as.character(Catdfm[x,]$category), y = Catdfm[x,]$Freq, drilldown = as.character(Catdfm[x,]$category))\n})\n\ndrilldown <- lapply(1:nrow(WeekLinks), function(x){\n  \n  list(name = \"Video Views\" , id = as.character(Catdfm[x,]$category), \n       \n       data = lapply(1:nrow(WeekLinks[which(WeekLinks$category == Catdfm[x,]$category),]), function(y){\n         \n         WeekLinksCat <- WeekLinks[which(WeekLinks$category == Catdfm[x,]$category),]\n         WeekLinksCat <- WeekLinksCat[order(WeekLinksCat$post_video_views, decreasing = TRUE),]\n         \n         list(name = WeekLinksCat[y,]$sharetext, y = WeekLinksCat[y,]$post_video_views, url = WeekLinksCat[y,]$permalink)}\n         \n       ))\n})\n\ncolorCount = length(unique(DataArticles$category))\n\nhc <- highchart() %>% \n  hc_chart(type = \"pie\") %>% \n  hc_colors(colores) %>%\n  hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), pie = list(borderColor = \"black\", dataLabels = list(formatter = JS(\"function () {formatted = this.point.name.length > 25? this.point.name.substring(0,25) + '...' : this.point.name;return formatted;}\"), style = list(width = \"100px\"))))%>%\n  \n  hc_add_series(data = ds, name = \"Number of Videos\")%>% \n  hc_drilldown(series = drilldown) %>% \n  hc_exporting(enabled = FALSE)%>% \n  hc_legend(enabled = FALSE)%>% \n  hc_add_theme(hc_theme_smpl())\n\nhc\n\n})\n\n\n\n\nDataVideosOnly <- DataVideos[which(DataVideos$video_meme == 0),]\nWeekLinks <- DataVideosOnly[which(DataVideosOnly$date >= \"2016-09-15\" & DataVideosOnly$date <= \"2016-09-21\"),]\n\nCatdfm <- as.data.frame(table(WeekLinks$category))\ncolnames(Catdfm) <- c(\"category\", \"Freq\")\n\ncolores<- c('#B2182B', '#D73027', '#F46D43', '#FDAE61', '#fdc835','#FEE090', '#FFFFD9', '#EDF8B1', '#C7E9B4', '#7FCDBB', '#7FCDBB', '#36a3b0', '#41B6C4', '#225EA8', '#253494', '#081D58')\n\nds <- lapply(1:nrow(Catdfm), function(x){\n  list(name = as.character(Catdfm[x,]$category), y = Catdfm[x,]$Freq, drilldown = as.character(Catdfm[x,]$category))\n})\n\ndrilldown <- lapply(1:nrow(Catdfm), function(x){\n  \n  list(name = \"Video Views\" , id = as.character(Catdfm[x,]$category), \n       \n       data = lapply(1:nrow(WeekLinks[which(WeekLinks$category == as.character(Catdfm[x,]$category)),]), function(y){\n         \n         WeekLinksCat <- WeekLinks[which(WeekLinks$category == Catdfm[x,]$category),]\n         WeekLinksCat <- WeekLinksCat[order(WeekLinksCat$post_video_views, decreasing = TRUE),]\n         \n         list(name = WeekLinksCat[y,]$sharetext, y = WeekLinksCat[y,]$post_video_views, url = WeekLinksCat[y,]$permalink)}\n         \n       ))\n})\n\ncolorCount = length(unique(DataArticles$category))\n\nhc <- highchart() %>% \n  hc_chart(type = \"pie\") %>% \n  hc_colors(colores) %>%\n  hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), pie = list(borderColor = \"black\", dataLabels = list(formatter = JS(\"function () {formatted = this.point.name.length > 25? this.point.name.substring(0,25) + '...' : this.point.name;return formatted;}\"), style = list(width = \"100px\"))))%>%\n  \n  hc_add_series(data = ds, name = \"Number of Videos\")%>% \n  hc_drilldown(series = drilldown) %>% \n  hc_exporting(enabled = FALSE)%>% \n  hc_legend(enabled = FALSE)%>% \n  hc_add_theme(hc_theme_smpl())\n\nhc\n\n\n#---------------------\n\n\nlibrary(\"viridisLite\")\nlibrary(\"dplyr\")\ndata(unemployment)\ndata(uscountygeojson)\n\ndclass <- data_frame(from = seq(0, 10, by = 2),\n                     to = c(seq(2, 10, by = 2), 50),\n                     color = substring(viridis(length(from), option = \"C\"), 0, 7))\ndclass <- list.parse3(dclass)\n\nhighchart() %>% \n  hc_title(text = \"US Counties unemployment rates, April 2015\") %>% \n  hc_add_series_map(uscountygeojson, unemployment,\n                    value = \"value\", joinBy = \"code\") %>% \n  hc_colorAxis(dataClasses = dclass) %>% \n  hc_legend(layout = \"vertical\", align = \"right\",\n            floating = TRUE, valueDecimals = 0,\n            valueSuffix = \"%\") %>% \n  hc_mapNavigation(enabled = TRUE)\n\n#-----------------\n\nlibrary(\"dplyr\")\nlibrary(\"viridisLite\")\n\ndata(\"USArrests\", package = \"datasets\")\ndata(\"usgeojson\")\n\nUSArrests <- USArrests %>%\n  mutate(state = rownames(.))\n\nn <- 4\ncolstops <- data.frame(q = 0:n/n,\n                       c = substring(viridis(n + 1, option = \"A\"), 0, 7)) %>%\n  list_parse2()\n\nhighchart() %>%\n  hc_title(text = \"Violent Crime Rates by US State\") %>%\n  hc_subtitle(text = \"Source: USArrests data\") %>%\n  hc_add_series_map(usgeojson, USArrests, name = \"Murder arrests (per 100,000)\",\n                    value = \"Rape\", joinBy = c(\"woename\", \"state\"),\n                    dataLabels = list(enabled = TRUE,\n                                      format = '{point.properties.postalcode}')) %>%\n  hc_colorAxis(stops = colstops) %>%\n  hc_legend(valueDecimals = 0, valueSuffix = \"%\") %>%\n  hc_mapNavigation(enabled = TRUE)\n\n\n#-----------------------\n\n \n  \n  DateRangeVideos <- DataVideos[which(DataVideos$date >= \"2016-11-17\" & DataVideos$date <= \"2016-11-22\" & DataVideos$video_meme == 0),]\n  DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_video_views, decreasing = FALSE),]\n  DateRangeVideos <- DateRangeVideos[1:min(nrow(DateRangeVideos),5),]\n  WeekVideosBottom <- DateRangeVideos\n\ndf <- WeekVideosBottom[,c(4,52:92)]\ndf <- gather(df, \"seconds_viewed\", \"percentage_viewed\", 2:42)\ndf <- dlply(df,\"sharetext\", function (x){list(data = x$percentage_viewed, name = ifelse(unique(x$sharetext) == nrow(WeekVideosBottom), unique(x$sharetext), NA))})\nds <- lapply(1:nrow(WeekVideosBottom), function(x){\n  list(data = df[[x]]$data, name = df[[x]]$name)\n})\n\nhc <- highchart() %>% \n  hc_chart(type = \"spline\") %>%\n  hc_plotOptions(series = list(marker = list(enabled = FALSE))) %>% \n  hc_add_series_list(ds) %>% \n  hc_add_theme(hc_theme_smpl()) %>% \n  hc_legend(align = \"right\", verticalAlign = \"top\", layout = \"vertical\", floating = TRUE, y = 1) %>%  \n  hc_xAxis(title = list(text = \"Seconds Viewed\")) %>%  \n  hc_tooltip(shared = TRUE)\nhc\n\n\nx <- dist(mtcars[order(mtcars$hp),])\nclass(x)\n\nplot(x)\n\nhchart(x)\n\n\n\ndate_selected <- as.Date(paste(\"mar. 2017\", \"01\"), \"%b %Y %d\")\n\nmonth_selected <- format(date_selected, \"%m\")\nyear_selected <- format(date_selected,\"%Y\")\n\ndates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n\nDataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == month_selected & format.Date(DataBH$date, \"%Y\") == year_selected & DataBH$post_type == \"link\"),], \"date\", summarize, article_content_output = length(post_reach))\n\nDataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\nDataMonth[is.na(DataMonth) & DataMonth$date <= max(DataBH$date)] <- 0\nDataMonth$total_article_content_output <- NA\nDataMonth[!is.na(DataMonth$article_content_output),]$total_article_content_output <- cumsum(DataMonth[!is.na(DataMonth$article_content_output),]$article_content_output)\n\nslope <- lm(total_article_content_output ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n\nds <- lapply(1:nrow(DataMonth), function(x){\n  list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$article_content_output)\n})\n\nds_total <- lapply(1:nrow(DataMonth), function(x){\n  list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_article_content_output)\n})\n\nDataGoalsBH$total_article_content_output <- rowSums(cbind(DataGoalsBH$article_original_output, DataGoalsBH$article_repost_output), na.rm = TRUE)\n\ngoal <- ifelse(format(date_selected, \"%Y-%m-%d\") %in% DataGoalsBH$date, DataGoalsBH[which(DataGoalsBH$date == format(date_selected, \"%Y-%m-%d\")),]$total_article_content_output, 0)\n\nDataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n\nds_goal <- lapply(1:nrow(DataGoal), function(x){\n  list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n})\n\nDataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n\nds_forecast <- lapply(1:nrow(DataForecast), function(x){\n  list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n})\n\nhc <-highchart() %>%\n  hc_chart(type = \"waterfall\") %>%\n  hc_yAxis(title = list(text = \"Article Output - Daily\")) %>%\n  hc_xAxis(type = \"category\") %>%\n  hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n  hc_legend(enabled = TRUE) %>%\n  hc_add_series(data = ds, name = \"Daily Article Output\", type = \"column\") %>%\n  hc_add_series(data = ds_total, name = \"Total Article Output\", type = \"spline\") %>%\n  hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n  # hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(headerFormat = '<b>{point.key:,.0f}</b><br/>')) %>%\n  # hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\") %>%\n  \n  hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = \"<span style='color:{point.color}'>\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>\")) %>%\n  hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n  hc_tooltip(shared = TRUE)%>% \n  hc_add_theme(hc_theme_smpl())\nhc\n",
    "created" : 1469490816352.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "3364239002",
    "id" : "F6679667",
    "lastKnownWriteTime" : 31525476567548019,
    "last_content_update" : 1497025886656,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
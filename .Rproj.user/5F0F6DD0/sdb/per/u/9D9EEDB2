{
    "collab_server" : "",
    "contents" : "\n\n  \n  library(RMySQL)\n  mydb = dbConnect(MySQL(), host = \"104.198.210.36\", user = \"root\", password = \"tacozombies54992\", db = \"analytics\")\n  \n  rs <- dbSendQuery(mydb, \"SELECT POST_DATA.status_id, FEED_DATA.date, FEED_DATA.post_type, FEED_DATA.from_name, POST_DATA.link_clicks, POST_DATA.post_reach, POST_DATA.post_reach_viral, POST_DATA.post_video_views, POST_DATA.total_comments, POST_DATA.total_likes, POST_DATA.total_shares \nFROM analytics.POST_DATA\n                    INNER JOIN analytics.FEED_DATA ON POST_DATA.status_id = FEED_DATA.status_id;\")\n  post_data <- fetch(rs, -1)\n  dbClearResult(rs)\n  dbDisconnect(mydb)\n\n  post_data$date <- as.Date(post_data$date)\n  post_data <- post_data[which(post_data$date >= \"2017-08-01\" & post_data$from_name == \"We are mitu\"),]\n  write.csv(post_data, \"post_data.csv\", row.names = F)\n\n\n\n\n\n\n\n\nWeekLinks <- DataArticles[which(DataArticles$date >= \"2016-08-03\" & DataArticles$date <= \"2016-08-10\"),]\n\nCatdf <- ddply(WeekLinks, \"date\", summarize, AnimalsLC = sum(ifelse(category == \"Animals\", link_clicks, 0)), BeautyLC = sum(ifelse(category == \"Beauty & Fashion\", link_clicks, 0)), CelebLC = sum(ifelse(category == \"Celebrity & Gossip\", link_clicks, 0)), CitiPoliticsLC = sum(ifelse(category == \"Citizenship & Politics\", link_clicks, 0)), FamilyLC = sum(ifelse(category == \"Family & Friends\", link_clicks, 0)), FoodLC = sum(ifelse(category == \"Food & Beverages\", link_clicks, 0)), IdentityLC = sum(ifelse(category == \"Identities\", link_clicks, 0)), LatinoLC = sum(ifelse(category == \"Latino Culture\", link_clicks, 0)), MusicLC = sum(ifelse(category == \"Music\", link_clicks, 0)), NewsLC = sum(ifelse(category == \"News & Issues\", link_clicks, 0)), SensationLC = sum(ifelse(category == \"Sensationalist\", link_clicks, 0)), SexLC = sum(ifelse(category == \"Sex & Relationships\", link_clicks, 0)), SportsLC = sum(ifelse(category == \"Sports\", link_clicks, 0)), TvLC = sum(ifelse(category == \"TV & Movies\", link_clicks, 0)), TotalLC = sum(link_clicks))\n\nCatdf <- Catdf[order(Catdf$TotalLC  , decreasing = TRUE),]\nCatdf <- Catdf[1:min(nrow(Catdf),5), -16]\n\nCatdfg <- gather(Catdf, \"date\", \"link_clicks\", 2:15)\nnames(Catdfg) <- c(\"date\", \"category\", \"y\")\n\nCatdfs <- spread(Catdfg, \"date\", \"y\")\nCatdfs$category <- as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category))\nCatdfs <- Catdfs[,c(\"category\",as.character(Catdf$date))]\n\ncolorCount = length(unique(DataArticles$category))\ncolores<- c('#B2182B','#D73027','#F46D43','#FDAE61','#FEE090','#FFFFD9','#EDF8B1','#C7E9B4','#7FCDBB','#41B6C4','#1D91C0','#225EA8','#253494','#081D58')\n\nds <- lapply(1:nrow(Catdfs), function(x){\n  \n  list(name = as.character(Catdfs[x,]$category), \n       \n       data = lapply(2:ncol(Catdfs), function(y){\n         \n         list(name = as.character(names(Catdfs[y])), y = Catdfs[x,y], drilldown = as.character(names(Catdfs[y])))}\n         \n       ))\n})\n\n\ndrilldown <- lapply(1:nrow(Catdf), function(x){\n  \n  lapply(1:nrow(Catdfs), function (y){\n    \n    list(name = as.character(Catdfs[y,]$category) , id = as.character(Catdf[x,]$date) \n    \n    \n    \n    \n  }\n  \n  \n       \n       data = lapply(1:nrow(WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]), function(y){\n         \n         WeekLinksDay <- WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]\n         WeekLinksDay <- WeekLinksDay[order(WeekLinksDay$link_clicks, decreasing = TRUE),]\n         # CatColors <- data.frame(category = as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category)), color = colorRampPalette(brewer.pal(12, \"Spectral\"))(colorCount))\n         \n         CatColors <- data.frame(category = as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category)), color = colores)\n         \n         list(name = WeekLinksDay[y,]$headline, y = WeekLinksDay[y,]$link_clicks, url = WeekLinksDay[y,]$permalink, \n              color = as.character(CatColors[which(CatColors$category == WeekLinksDay[y,]$category),]$color))}\n         \n       ))\n})\n\n\nhc <- highchart() %>% \n  hc_chart(type = \"column\") %>% \n  # hc_colors(colorRampPalette(brewer.pal(12, \"Spectral\"))(colorCount)) %>%\n  hc_colors(colores) %>%\n  hc_plotOptions(column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\"), series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>%\n  hc_xAxis(type = \"category\", labels = list(formatter = JS(\"function () {formatted = this.value.length > 10? this.value.substring(0,10) + '...' : this.value;return formatted;}\"))) %>% \n  hc_yAxis(title = list(text = \"Link Clicks\")) %>% \n  hc_add_series_list(ds) %>% \n  hc_drilldown(series = drilldown) %>% \n  hc_exporting(enabled = FALSE)%>% \n  hc_legend(enabled = TRUE) %>% \n  hc_add_theme(hc_theme_smpl())\n\nhc\n\n\n\n\nWeekVideosTop <- DataVideos[which(DataVideos$date >= \"2016-08-03\" & DataVideos$date <= \"2016-08-10\"),]\nWeekVideosTop <- WeekVideosTop[order(WeekVideosTop$post_video_views, decreasing = TRUE),]\nWeekVideosTop <- WeekVideosTop[1:min(nrow(WeekVideosTop),5),]\n\ndf1 <- WeekVideosTop[,c(4,44:84)]\ndf2 <- gather(df1, \"seconds_viewed\", \"percentage_viewed\", 2:42)\ndf2 <- df2[sort(order(df2$sharetext[df1$sharetext])),]\n\n\ndf2 <- dlply(df2,\"sharetext\", function (x){list(data = x$percentage_viewed, name = unique(x$sharetext))})\nds <- lapply(1:nrow(WeekVideosTop), function(x){\n  list(data = df2[[x]]$data, name = df1[x,]$name)\n})\n\nhc <- highchart() %>% \n  hc_chart(type = \"spline\") %>%\n  hc_plotOptions(series = list(marker = list(enabled = FALSE))) %>% \n  hc_add_series_list(ds) %>% \n  hc_add_theme(hc_theme_smpl()) %>% \n  hc_legend(align = \"right\", verticalAlign = \"top\", layout = \"vertical\", floating = TRUE, y = 1) %>%  \n  hc_xAxis(title = list(text = \"Seconds Viewed\")) %>%\n  hc_tooltip(shared = TRUE)\nhc\n\na <- list(name = \"Ann\", age = 9)\nb <- list(name = \"Bobby\", age = 17)\nc <- list(name = \"Alex\", age = 6)\n\nL <- list(a,b,c)\nages <- sapply(L,\"[[\",\"age\")\nnames <- sapply(L,\"[[\",\"name\")\nnames[order(ages)]\n\n\n\na <- DataPhotos[order(DataPhotos$post_reach, decreasing = TRUE),]\n\n\n\n\nWeekLinks <- DataArticles[which(DataArticles$date >= \"2016-09-01\" & DataArticles$date <= \"2016-09-07\"),]\n\nCatdf <- ddply(WeekLinks, \"date\", summarize, AnimalsLC = sum(ifelse(category == \"Animals\", link_clicks, 0)), BeautyLC = sum(ifelse(category == \"Beauty & Fashion\", link_clicks, 0)), CelebLC = sum(ifelse(category == \"Celebrity & Gossip\", link_clicks, 0)), CitiPoliticsLC = sum(ifelse(category == \"Citizenship & Politics\", link_clicks, 0)), FamilyLC = sum(ifelse(category == \"Family & Friends\", link_clicks, 0)), FoodLC = sum(ifelse(category == \"Food & Beverages\", link_clicks, 0)), IdentityLC = sum(ifelse(category == \"Identities\", link_clicks, 0)), LatinoLC = sum(ifelse(category == \"Latino Culture\", link_clicks, 0)), MusicLC = sum(ifelse(category == \"Music\", link_clicks, 0)), NewsLC = sum(ifelse(category == \"News & Issues\", link_clicks, 0)), SensationLC = sum(ifelse(category == \"Sensationalist\", link_clicks, 0)), SexLC = sum(ifelse(category == \"Sex & Relationships\", link_clicks, 0)), SportsLC = sum(ifelse(category == \"Sports\", link_clicks, 0)), TvLC = sum(ifelse(category == \"TV & Movies\", link_clicks, 0)), TotalLC = sum(link_clicks))\n\nCatdf <- Catdf[order(Catdf$TotalLC  , decreasing = TRUE),]\nCatdf <- Catdf[1:min(nrow(Catdf),5), -16]\n\nCatdfg <- gather(Catdf, \"date\", \"link_clicks\", 2:15)\nnames(Catdfg) <- c(\"date\", \"category\", \"y\")\n\nCatdfs <- spread(Catdfg, \"date\", \"y\")\nCatdfs$category <- as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category))\nCatdfs <- Catdfs[,c(\"category\",as.character(Catdf$date))]\n\ncolorCount = length(unique(DataArticles$category))\ncolores<- c('#B2182B','#D73027','#F46D43','#FDAE61','#FEE090','#FFFFD9','#EDF8B1','#C7E9B4','#7FCDBB','#41B6C4','#1D91C0','#225EA8','#253494','#081D58')\n\nds <- lapply(1:nrow(Catdfs), function(x){\n  \n  list(name = as.character(Catdfs[x,]$category), \n       \n       data = lapply(2:ncol(Catdfs), function(y){\n         \n         list(name = as.character(names(Catdfs[y])), y = Catdfs[x,y], drilldown = as.character(names(Catdfs[y])))}\n         \n       ))\n})\n\n\ndrilldown <- lapply(1:nrow(Catdf), function(x){\n  \n  list(name = \"Link Clicks\", id = as.character(Catdf[x,]$date), \n       \n       data = lapply(1:nrow(WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]), function(y){\n         \n         WeekLinksDay <- WeekLinks[which(WeekLinks$date == Catdf[1,]$date),]\n         WeekLinksDay <- WeekLinksDay[order(WeekLinksDay$link_clicks, decreasing = TRUE),]\n         # CatColors <- data.frame(category = as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category)), color = colorRampPalette(brewer.pal(12, \"Spectral\"))(colorCount))\n         \n         CatColors <- data.frame(category = as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category)), color = colores)\n         \n         list(name = WeekLinksDay[y,]$headline, y = WeekLinksDay[y,]$link_clicks, url = WeekLinksDay[y,]$permalink, \n              color = as.character(CatColors[which(CatColors$category == WeekLinksDay[y,]$category),]$color))}\n         \n       ))\n})\n\n\nhc <- highchart() %>% \n  hc_chart(type = \"column\") %>% \n  # hc_colors(colorRampPalette(brewer.pal(12, \"Spectral\"))(colorCount)) %>%\n  hc_colors(colores) %>%\n  hc_plotOptions(column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\"), series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>%\n  hc_xAxis(type = \"category\", labels = list(formatter = JS(\"function () {formatted = this.value.length > 10? this.value.substring(0,10) + '...' : this.value;return formatted;}\"))) %>% \n  hc_yAxis(title = list(text = \"Link Clicks\")) %>% \n  hc_add_series_list(ds) %>% \n  hc_drilldown(series = drilldown) %>% \n  hc_exporting(enabled = FALSE)%>% \n  hc_legend(enabled = TRUE) %>% \n  hc_add_theme(hc_theme_smpl())\n\nhc\n\n\n\n\nWeekLinks <- DataVideos[which(DataVideos$date >= \"2016-09-01\" & DataVideos$date <= \"2016-09-09\"),]\n\nCatdf <- ddply(WeekLinks, \"date\", summarize, AnimalsVV = sum(ifelse(category == \"Animals\", post_video_views, 0)), BeautyVV = sum(ifelse(category == \"Beauty & Fashion\", post_video_views, 0)), CelebVV = sum(ifelse(category == \"Celebrity & Gossip\", post_video_views, 0)), CitiPoliticsVV = sum(ifelse(category == \"Citizenship & Politics\", post_video_views, 0)), DIYVV = sum(ifelse(category == \"DIY\", post_video_views, 0)), FamilyVV = sum(ifelse(category == \"Family & Friends\", post_video_views, 0)), FoodVV = sum(ifelse(category == \"Food & Beverages\", post_video_views, 0)), IdentityVV = sum(ifelse(category == \"Identities\", post_video_views, 0)), LatinoVV = sum(ifelse(category == \"Latino Culture\", post_video_views, 0)), LiveVV = sum(ifelse(category == \"Live\", post_video_views, 0)), MusicVV = sum(ifelse(category == \"Music\", post_video_views, 0)), NewsVV = sum(ifelse(category == \"News & Issues\", post_video_views, 0)), SexVV = sum(ifelse(category == \"Sex & Relationships\", post_video_views, 0)), SportsVV = sum(ifelse(category == \"Sports\", post_video_views, 0)), TvVV = sum(ifelse(category == \"TV & Movies\", post_video_views, 0)), WhenVV = sum(ifelse(category == \"When Meme\", post_video_views, 0)), OthersVV = sum(ifelse(category == \"Others\", post_video_views, 0)), TotalVV = sum(post_video_views))\n\nCatdf <- Catdf[order(Catdf$TotalVV  , decreasing = TRUE),]\nCatdf <- Catdf[1:min(nrow(Catdf),5), -19]\n\nCatdfg <- gather(Catdf, \"date\", \"post_video_views\", 2:18)\nnames(Catdfg) <- c(\"date\", \"category\", \"y\")\n\nCatdfs <- spread(Catdfg, \"date\", \"y\")\nCatdfs$category <- as.character(unique(DataVideos[order(DataVideos$category, decreasing = FALSE),]$category))\nCatdfs <- Catdfs[,c(\"category\",as.character(Catdf$date))]\n\ncolorCount = length(unique(DataVideos$category))\ncolores<- c('#5a0c15', '#B2182B', '#D73027', '#F46D43', '#FDAE61', '#FEE090', '#FFFFD9', '#EDF8B1', '#C7E9B4', '#C7E9B4', '#7FCDBB', '#41B6C4', '#1D91C0', '#225EA8', '#253494', '#081D58', '#081D58')\n\nds <- lapply(1:nrow(Catdfs), function(x){\n  \n  list(name = as.character(Catdfs[x,]$category), \n       \n       data = lapply(2:ncol(Catdfs), function(y){\n         \n         list(name = as.character(names(Catdfs[y])), y = Catdfs[x,y], drilldown = as.character(names(Catdfs[y])))}\n         \n       ))\n})\n\n\ndrilldown <- lapply(1:nrow(Catdf), function(x){\n  \n  list(name = \"Video Views\", id = as.character(Catdf[x,]$date), \n       \n       data = lapply(1:nrow(WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]), function(y){\n         \n         WeekLinksDay <- WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]\n         WeekLinksDay <- WeekLinksDay[order(WeekLinksDay$post_video_views, decreasing = TRUE),]\n         # CatColors <- data.frame(category = as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category)), color = colorRampPalette(brewer.pal(12, \"Spectral\"))(colorCount))\n         \n         CatColors <- data.frame(category = as.character(unique(DataVideos[order(DataVideos$category, decreasing = FALSE),]$category)), color = colores)\n         \n         list(name = WeekLinksDay[y,]$sharetext, y = WeekLinksDay[y,]$post_video_views, url = WeekLinksDay[y,]$permalink, \n              color = as.character(CatColors[which(CatColors$category == WeekLinksDay[y,]$category),]$color))}\n         \n       ))\n})\n\n\nhc <- highchart() %>% \n  hc_chart(type = \"column\") %>% \n  # hc_colors(colorRampPalette(brewer.pal(12, \"Spectral\"))(colorCount)) %>%\n  hc_colors(colores) %>%\n  hc_plotOptions(column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\"), series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>%\n  hc_xAxis(type = \"category\", labels = list(formatter = JS(\"function () {formatted = this.value.length > 10? this.value.substring(0,10) + '...' : this.value;return formatted;}\"))) %>% \n  hc_yAxis(title = list(text = \"Video Views\")) %>% \n  hc_add_series_list(ds) %>% \n  hc_drilldown(series = drilldown) %>% \n  hc_exporting(enabled = FALSE)%>% \n  hc_legend(enabled = TRUE) %>% \n  hc_add_theme(hc_theme_smpl())\n\nhc\n\n\n\n\nCatdfm <- as.data.frame(table(WeekLinks$category))\ncolnames(Catdfm) <- c(\"category\", \"Freq\")\n\ncolores<- c('#5a0c15', '#B2182B', '#D73027', '#F46D43', '#FDAE61', '#FEE090', '#FFFFD9', '#EDF8B1', '#C7E9B4', '#C7E9B4', '#7FCDBB', '#41B6C4', '#1D91C0', '#225EA8', '#253494', '#081D58')\n\nds <- lapply(1:nrow(Catdfm), function(x){\n  list(name = as.character(Catdfm[x,]$category), y = Catdfm[x,]$Freq, drilldown = as.character(Catdfm[x,]$category))\n})\n\ndrilldown <- lapply(1:nrow(WeekLinks), function(x){\n  \n  list(name = \"Video Views\" , id = as.character(Catdfm[x,]$category), \n       \n       data = lapply(1:nrow(WeekLinks[which(WeekLinks$category == Catdfm[x,]$category),]), function(y){\n         \n         WeekLinksCat <- WeekLinks[which(WeekLinks$category == Catdfm[x,]$category),]\n         WeekLinksCat <- WeekLinksCat[order(WeekLinksCat$post_video_views, decreasing = TRUE),]\n         \n         list(name = WeekLinksCat[y,]$sharetext, y = WeekLinksCat[y,]$post_video_views, url = WeekLinksCat[y,]$permalink)}\n         \n       ))\n})\n\ncolorCount = length(unique(DataArticles$category))\n\nhc <- highchart() %>% \n  hc_chart(type = \"pie\") %>% \n  # hc_colors(colorRampPalette(brewer.pal(12, \"Spectral\"))(colorCount)) %>%\n  hc_colors(colores) %>%\n  hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), pie = list(borderColor = \"black\", dataLabels = list(formatter = JS(\"function () {formatted = this.point.name.length > 25? this.point.name.substring(0,25) + '...' : this.point.name;return formatted;}\"), style = list(width = \"100px\"))))%>%\n  \n  hc_add_series(data = ds, name = \"Number of Articles\")%>% \n  hc_drilldown(series = drilldown) %>% \n  hc_exporting(enabled = FALSE)%>% \n  hc_legend(enabled = FALSE)%>% \n  hc_add_theme(hc_theme_smpl())\n\nhc\n\n\na <-DataVideos[which(DataVideos$category == \"Live\"),]\n\n\n\n############################################\n\nDataArticles$created_time <- strptime(DataArticles$created_time, \"%d/%m/%Y %H:%M\")\nDataArticles$created_time <- as.POSIXct(strptime(DataArticles$created_time, \"%d/%m/%Y %H:%M\"), tz = \"GMT\")\n\n\nDataArticles$day <- DataArticles$created_time$mday\nDataArticles$month <- DataArticles$created_time$mon + 1\nDataArticles$year <- DataArticles$created_time$year + 1900\n\ndates <- data.frame(created_time = unique(DataArticles$created_time))\ndates$date <- as.Date(dates$created_time, format = \"%Y-%m-%d %H:%M:%S\")\n\n\n\n# daily_reposts_reach <- ddply(DataArticles[which(DataArticles$repost == 1),], \"date\", summarise, repost_reach = mean(na.omit(post_reach)))\n# \n# daily_originals_reach <- ddply(DataArticles[which(DataArticles$repost == 0),], \"date\", summarise, original_reach = mean(na.omit(post_reach)))\n\n\nreposts_reach <- as.xts(DataArticles[, \"link_clicks\"], order.by = DataArticles[, \"created_time\"]) \n  \nreposts_reach <- as.xts(rep(1, nrow(DataArticles)), order.by = DataArticles[, \"created_time\"]) \n\n[,c(\"created_time\", \"post_reach\")]\n\n\ncolores<- c('#D55200', '#D73027')\n\nhc <-highchart(type = \"stock\") %>%\n  hc_colors(colores) %>%\n  hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>% \n  hc_add_series_xts(reposts_reach, name = \"Reposts\", type = \"column\") %>%\n  hc_scrollbar(enabled = FALSE) %>%\n  hc_rangeSelector(selected = 3) %>%\n  hc_legend(enabled = TRUE) %>%\n  hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = \"none\", dataGrouping = list(approximation = \"average\", enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(\"month\", list(1)))))) %>%\n  hc_tooltip(valueDecimals = 0) %>%\n  hc_add_theme(hc_theme_smpl())\nhc\n\n\n\n###################\n\n\n# AvgDailyArticleReach <- ddply(DataArticles, \"date\", summarise, AvgDailyReach = mean(post_reach))\n# row.names(AvgDailyArticleReach) <- AvgDailyArticleReach$date\n# AvgDailyArticleReach$AvgDailyReach <- as.numeric(formatC(AvgDailyArticleReach$AvgDailyReach, format = \"f\", digits = 2))\n# AvgDailyArticleReach$date <- NULL\n# AvgDailyArticleReach <- as.xts(AvgDailyArticleReach)\n# \n# AvgDailyArticleLC <- ddply(DataArticles, \"date\", summarise, AvgDailyLC = mean(link_clicks))\n# row.names(AvgDailyArticleLC) <- AvgDailyArticleLC$date\n# AvgDailyArticleLC$AvgDailyLC <- as.numeric(formatC(AvgDailyArticleLC$AvgDailyLC, format = \"f\", digits = 2))\n# AvgDailyArticleLC$date <- NULL\n# AvgDailyArticleLC <- as.xts(AvgDailyArticleLC)\n# \n# AvgDailyArticleCTR <- ddply(DataArticles, \"date\", summarise, AvgDailyCTR = mean(ctr)*100)\n# row.names(AvgDailyArticleCTR) <- AvgDailyArticleCTR$date\n# AvgDailyArticleCTR$AvgDailyCTR <- as.numeric(formatC(AvgDailyArticleCTR$AvgDailyCTR, format = \"f\", digits = 2))\n# AvgDailyArticleCTR$date <- NULL\n# AvgDailyArticleCTR <- as.xts(AvgDailyArticleCTR)\n\n\nAvgDailyArticleReach <- as.xts(DataArticles$post_reach, order.by = DataArticles$created_time)\nAvgDailyArticleLC <- as.xts(DataArticles$link_clicks, order.by = DataArticles$created_time)\nAvgDailyArticleCTR <- as.xts(as.numeric(formatC(DataArticles$ctr*100, format = \"f\", digits = 2)), order.by = DataArticles$created_time)\n\n\nhc <-highchart(type = \"stock\") %>%\n  hc_yAxis_multiples(\n    list(offset = 30, title = list(text = \"Avg. Reach\"), height = \"45%\", top = \"0%\", tickInterval = 100000),\n    list(offset = 30, title = list(text = \"Avg. Link Clicks\"), height = \"25%\", top = \"47.5%\", tickInterval = 10000),\n    list(offset = 30, title = list(text = \"Avg. CTR\"), height = \"25%\", top = \"75%\", labels = list(format = \"{value} %\"), tickInterval = 1)) %>% \n  \n  hc_add_series_xts(AvgDailyArticleReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0, color = \"#D73027\", type = \"area\") %>%\n  hc_add_series_xts(AvgDailyArticleLC, id = \"Daily LC\", yAxis = 1, name = \"Link Clicks\", color = \"#F46D43\", type = \"area\") %>%\n  hc_add_series_xts(AvgDailyArticleCTR, id = \"Daily CTR\", yAxis = 2, name = \"CTR\", type = \"column\", color = \"#2580B9\", tooltip = list(valueSuffix = \" %\")) %>% \n  # hc_add_series_flags(as.Date(\"2016-07-01\"), title = c(\"-_-\"), text = c(\"FB Bad Reporting\"), id = \"Daily Reach\") %>%\n  hc_scrollbar(enabled = FALSE) %>%\n  hc_rangeSelector(selected = 3) %>%\n  hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = \"none\", dataGrouping = list(approximation = \"average\", enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(\"month\", list(1)))))) %>%\n  hc_tooltip(valueDecimals = 2) %>%\n  hc_add_theme(hc_theme_smpl())\nhc\n\n\nDateRangeArticles <- DataArticles[which(DataArticles$date >= \"2016-11-21\" & DataArticles$date <= \"2016-11-27\"),]\nDateRangeArticles <- DateRangeArticles[order(DateRangeArticles$link_clicks, decreasing = TRUE),]\nDateRangeArticles <- DateRangeArticles[1:min(nrow(DateRangeArticles),10),]\nDateRangeArticles\n\na <- as.Date(\"2016-11-21\")\n\n\n\n\ndates <- data.frame(created_time = DataPhotos$created_time)\ndates$created_time <- as.POSIXct(dates$created_time)\n\nreposts_reach <- merge(dates, DataPhotos[which(DataPhotos$repost == 1),c(\"created_time\", \"post_reach\")], by = \"created_time\", all = TRUE)\nreposts_reach <- as.xts(reposts_reach[,\"post_reach\"], order.by = reposts_reach[,\"created_time\"])\n\noriginals_reach <- merge(dates, DataPhotos[which(DataPhotos$original == 1),c(\"created_time\", \"post_reach\")], by = \"created_time\", all = TRUE)\noriginals_reach <- as.xts(originals_reach[,\"post_reach\"], order.by = originals_reach[,\"created_time\"])\n\ncolores<- c('#D55200', '#D73027')\n\nhc <-highchart(type = \"stock\") %>%\n  hc_colors(colores) %>%\n  hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>% \n  hc_add_series_xts(originals_reach, name = \"Originals\", type = \"area\") %>%\n  hc_add_series_xts(reposts_reach, name = \"Reposts\", type = \"area\") %>%\n  hc_scrollbar(enabled = FALSE) %>%\n  hc_rangeSelector(selected = 4) %>%\n  hc_legend(enabled = TRUE) %>%\n  hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = \"normal\", dataGrouping = list(approximation = \"average\", enabled = TRUE, forced = TRUE, units = list(list(\"day\", list(1)))))) %>%\n  hc_tooltip(valueDecimals = 0) %>%\n  hc_add_theme(hc_theme_smpl())\nhc\n\n\n\nWeekVideos <- DataVideos[which(DataVideos$date >= \"2017-01-01\" & DataVideos$date <= \"2017-01-22\"),]\n\nWeekVideosReposts <- WeekVideos[which(WeekVideos$repost == 1),]\nWeekVideosReposts <- WeekVideosReposts[order(WeekVideosReposts$post_video_views, decreasing = TRUE),]\n\nWeekVideosReposts$post_reach <- format( WeekVideosReposts$post_reach, big.mark = \",\")\nWeekVideosReposts$post_video_views <- format( WeekVideosReposts$post_video_views, big.mark = \",\")\nWeekVideosReposts$sharetext <- paste0(\"<a href='\", WeekVideosReposts$permalink,\"' target='_blank'>\", WeekVideosReposts$sharetext,\"</a>\")\nWeekVideosReposts$interaction_rate <- paste0(formatC(100 * WeekVideosReposts$interaction_rate, format = \"f\", digits = 2), \"%\")\n\nWeekVideosReposts[, c(\"sharetext\",\"date\",\"post_reach\",\"post_video_views\", \"interaction_rate\", \"times_repost\"), drop = FALSE]\n\n\n\n\n\n",
    "created" : 1470439598106.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "2781896257",
    "id" : "9D9EEDB2",
    "lastKnownWriteTime" : 3419473789575321445,
    "last_content_update" : 1503953443747,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
{
    "collab_server" : "",
    "contents" : "# LIBRARIES ========================================================================================================================\n\nlibrary(ggplot2)\nlibrary(reshape)\nlibrary(scales)\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(viridis)\nlibrary(ggthemes)\nlibrary(RColorBrewer)\nlibrary(highcharter)\nlibrary(quantmod)\nlibrary(dtplyr)\nlibrary(data.table)\nlibrary(readr)\nlibrary(lubridate)\n# library(jsonlite)\n\n# DATA LOAD ========================================================================================================================\n\nload(\"data/PostData.Rda\")\nload(\"data/DataArticles.Rda\")\nload(\"data/DataVideos.Rda\")\nload(\"data/DataPhotos.Rda\")\n\nload(\"data/PostDataBH.Rda\")\nload(\"data/DataArticlesBH.Rda\")\nload(\"data/DataVideosBH.Rda\")\nload(\"data/DataPhotosBH.Rda\")\n\nload(\"data/PostDataFC.Rda\")\nload(\"data/DataArticlesFC.Rda\")\nload(\"data/DataVideosFC.Rda\")\nload(\"data/DataPhotosFC.Rda\")\n\n# write.csv(DataArticles, \"WAMDataArticles.csv\", row.names = FALSE)\n# write.csv(DataVideos, \"WAMDataVideos.csv\", row.names = FALSE)\n# write.csv(DataPhotos, \"WAMDataPhotos.csv\", row.names = FALSE)\n\n# write.csv(DataArticlesBH, \"BHDataArticles.csv\", row.names = FALSE)\n# write.csv(DataVideosBH, \"BHDataVideos.csv\", row.names = FALSE)\n# write.csv(DataPhotosBH, \"BHDataPhotos.csv\", row.names = FALSE)\n# \n# write.csv(DataArticlesFC, \"FCDataArticles.csv\", row.names = FALSE)\n# write.csv(DataVideosFC, \"FCDataVideos.csv\", row.names = FALSE)\n# write.csv(DataPhotosFC, \"FCDataPhotos.csv\", row.names = FALSE)\n\nDataGoals <- read.csv(\"data/WAM KPIs 2017.csv\", header = TRUE, stringsAsFactors = FALSE)\nDataGoals$date <- strptime(DataGoals$date, \"%d/%m/%Y\")\n\nDataGoalsBH <- read.csv(\"data/BH KPIs 2017.csv\", header = TRUE, stringsAsFactors = FALSE)\nDataGoalsBH$date <- strptime(DataGoalsBH$date, \"%d/%m/%Y\")\n\n\n# SQL --------------------------------------------------------------------------------------------------------------------\n\nlibrary(RMySQL)\nmydb = dbConnect(MySQL(), host = \"104.198.210.36\", user = \"root\", password = \"tacozombies54992\", db = \"analytics\")\n\nrs <- dbSendQuery(mydb, \"select * from PAGE_DATA where from_name = 'We are mitu'\")\nWamPageData <- fetch(rs, -1)\n\nrs <- dbSendQuery(mydb, \"select * from PAGE_DATA where from_name = 'Bad Hombres'\")\nBHPageData <- fetch(rs, -1)\n\nrs <- dbSendQuery(mydb, \"select * from PAGE_DATA where from_name = 'Fierce by mitu'\")\nFCPageData <- fetch(rs, -1)\n\ndbClearResult(rs)\ndbDisconnect(mydb)\n\nWamPageData$date <- as.Date(WamPageData$date)\nBHPageData$date <- as.Date(BHPageData$date)\nFCPageData$date <- as.Date(FCPageData$date)\n\n\n# LinkData <- read.csv(\"data/LinkData.csv\", header = TRUE, stringsAsFactors = FALSE)\n# VideoData <- read.csv(\"data/VideoData.csv\", header = TRUE, stringsAsFactors = FALSE)\n# PhotoData <- read.csv(\"data/PhotoData.csv\", header = TRUE, stringsAsFactors = FALSE)\n# \n# \n# library(RMySQL)\n# mydb = dbConnect(MySQL(), host=\"104.198.210.36\", user = \"root\", password = \"tacozombies54992\", db = \"analytics\")\n# # rs <- dbSendQuery(mydb, 'set character set \"utf8\"')\n# rs <- dbSendQuery(mydb, \"select * from FB_INSIGHTS\")\n# Data <- fetch(rs, -1)\n# dbClearResult(rs)\n# dbDisconnect(mydb)\n# \n# \n# Data <- Data[!duplicated(Data),]\n# # Data$date = strptime(Data$date, \"%d/%m/%Y\")\n# Data$date <- as.Date(Data$date)\n# \n# Data$created_time <- as.POSIXct(strptime(Data$created_time, \"%Y-%m-%d %H:%M:%S\"))\n# Data[Data$sharetext == \"\",]$sharetext <- as.character(Data[Data$sharetext == \"\",]$status_id)\n# Data[Data$headline == \"\",]$headline <- as.character(Data[Data$headline == \"\",]$status_id)\n# # Encoding(Data$sharetext) <- \"latin1\"\n# # Encoding(Data$headline) <- \"latin1\"\n# Data$total_interactions <- Data$total_comments+Data$total_likes + Data$total_shares\n# Data$interaction_rate <- (Data$total_comments+Data$total_likes + Data$total_shares)/Data$post_reach\n# Data$ctr <- Data$link_clicks/Data$post_reach\n# Data$views_rate <- Data$post_video_views/Data$post_reach\n# Data$viral_fan_rate <- Data$post_reach_viral_unique/Data$post_reach_fan_unique\n# Data$share_rate <- Data$total_shares/(Data$total_comments+Data$total_likes + Data$total_shares)\n# Data$post_image <- paste(\"<img src ='\", Data$full_picture,\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"100\" width=\"100\">')\n# Data[, grep(\"s0\", colnames(Data)):grep(\"s40\", colnames(Data))] <- lapply(Data[, grep(\"s0\", colnames(Data)):grep(\"s40\", colnames(Data))], as.numeric)\n# \n# \n# DataArticles <- Data[Data$post_type == \"link\",]\n# DataArticles <- merge(DataArticles[,], LinkData[,c(\"status_id\", \"mitu_link\", \"category\",\"reposted\", \"original\", \"repost\", \"repost_order\", \"times_repost\", \"days_bet_repost\")])\n# DataArticles <- ddply(DataArticles, \"mitu_link\", transform, average_ctr = mean(ctr), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_link_clicks = mean(link_clicks))\n# # DataArticles$created_time <- as.POSIXct(strptime(DataArticles$created_time, \"%Y-%m-%d %H:%M:%s\"))\n# \n# DataVideos <- Data[Data$post_type == \"video\",]\n# DataVideos <- merge(DataVideos[,], VideoData[,c(\"status_id\", \"video_repost_sharetext\", \"video_meme\", \"series\", \"category\", \"format\", \"reposted\", \"original\", \"repost\", \"repost_order\", \"times_repost\", \"days_bet_repost\")])\n# DataVideos <- ddply(DataVideos, \"video_repost_sharetext\", transform, average_views_rate = mean(views_rate), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_video_views = mean(post_video_views), average_viral_fan_rate = mean(viral_fan_rate))\n# # DataVideos$created_time <- as.POSIXct(strptime(DataVideos$created_time, \"%d/%m/%Y %H:%M\"), tz = \"GMT\")\n# \n# DataPhotos <- Data[Data$post_type == \"photo\",]\n# DataPhotos <- merge(DataPhotos[,],PhotoData[,c(\"status_id\", \"image_text_py\", \"reposted\", \"original\", \"repost\", \"repost_order\", \"times_repost\", \"days_bet_repost\")])\n# DataPhotos <- ddply(DataPhotos, \"image_text_py\", transform, average_share_rate = mean(share_rate), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_viral_fan_rate = mean(viral_fan_rate))\n# # DataPhotos$created_time <- as.POSIXct(strptime(DataPhotos$created_time, \"%d/%m/%Y %H:%M\"), tz = \"GMT\")\n\n\n# We Are MitÃº Data -------------------------------------------------------------------------------------------------------\n\nDataArticles$general_rank_link_clicks <- rank(-DataArticles$link_clicks, ties.method=\"max\")\nDataArticles$general_rank_reach <- rank(-DataArticles$post_reach, ties.method=\"max\")\nDataArticles$general_rank_interactions <- rank(-DataArticles$total_interactions, ties.method=\"max\")\nDataArticles$article_click_rank <- ifelse(DataArticles$link_clicks <= 5000, \"< 5K\", ifelse(DataArticles$link_clicks <= 10000, \"5K - 10K\", ifelse(DataArticles$link_clicks <= 25000, \"10K - 25K\", \"> 25K\")))\n\n\nDataVideos$general_rank_video_views <- ave(DataVideos$post_video_views, DataVideos$video_meme, FUN = function(x) rank(-x, ties.method = \"max\"))\nDataVideos$general_rank_reach <- ave(DataVideos$post_reach, DataVideos$video_meme, FUN = function(x) rank(-x, ties.method = \"max\"))\nDataVideos$general_rank_interactions <- ave(DataVideos$total_interactions, DataVideos$video_meme, FUN = function(x) rank(-x, ties.method = \"max\"))\nDataVideos$video_views_rank <- ifelse(DataVideos$post_video_views <= 500000, \"< 500K\", ifelse(DataVideos$post_video_views <= 1500000, \"500K - 1.5M\", ifelse(DataVideos$post_video_views <= 5000000, \"1.5M - 5M\", \"> 5M\")))\n\nDataVideos$viral_video_views <- DataVideos$post_video_views*DataVideos$viral_rate\n\nDataVideos$fan_video_views <- DataVideos$post_video_views - DataVideos$fan_rate\n\nDataPhotos$general_rank_reach <- rank(-DataPhotos$post_reach, ties.method=\"max\")\nDataPhotos$general_rank_interactions <- rank(-DataPhotos$total_interactions, ties.method=\"max\")  \n\n# Bad Hombres Data -------------------------------------------------------------------------------------------------------\n\nDataArticlesBH$general_rank_link_clicks <- rank(-DataArticlesBH$link_clicks, ties.method=\"max\")\nDataArticlesBH$general_rank_reach <- rank(-DataArticlesBH$post_reach, ties.method=\"max\")\nDataArticlesBH$general_rank_interactions <- rank(-DataArticlesBH$total_interactions, ties.method=\"max\")\n\nDataVideosBH$general_rank_video_views <- ave(DataVideosBH$post_video_views, DataVideosBH$video_meme, FUN = function(x) rank(-x, ties.method = \"max\"))\nDataVideosBH$general_rank_reach <- ave(DataVideosBH$post_reach, DataVideosBH$video_meme, FUN = function(x) rank(-x, ties.method = \"max\"))\nDataVideosBH$general_rank_interactions <- ave(DataVideosBH$total_interactions, DataVideosBH$video_meme, FUN = function(x) rank(-x, ties.method = \"max\"))\n\nDataVideosBH$viral_video_views <- DataVideosBH$post_video_views*DataVideosBH$viral_rate\n\nDataVideosBH$fan_video_views <- DataVideosBH$post_video_views - DataVideosBH$fan_rate\n\nDataPhotosBH$general_rank_reach <- rank(-DataPhotosBH$post_reach, ties.method=\"max\")\nDataPhotosBH$general_rank_interactions <- rank(-DataPhotosBH$total_interactions, ties.method=\"max\")  \n\n# Fierce Data ------------------------------------------------------------------------------------------------------------\n\nDataArticlesFC$general_rank_link_clicks <- rank(-DataArticlesFC$link_clicks, ties.method=\"max\")\nDataArticlesFC$general_rank_reach <- rank(-DataArticlesFC$post_reach, ties.method=\"max\")\nDataArticlesFC$general_rank_interactions <- rank(-DataArticlesFC$total_interactions, ties.method=\"max\")\n\nDataVideosFC$general_rank_video_views <- ave(DataVideosFC$post_video_views, DataVideosFC$video_meme, FUN = function(x) rank(-x, ties.method = \"max\"))\nDataVideosFC$general_rank_reach <- ave(DataVideosFC$post_reach, DataVideosFC$video_meme, FUN = function(x) rank(-x, ties.method = \"max\"))\nDataVideosFC$general_rank_interactions <- ave(DataVideosFC$total_interactions, DataVideosFC$video_meme, FUN = function(x) rank(-x, ties.method = \"max\"))\n\nDataPhotosFC$general_rank_reach <- rank(-DataPhotosFC$post_reach, ties.method=\"max\")\nDataPhotosFC$general_rank_interactions <- rank(-DataPhotosFC$total_interactions, ties.method=\"max\")  \n\n# Authors Data -----------------------------------------------------------------------------------------------------------\n\nAuthorsWeek <- read.csv(\"data/authors-export-week.csv\", header = TRUE)\nAuthorsMonth <- read.csv(\"data/authors-export-month.csv\", header = TRUE)\n\nsprint_benchs <- c(11250,2000000,1500000)\n\n\n# UI ===============================================================================================================================\n\n\nui <- dashboardPage(skin = \"blue\",\n                    \n                    # Dashboard Header ---------------------------------------------------------------------------------------------\n                    \n                    dashboardHeader(title = \"Weekly Recapp\"),\n                    \n                    # Dashboard Sidebar --------------------------------------------------------------------------------------------                   \n                    dashboardSidebar(\n                      \n                      tags$head(\n                        tags$style(HTML(\"\n                                        .sidebar { height: 180vh; }\n                                        \" )\n                        )\n                      ),\n                      \n                      sidebarMenu(\n                        \n                        menuItem(\"Date Range\", dateRangeInput('dateRange1',label = \"\", start = range(Data$date)[2]-6, end = range(Data$date)[2], min = \"2015-10-01\", max = range(Data$date)[2]), icon = icon(\"fa fa-calendar\"), br()),\n                        br(),\n                        \n                        menuItem(\"Overview\", tabName = \"overview\", icon = icon(\"fa fa-eye\")),\n                        # menuItem(\"KPI's\", tabName = \"kpis\", icon = icon(\"fa fa-line-chart\")),\n                        menuItem(\"Top Posts\", tabName = \"topposts\", icon = icon(\"fa fa-chevron-up\")),\n                        menuItem(\"Bottom Posts\", tabName = \"bottomposts\", icon = icon(\"fa fa-chevron-down\")),\n                        # menuItem(\"Editor Leaderboard\", tabName = \"authors\", icon = icon(\"fa fa-pencil\")),\n                        menuItem(\"Content Categories\", tabName = \"categories\", icon = icon(\"fa fa-tags\")),\n                        menuItem(\"Reposts\", tabName = \"reposts\", icon = icon(\"fa fa-cubes\"))\n                        # menuItem(\"Sprint\", tabName = \"sprint\", icon = icon(\"fa fa-trophy\"))\n                        \n                      )\n                    ),\n                    \n                    # Dashboard Body -----------------------------------------------------------------------------------------------                    \n                    dashboardBody(fluidRow(\n                      \n                      tabItems(\n                        \n                        # 1. Overview ---------------------------------------------------------------------------------------------\n                        \n                        tabItem(tabName = \"overview\", fluidRow(\n                          \n                          tabBox(title = \"\",\n                                 \n                                 # 1.1. Overview - We Are MitÃº -----------------------------------------------------------------------------------\n                                 \n                                 tabPanel(\"We Are MitÃº\",\n                                          \n                                          box(title = \"Page Reach\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              column(3,selectizeInput(inputId = \"reach_chart_selectize\", label = \"Chart Type:\", choices = c(\"Reach\", \"Reach by Gender\", \"Reach by Age\"), selected = \"Reach\")),\n                                              column(3, selectizeInput(inputId = \"avg_total_overview_page_reach\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                              column(3, selectizeInput(inputId = \"chart_time_overview_page_reach\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                              column(3, actionButton(inputId = \"plot_overview_page_reach\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                              column(12, highchartOutput(\"PlotOverviewPageReach\", height = 350))),\n                                          \n                                          tabsetPanel(\n                                            \n                                            tabPanel(\"Articles\",\n                                                     \n                                                     box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(3,selectizeInput(inputId = \"chart_type_overview1\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(3, selectizeInput(inputId = \"chart_time_overview1\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(3, selectizeInput(inputId = \"chart_stack_overview1\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         column(3, actionButton(inputId = \"plot_article_overview1\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(9, selectizeInput(inputId = \"article_select_categories_overview\", label = \"Categories:\", choices = as.character(unique(DataArticles$category)[order(unique(DataArticles$category))]), selected = as.character(unique(DataArticles$category)), multiple = TRUE)),\n                                                         column(3,selectizeInput(inputId = \"chart_link_clicks_group_overview2\", label = \"Link Clicks:\", choices = c(\"< 5K\", \"5K - 10K\", \"10K - 25K\", \"> 25K\"), selected = c(\"< 5K\", \"5K - 10K\", \"10K - 25K\", \"> 25K\"), multiple = TRUE)),\n                                                         column(12, highchartOutput(\"PlotOverview111\", height = 350))),\n                                                     \n                                                     \n                                                     box(title = \"Content Performance\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(2, selectizeInput(inputId = \"chart_time_article_overview\", label = \"Chart Timeline:\", choices = c(\"hour\",\"day\", \"week\", \"month\"), selected = \"week\")), \n                                                         column(2, selectizeInput(inputId = \"avg_total_article_overview\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"variable_display_overview\", label = \"Variable Displayed:\", choices = c(\"link clicks\", \"interactions\"), selected = \"link clicks\")),\n                                                         column(2, selectizeInput(inputId = \"rate_display_overview\", label = \"Rate Displayed:\", choices = c(\"ctr\", \"interaction rate\"), selected = \"ctr\")),\n                                                         column(4, actionButton(inputId = \"plot_article_overview\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(8, selectizeInput(inputId = \"article_select_categories_performance_overview\", label = \"Categories:\", choices = as.character(unique(DataArticles$category)[order(unique(DataArticles$category))]), selected = as.character(unique(DataArticles$category)), multiple = TRUE)),\n                                                         column(2,selectizeInput(inputId = \"chart_link_clicks_group_overview\", label = \"Link Clicks:\", choices = c(\"< 5K\", \"5K - 10K\", \"10K - 25K\", \"> 25K\"), selected = c(\"< 5K\", \"5K - 10K\", \"10K - 25K\", \"> 25K\"), multiple = TRUE)),\n                                                         column(2, selectizeInput(inputId = \"article_overview_repost\", label = \"Reposts:\", choices = c(0,1), selected = c(0,1), multiple = TRUE)),\n                                                         column(12, highchartOutput(\"PlotOverview11\", height = 500)))\n                                                     \n                                            ),\n                                            \n                                            tabPanel(\"Videos\", \n                                                     \n                                                     box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(3,selectizeInput(inputId = \"chart_type_overview2\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(3, selectizeInput(inputId = \"chart_time_overview2\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(3, selectizeInput(inputId = \"chart_stack_overview2\", label = \"Stacked:\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         column(3, actionButton(inputId = \"plot_video_overview1\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(9, selectizeInput(inputId = \"video_select_categories_overview\", label = \"Categories:\", choices = as.character(unique(DataVideos[which(DataVideos$video_meme == 0),]$category)[order(unique(DataVideos[which(DataVideos$video_meme == 0),]$category))]), selected = as.character(unique(DataVideos[which(DataVideos$video_meme == 0),]$category)), multiple = TRUE)),\n                                                         column(3,selectizeInput(inputId = \"chart_video_views_group_overview2\", label = \"Video Views:\", choices = c(\"< 500K\", \"500K - 1.5M\", \"1.5M - 5M\", \"> 5M\"), selected = c(\"< 500K\", \"500K - 1.5M\", \"1.5M - 5M\", \"> 5M\"), multiple = TRUE)),\n                                                         column(12, highchartOutput(\"PlotOverview121\", height = 350))),\n                                                     \n                                                     \n                                                     box(title = \"Content Performance\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(2, selectizeInput(inputId = \"chart_time_video_overview\", label = \"Chart Timeline:\", choices = c(\"hour\",\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(2, selectizeInput(inputId = \"avg_total_video_overview\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"video_variable_display_overview\", label = \"Variable Displayed:\", choices = c(\"video views\", \"interactions\"), selected = \"video views\")),\n                                                         column(2, selectizeInput(inputId = \"video_rate_display_overview\", label = \"Rate Displayed:\", choices = c(\"views rate\", \"interaction rate\"), selected = \"views rate\")),\n                                                         column(4, actionButton(inputId = \"plot_video_overview\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(8, selectizeInput(inputId = \"video_select_categories_performance_overview\", label = \"Categories:\", choices = as.character(unique(DataVideos$category)[order(unique(DataVideos$category))]), selected = as.character(unique(DataVideos$category)), multiple = TRUE)),\n                                                         column(2,selectizeInput(inputId = \"chart_video_views_group_overview\", label = \"Video Views:\", choices = c(\"< 500K\", \"500K - 1.5M\", \"1.5M - 5M\", \"> 5M\"), selected = c(\"< 500K\", \"500K - 1.5M\", \"1.5M - 5M\", \"> 5M\"), multiple = TRUE)),\n                                                         column(2, selectizeInput(inputId = \"video_overview_repost\", label = \"Reposts:\", choices = c(0,1), selected = c(0,1), multiple = TRUE)),\n                                                         column(12, highchartOutput(\"PlotOverview12\", height = 500)))\n                                                     \n                                            ),\n                                            \n                                            tabPanel(\"Video Memes\", \n                                                     \n                                                     box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(3,selectizeInput(inputId = \"chart_type_overview3\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(3, selectizeInput(inputId = \"chart_time_overview3\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(3, selectizeInput(inputId = \"chart_stack_overview3\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         column(3, actionButton(inputId = \"plot_videomeme_overview1\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(9, selectizeInput(inputId = \"video_meme_select_categories_overview\", label = \"Categories:\", choices = as.character(unique(DataVideos[which(DataVideos$video_meme == 1),]$category)[order(unique(DataVideos[which(DataVideos$video_meme == 1),]$category))]), selected = as.character(unique(DataVideos[which(DataVideos$video_meme == 1),]$category)), multiple = TRUE)),\n                                                         column(3,selectizeInput(inputId = \"chart_video_views_meme_group_overview2\", label = \"Video Views:\", choices = c(\"< 500K\", \"500K - 1.5M\", \"1.5M - 5M\", \"> 5M\"), selected = c(\"< 500K\", \"500K - 1.5M\", \"1.5M - 5M\", \"> 5M\"), multiple = TRUE)),\n                                                         column(12, highchartOutput(\"PlotOverview131\", height = 350))),\n                                                     \n                                                     box(title = \"Content Performance\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(2, selectizeInput(inputId = \"chart_time_videomeme_overview\", label = \"Chart Timeline:\", choices = c(\"hour\",\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(2, selectizeInput(inputId = \"avg_total_videomeme_overview\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"videomeme_variable_display_overview\", label = \"Variable Displayed:\", choices = c(\"video views\", \"interactions\"), selected = \"video views\")),\n                                                         column(2, selectizeInput(inputId = \"videomeme_rate_display_overview\", label = \"Rate Displayed:\", choices = c(\"views rate\", \"interaction rate\"), selected = \"views rate\")),\n                                                         column(4, actionButton(inputId = \"plot_videomeme_overview\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(8, selectizeInput(inputId = \"video_meme_select_categories_performance_overview\", label = \"Categories:\", choices = as.character(unique(DataVideos$category)[order(unique(DataVideos$category))]), selected = as.character(unique(DataVideos$category)), multiple = TRUE)),\n                                                         column(2,selectizeInput(inputId = \"chart_video_views_meme_group_overview\", label = \"Video Views:\", choices = c(\"< 500K\", \"500K - 1.5M\", \"1.5M - 5M\", \"> 5M\"), selected = c(\"< 500K\", \"500K - 1.5M\", \"1.5M - 5M\", \"> 5M\"), multiple = TRUE)),\n                                                         column(2, selectizeInput(inputId = \"video_meme_overview_repost\", label = \"Reposts:\", choices = c(0,1), selected = c(0,1), multiple = TRUE)),\n                                                         column(12, highchartOutput(\"PlotOverview13\", height = 500)))\n                                                     \n                                            ),\n                                            \n                                            tabPanel(\"Memes\", \n                                                     \n                                                     box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(3,selectizeInput(inputId = \"chart_type_overview4\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(3, selectizeInput(inputId = \"chart_time_overview4\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(3, selectizeInput(inputId = \"chart_stack_overview4\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         column(3, actionButton(inputId = \"plot_meme_overview1\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(12, highchartOutput(\"PlotOverview141\", height = 350))),\n                                                     \n                                                     box(title = \"Content Performance\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(2, selectizeInput(inputId = \"chart_time_meme_overview\", label = \"Chart Timeline:\", choices = c(\"hour\",\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(2, selectizeInput(inputId = \"avg_total_meme_overview\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"meme_variable_display_overview\", label = \"Variable Displayed:\", choices = c(\"fan reach\", \"viral reach\"), selected = \"fan reach\")),\n                                                         column(2, selectizeInput(inputId = \"meme_rate_display_overview\", label = \"Rate Displayed:\", choices = c(\"interaction rate\", \"share rate\"), selected = \"views rate\")),\n                                                         column(4, actionButton(inputId = \"plot_meme_overview\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(12, highchartOutput(\"PlotOverview14\", height = 500)))\n                                            )\n                                            \n                                          )),\n                                 \n                                 # 1.2. Overview - Bad Hombres -----------------------------------------------------------------------\n                                 \n                                 tabPanel(\"Bad Hombres\",\n                                          \n                                          # box(title = \"Page Reach\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                          #     column(3,selectizeInput(inputId = \"bh_chart_type_overview_page_reach\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                          #     column(3, selectizeInput(inputId = \"bh_avg_total_overview_page_reach\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                          #     column(3, selectizeInput(inputId = \"bh_chart_time_overview_page_reach\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                          #     column(3, actionButton(inputId = \"bh_plot_overview_page_reach\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                          #     column(12, highchartOutput(\"BHPlotOverviewPageReach\", height = 350))),\n                                          # \n                                          # box(title = \"Page Reach by Gender\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                          #     column(3,selectizeInput(inputId = \"bh_chart_type_overview_page_reach_demo\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                          #     column(3, selectizeInput(inputId = \"bh_avg_total_overview_page_reach_demo\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                          #     column(3, selectizeInput(inputId = \"bh_chart_time_overview_page_reach_demo\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                          #     column(3, actionButton(inputId = \"bh_plot_overview_page_reach_demo\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                          #     column(12, highchartOutput(\"BHPlotOverviewPageReachDemo\", height = 350))),\n                                          # \n                                          # box(title = \"Page Reach by Age\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                          #     column(3,selectizeInput(inputId = \"bh_chart_type_overview_page_reach_demo_age\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                          #     column(3, selectizeInput(inputId = \"bh_avg_total_overview_page_reach_demo_age\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                          #     column(3, selectizeInput(inputId = \"bh_chart_time_overview_page_reach_demo_age\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                          #     column(3, actionButton(inputId = \"bh_plot_overview_page_reach_demo_age\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                          #     column(12, highchartOutput(\"BHPlotOverviewPageReachDemoAge\", height = 350))),\n                                          \n                                          tabsetPanel(\n                                            \n                                            tabPanel(\"Articles\",\n                                                     \n                                                     box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(3,selectizeInput(inputId = \"bh_chart_type_overview1\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(3, selectizeInput(inputId = \"bh_chart_time_overview1\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(3, selectizeInput(inputId = \"bh_chart_stack_overview1\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         column(3, actionButton(inputId = \"bh_plot_article_overview1\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(12, highchartOutput(\"BHPlotOverview111\", height = 350))),\n                                                     \n                                                     box(title = \"Content Performance\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(2, selectizeInput(inputId = \"bh_chart_time_article_overview\", label = \"Chart Timeline:\", choices = c(\"hour\",\"day\", \"week\", \"month\"), selected = \"week\")), \n                                                         column(2, selectizeInput(inputId = \"bh_avg_total_article_overview\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"bh_variable_display_overview\", label = \"Variable Displayed:\", choices = c(\"link clicks\", \"interactions\"), selected = \"link clicks\")),\n                                                         column(2, selectizeInput(inputId = \"bh_rate_display_overview\", label = \"Rate Displayed:\", choices = c(\"ctr\", \"interaction rate\"), selected = \"ctr\")),\n                                                         column(3, actionButton(inputId = \"bh_plot_article_overview\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(12, highchartOutput(\"BHPlotOverview11\", height = 500)))\n                                                     \n                                            ),\n                                            \n                                            tabPanel(\"Videos\", \n                                                     \n                                                     box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(3,selectizeInput(inputId = \"bh_chart_type_overview2\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(3, selectizeInput(inputId = \"bh_chart_time_overview2\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(3, selectizeInput(inputId = \"bh_chart_stack_overview2\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         column(3, actionButton(inputId = \"bh_plot_video_overview1\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(12, highchartOutput(\"BHPlotOverview121\", height = 350))),\n                                                     \n                                                     \n                                                     box(title = \"Content Performance\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(2, selectizeInput(inputId = \"bh_chart_time_video_overview\", label = \"Chart Timeline:\", choices = c(\"hour\",\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(2, selectizeInput(inputId = \"bh_avg_total_video_overview\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"bh_video_variable_display_overview\", label = \"Variable Displayed:\", choices = c(\"video views\", \"interactions\"), selected = \"video views\")),\n                                                         column(2, selectizeInput(inputId = \"bh_video_rate_display_overview\", label = \"Rate Displayed:\", choices = c(\"views rate\", \"interaction rate\"), selected = \"views rate\")),\n                                                         column(3, actionButton(inputId = \"bh_plot_video_overview\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(12, highchartOutput(\"BHPlotOverview12\", height = 500)))\n                                                     \n                                            ),\n                                            \n                                            # tabPanel(\"Video Memes\", \n                                            #          \n                                            #          box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                            #              column(3,selectizeInput(inputId = \"bh_chart_type_overview3\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                            #              column(3, selectizeInput(inputId = \"bh_chart_time_overview3\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                            #              column(3, selectizeInput(inputId = \"bh_chart_stack_overview3\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                            #              column(3, actionButton(inputId = \"bh_plot_videomeme_overview1\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                            #              column(12, highchartOutput(\"BHPlotOverview131\", height = 350))),\n                                            #          \n                                            #          box(title = \"Content Performance\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                            #              column(2, selectizeInput(inputId = \"bh_chart_time_videomeme_overview\", label = \"Chart Timeline:\", choices = c(\"hour\",\"day\", \"week\", \"month\"), selected = \"week\")),\n                                            #              column(2, selectizeInput(inputId = \"bh_avg_total_videomeme_overview\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                            #              column(2, selectizeInput(inputId = \"bh_videomeme_variable_display_overview\", label = \"Variable Displayed:\", choices = c(\"video views\", \"interactions\"), selected = \"video views\")),\n                                            #              column(2, selectizeInput(inputId = \"bh_videomeme_rate_display_overview\", label = \"Rate Displayed:\", choices = c(\"views rate\", \"interaction rate\"), selected = \"views rate\")),\n                                            #              column(3, actionButton(inputId = \"bh_plot_videomeme_overview\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                            #              column(12, highchartOutput(\"BHPlotOverview13\", height = 500)))\n                                            #          \n                                            # )\n                                            \n                                            tabPanel(\"Memes\",\n                                                     \n                                                     box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(3,selectizeInput(inputId = \"bh_chart_type_overview4\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(3, selectizeInput(inputId = \"bh_chart_time_overview4\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(3, selectizeInput(inputId = \"bh_chart_stack_overview4\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         column(3, actionButton(inputId = \"bh_plot_meme_overview1\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(12, highchartOutput(\"BHPlotOverview141\", height = 350))),\n                                                     \n                                                     box(title = \"Content Performance\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(2, selectizeInput(inputId = \"bh_chart_time_meme_overview\", label = \"Chart Timeline:\", choices = c(\"hour\",\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(2, selectizeInput(inputId = \"bh_avg_total_meme_overview\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"bh_meme_variable_display_overview\", label = \"Variable Displayed:\", choices = c(\"fan reach\", \"viral reach\"), selected = \"fan reach\")),\n                                                         column(2, selectizeInput(inputId = \"bh_meme_rate_display_overview\", label = \"Rate Displayed:\", choices = c(\"interaction rate\", \"share rate\"), selected = \"views rate\")),\n                                                         column(3, actionButton(inputId = \"bh_plot_meme_overview\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(12, highchartOutput(\"BHPlotOverview14\", height = 500)))\n                                            )\n                                          )\n                                 ),\n                                 \n                                 # 1.3. Overview - Fierce -----------------------------------------------------------------------\n                                 \n                                 tabPanel(\"Fierce\",\n                                          \n                                          tabsetPanel(\n                                            \n                                            tabPanel(\"Articles\",\n                                                     \n                                                     box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(3,selectizeInput(inputId = \"fc_chart_type_overview1\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(3, selectizeInput(inputId = \"fc_chart_time_overview1\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(3, selectizeInput(inputId = \"fc_chart_stack_overview1\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         column(3, actionButton(inputId = \"fc_plot_article_overview1\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(12, highchartOutput(\"FCPlotOverview111\", height = 350))),\n                                                     \n                                                     box(title = \"Content Performance\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(2, selectizeInput(inputId = \"fc_chart_time_article_overview\", label = \"Chart Timeline:\", choices = c(\"hour\",\"day\", \"week\", \"month\"), selected = \"week\")), \n                                                         column(2, selectizeInput(inputId = \"fc_avg_total_article_overview\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"fc_variable_display_overview\", label = \"Variable Displayed:\", choices = c(\"link clicks\", \"interactions\"), selected = \"link clicks\")),\n                                                         column(2, selectizeInput(inputId = \"fc_rate_display_overview\", label = \"Rate Displayed:\", choices = c(\"ctr\", \"interaction rate\"), selected = \"ctr\")),\n                                                         column(3, actionButton(inputId = \"fc_plot_article_overview\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(12, highchartOutput(\"FCPlotOverview11\", height = 500)))\n                                                     \n                                            ),\n                                            \n                                            tabPanel(\"Videos\", \n                                                     \n                                                     box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(3,selectizeInput(inputId = \"fc_chart_type_overview2\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(3, selectizeInput(inputId = \"fc_chart_time_overview2\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(3, selectizeInput(inputId = \"fc_chart_stack_overview2\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         column(3, actionButton(inputId = \"fc_plot_video_overview1\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(12, highchartOutput(\"FCPlotOverview121\", height = 350))),\n                                                     \n                                                     \n                                                     box(title = \"Content Performance\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(2, selectizeInput(inputId = \"fc_chart_time_video_overview\", label = \"Chart Timeline:\", choices = c(\"hour\",\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(2, selectizeInput(inputId = \"fc_avg_total_video_overview\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"fc_video_variable_display_overview\", label = \"Variable Displayed:\", choices = c(\"video views\", \"interactions\"), selected = \"video views\")),\n                                                         column(2, selectizeInput(inputId = \"fc_video_rate_display_overview\", label = \"Rate Displayed:\", choices = c(\"views rate\", \"interaction rate\"), selected = \"views rate\")),\n                                                         column(3, actionButton(inputId = \"fc_plot_video_overview\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(12, highchartOutput(\"FCPlotOverview12\", height = 500)))\n                                                     \n                                            ),\n                                            \n                                            # tabPanel(\"Video Memes\", \n                                            #          \n                                            #          box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                            #              column(3,selectizeInput(inputId = \"fc_chart_type_overview3\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                            #              column(3, selectizeInput(inputId = \"fc_chart_time_overview3\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                            #              column(3, selectizeInput(inputId = \"fc_chart_stack_overview3\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                            #              column(3, actionButton(inputId = \"fc_plot_videomeme_overview1\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                            #              column(12, highchartOutput(\"FCPlotOverview131\", height = 350))),\n                                            #          \n                                            #          box(title = \"Content Performance\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                            #              column(2, selectizeInput(inputId = \"fc_chart_time_videomeme_overview\", label = \"Chart Timeline:\", choices = c(\"hour\",\"day\", \"week\", \"month\"), selected = \"week\")),\n                                            #              column(2, selectizeInput(inputId = \"fc_avg_total_videomeme_overview\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                            #              column(2, selectizeInput(inputId = \"fc_videomeme_variable_display_overview\", label = \"Variable Displayed:\", choices = c(\"video views\", \"interactions\"), selected = \"video views\")),\n                                            #              column(2, selectizeInput(inputId = \"fc_videomeme_rate_display_overview\", label = \"Rate Displayed:\", choices = c(\"views rate\", \"interaction rate\"), selected = \"views rate\")),\n                                            #              column(3, actionButton(inputId = \"fc_plot_videomeme_overview\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                            #              column(12, highchartOutput(\"FCPlotOverview13\", height = 500)))\n                                            #          \n                                            # )\n                                            \n                                            tabPanel(\"Memes\",\n                                                     \n                                                     box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(3,selectizeInput(inputId = \"fc_chart_type_overview4\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(3, selectizeInput(inputId = \"fc_chart_time_overview4\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(3, selectizeInput(inputId = \"fc_chart_stack_overview4\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         column(3, actionButton(inputId = \"fc_plot_meme_overview1\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(12, highchartOutput(\"FCPlotOverview141\", height = 350))),\n                                                     \n                                                     box(title = \"Content Performance\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(2, selectizeInput(inputId = \"fc_chart_time_meme_overview\", label = \"Chart Timeline:\", choices = c(\"hour\",\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(2, selectizeInput(inputId = \"fc_avg_total_meme_overview\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"fc_meme_variable_display_overview\", label = \"Variable Displayed:\", choices = c(\"fan reach\", \"viral reach\"), selected = \"fan reach\")),\n                                                         column(2, selectizeInput(inputId = \"fc_meme_rate_display_overview\", label = \"Rate Displayed:\", choices = c(\"interaction rate\", \"share rate\"), selected = \"views rate\")),\n                                                         column(3, actionButton(inputId = \"fc_plot_meme_overview\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                         column(12, highchartOutput(\"FCPlotOverview14\", height = 500)))\n                                            )\n                                          )\n                                 )\n                                 \n                                 , width = 12))\n                        ),\n                        \n                        # 2. KPIs ---------------------------------------------------------------------------------------------\n                        \n                        tabItem(tabName = \"kpis\", fluidRow(\n                          \n                          tabBox(title = \"\",\n                                 \n                                 # 2.1. KPIs - We Are MitÃº -----------------------------------------------------------------------------------\n                                 \n                                 tabPanel(\"We Are MitÃº\",\n                                          \n                                          tabsetPanel(\n                                            \n                                            tabPanel(\"Content Output\",\n                                                     \n                                                     # box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                     #     column(3,selectizeInput(inputId = \"chart_type_kpis\", label = \"Chart Type:\", choices = c(\"area\", \"column\"), selected = \"column\")),\n                                                     #     column(3, selectizeInput(inputId = \"chart_time_kpis\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"month\")),\n                                                     #     column(3, selectizeInput(inputId = \"chart_stack_kpis\", label = \"Stacked:\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                     #     column(3, actionButton(inputId = \"plot_kpis\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                     #     column(12, highchartOutput(\"PlotKpis\"))),\n                                                     # \n                                                     #                                             box(title = \"Content Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                     #                                                 column(3,selectizeInput(inputId = \"chart_type_kpis1\", label = \"Chart Type:\", choices = c(\"area\", \"column\"), selected = \"column\")),\n                                                     #                                                 column(3, selectizeInput(inputId = \"chart_time_kpis1\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"month\")),\n                                                     #                                                 column(3, selectizeInput(inputId = \"chart_stack_kpis1\", label = \"Stacked:\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                     #                                                 column(3, actionButton(inputId = \"plot_kpis1\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                     #                                                 column(12, highchartOutput(\"PlotKpis1\"))),\n                                                     # \n                                                     # box(title = \"Content Interactions\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                     #     column(3,selectizeInput(inputId = \"chart_type_kpis2\", label = \"Chart Type:\", choices = c(\"area\", \"column\"), selected = \"column\")),\n                                                     #     column(3, selectizeInput(inputId = \"chart_time_kpis2\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"month\")),\n                                                     #     column(3, selectizeInput(inputId = \"chart_stack_kpis2\", label = \"Stacked:\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                     #     column(3, actionButton(inputId = \"plot_kpis2\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                     #     column(12, highchartOutput(\"PlotKpis2\"))),\n                                                     # \n                                                     # box(title = \"Content Reach\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                     #     column(3,selectizeInput(inputId = \"chart_type_kpis3\", label = \"Chart Type:\", choices = c(\"area\", \"column\"), selected = \"column\")),\n                                                     #     column(3, selectizeInput(inputId = \"chart_time_kpis3\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"month\")),\n                                                     #     column(3, selectizeInput(inputId = \"chart_stack_kpis3\", label = \"Stacked:\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                     #     column(3, actionButton(inputId = \"plot_kpis3\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                                     #     column(12, highchartOutput(\"PlotKpis3\"))),\n                                                     \n                                                     box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         column(12, selectizeInput(inputId = \"kpis_year_content_output\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                        \n                                                         column(12, highchartOutput(\"PlotKpisContentOutputMonth\")),\n                                                         \n                                                         column(12, DT::dataTableOutput(\"PlotKpisContentOutputTable\")),\n                                                     \n                                                         column(12, \n                                                                column(8, highchartOutput(\"PlotKpisContentOutputTitle\", height = 30)),\n                                                                column(4, selectizeInput(inputId = \"kpis_month_content_output\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                                         ),\n                                                      \n                                                         column(12, highchartOutput(\"PlotKpisContentOutput\"))\n                                                     ),\n                                                     \n                                                     box(title = \"Article Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         column(12, selectizeInput(inputId = \"kpis_year_article_output\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisArticleContentOutputMonth\")),\n                                                         column(12, DT::dataTableOutput(\"PlotKpisArticleContentOutputTable\")),\n                                                         \n                                                         column(12, \n                                                                column(8, highchartOutput(\"PlotKpisArticleContentOutputTitle\", height = 30)),\n                                                                column(4, selectizeInput(inputId = \"kpis_month_article_content_output\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                                         ),\n                                                         column(12, highchartOutput(\"PlotKpisArticleContentOutput\"))\n                                                         \n                                                     ),\n                                                     \n                                                     box(title = \"Video Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         column(12, selectizeInput(inputId = \"kpis_year_video_output\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisVideoContentOutputMonth\")),\n                                                         \n                                                         column(12, DT::dataTableOutput(\"PlotKpisVideoContentOutputTable\")),\n                                                         column(12, \n                                                                column(8, highchartOutput(\"PlotKpisVideoContentOutputTitle\", height = 30)),\n                                                                column(4, selectizeInput(inputId = \"kpis_month_video_content_output\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                                         ),\n                                                         column(12, highchartOutput(\"PlotKpisVideoContentOutput\"))\n                                                         \n                                                     ),\n                                                     \n                                                     box(title = \"Meme Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         \n                                                         column(12, selectizeInput(inputId = \"kpis_year_meme_output\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisMemeContentOutputMonth\")),\n                                                         \n                                                         column(12, DT::dataTableOutput(\"PlotKpisMemeContentOutputTable\")),\n                                                         column(12, \n                                                                column(8, highchartOutput(\"PlotKpisMemeContentOutputTitle\", height = 30)),\n                                                                column(4, selectizeInput(inputId = \"kpis_month_meme_content_output\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                                         ),\n                                                         column(12, highchartOutput(\"PlotKpisMemeContentOutput\"))\n                                                     )\n                                                     ),\n                                                     \n                                            \n                                            tabPanel(\"Followers\",\n                                                     \n                                                     box(title = \"Total Followers\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         column(12, selectizeInput(inputId = \"kpis_year_total_followers\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                         column(12, highchartOutput(\"PlotKpisTotalFollowers\")),\n                                                         column(12, DT::dataTableOutput(\"PlotKpisTotalFollowersTable\"))\n                                                         \n                                                     ),\n                                                     \n                                                     box(title = \"New Followers\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         column(12, selectizeInput(inputId = \"kpis_year_new_followers\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisNewFollowersMonth\")),\n                                                         column(12, DT::dataTableOutput(\"PlotKpisNewFollowersTable\")),\n                                                        \n                                                         column(12, br()),\n                                                         \n                                                         # column(12, highchartOutput(\"PlotKpisNewFollowersTitle\", height = 30)),\n                                                         column(12, selectizeInput(inputId = \"kpis_month_new_followers\", label = \"Month:\", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                                         column(12, highchartOutput(\"PlotKpisNewFollowers\"))\n                                                         \n                                                     )\n                                                     \n                                            ),\n                                            \n                                            tabPanel(\"Content Views\",\n                                                                        \n                                                     box(title = \"Total Content Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         column(12, selectizeInput(inputId = \"kpis_year_content_views\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisContentViewsMonth\")),\n                                                         \n                                                         column(12, DT::dataTableOutput(\"PlotKpisContentViewsTable\")),\n                                                         \n                                                         column(12, br()),\n                                                         \n                                                         column(12, \n                                                                # column(8, highchartOutput(\"PlotKpisContentViewsTitle\", height = 30)),\n                                                                column(12, selectizeInput(inputId = \"kpis_month_content_views\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                                         ),\n                                                         column(12, highchartOutput(\"PlotKpisContentViews\"))\n                                                         \n                                                     ),\n                                                     \n                                                     box(title = \"Articles\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         column(12, selectizeInput(inputId = \"kpis_year_articles\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisArticlesMonth\")),\n                                                         \n                                                         column(12, DT::dataTableOutput(\"PlotKpisArticlesTable\")),\n                                                         \n                                                         column(12, br()),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"kpis_month_articles\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                                         column(4, selectizeInput(inputId = \"articles_kpi_select_variable\", label = \"Show: \", choices = c(\"Content Views\", \"Interactions\", \"Reach\"), selected = \"Content Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"articles_kpi_select_repost\", label = \"Posts: \", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisArticles\"))),\n                                                     \n                                                     box(title = \"All Videos\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         column(12, selectizeInput(inputId = \"kpis_year_all_videos\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisAllVideosMonth\")),\n                                                         \n                                                         column(12, DT::dataTableOutput(\"PlotKpisAllVideosTable\")),\n                                                         \n                                                         column(12, br()),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"kpis_month_all_videos\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                                         column(4, selectizeInput(inputId = \"all_videos_kpi_select_variable\", label = \"Show: \", choices = c(\"Content Views\", \"Interactions\", \"Reach\"), selected = \"Content Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"all_videos_kpi_select_repost\", label = \"Posts: \", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisAllVideos\"))),\n                                                     \n                                                     \n                                                     box(title = \"Videos\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         column(12, selectizeInput(inputId = \"kpis_year_videos\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisVideosMonth\")),\n                                                         \n                                                         column(12, DT::dataTableOutput(\"PlotKpisVideosTable\")),\n                                                         \n                                                         column(12, br()),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"kpis_month_videos\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                                         column(4, selectizeInput(inputId = \"videos_kpi_select_variable\", label = \"Show: \", choices = c(\"Content Views\", \"Interactions\", \"Reach\"), selected = \"Content Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"videos_kpi_select_repost\", label = \"Posts: \", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisVideos\"))),\n                                                     \n                                                     box(title = \"Video Memes\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         column(12, selectizeInput(inputId = \"kpis_year_video_memes\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisVideoMemesMonth\")),\n                                                         \n                                                         column(12, DT::dataTableOutput(\"PlotKpisVideoMemesTable\")),\n                                                         \n                                                         column(12, br()),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"kpis_month_video_memes\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                                         column(4, selectizeInput(inputId = \"video_memes_kpi_select_variable\", label = \"Show: \", choices = c(\"Content Views\", \"Interactions\", \"Reach\"), selected = \"Content Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"video_memes_kpi_select_repost\", label = \"Posts: \", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisVideoMemes\"))),\n                                                     \n                                                     box(title = \"Memes\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         column(12, selectizeInput(inputId = \"kpis_year_memes\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisMemesMonth\")),\n                                                         \n                                                         column(12, DT::dataTableOutput(\"PlotKpisMemesTable\")),\n                                                         \n                                                         column(12, br()),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"kpis_month_memes\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                                         column(4, selectizeInput(inputId = \"memes_kpi_select_variable\", label = \"Show: \", choices = c(\"Content Views\", \"Interactions\"), selected = \"Content Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"memes_kpi_select_repost\", label = \"Posts: \", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisMemes\")))\n                                            ),\n                                            \n                                            tabPanel(\"Reach & Engagement\",\n                                            \n                                                     box(title = \"Reach\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         column(12, selectizeInput(inputId = \"kpis_year_reach\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisReachMonth\")),\n                                                         column(12, \n                                                                column(8, highchartOutput(\"PlotKpisReachTitle\", height = 30)),\n                                                                column(4, selectizeInput(inputId = \"kpis_month_reach\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                                         ),\n                                                         column(12, highchartOutput(\"PlotKpisReach\"))\n                                                     ),\n                                                     \n                                                     box(title = \"Engagement\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         column(12, selectizeInput(inputId = \"kpis_year_engagement\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                         \n                                                         column(12, highchartOutput(\"PlotKpisEngagementMonth\")),\n                                                         column(12, \n                                                                column(8, highchartOutput(\"PlotKpisEngagementTitle\", height = 30)),\n                                                                column(4, selectizeInput(inputId = \"kpis_month_engagement\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                                         ),\n                                                         column(12, highchartOutput(\"PlotKpisEngagement\"))\n                                                         \n                                                     )\n                                                     \n                                            ))\n                                 ),\n                                 \n                                 # 2.2. KPIs - Bad Hombres -----------------------------------------------------------------------------------\n                                 \n                                 tabPanel(\"Bad Hombres\",\n                                          \n                                          # box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                          #     column(3,selectizeInput(inputId = \"bh_chart_type_kpis\", label = \"Chart Type:\", choices = c(\"area\", \"column\"), selected = \"column\")),\n                                          #     column(3, selectizeInput(inputId = \"bh_chart_time_kpis\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"month\")),\n                                          #     column(3, selectizeInput(inputId = \"bh_chart_stack_kpis\", label = \"Stacked:\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                          #     column(3, actionButton(inputId = \"bh_plot_kpis\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                          #     column(12, highchartOutput(\"BHPlotKpis\"))),\n                                          # \n                                          #                                             box(title = \"Content Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                          #                                                 column(3,selectizeInput(inputId = \"bh_chart_type_kpis1\", label = \"Chart Type:\", choices = c(\"area\", \"column\"), selected = \"column\")),\n                                          #                                                 column(3, selectizeInput(inputId = \"bh_chart_time_kpis1\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"month\")),\n                                          #                                                 column(3, selectizeInput(inputId = \"bh_chart_stack_kpis1\", label = \"Stacked:\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                          #                                                 column(3, actionButton(inputId = \"bh_plot_kpis1\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                          #                                                 column(12, highchartOutput(\"BHPlotKpis1\"))),\n                                          # \n                                          # box(title = \"Content Interactions\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                          #     column(3,selectizeInput(inputId = \"bh_chart_type_kpis2\", label = \"Chart Type:\", choices = c(\"area\", \"column\"), selected = \"column\")),\n                                          #     column(3, selectizeInput(inputId = \"bh_chart_time_kpis2\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"month\")),\n                                          #     column(3, selectizeInput(inputId = \"bh_chart_stack_kpis2\", label = \"Stacked:\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                          #     column(3, actionButton(inputId = \"bh_plot_kpis2\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                          #     column(12, highchartOutput(\"BHPlotKpis2\"))),\n                                          # \n                                          # box(title = \"Content Reach\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                          #     column(3,selectizeInput(inputId = \"bh_chart_type_kpis3\", label = \"Chart Type:\", choices = c(\"area\", \"column\"), selected = \"column\")),\n                                          #     column(3, selectizeInput(inputId = \"bh_chart_time_kpis3\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"month\")),\n                                          #     column(3, selectizeInput(inputId = \"bh_chart_stack_kpis3\", label = \"Stacked:\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                          #     column(3, actionButton(inputId = \"bh_plot_kpis3\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                          #     column(12, highchartOutput(\"BHPlotKpis3\"))),\n                                          \n                                          box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              column(6, highchartOutput(\"BHPlotKpisContentOutputMonth\")),\n                                              column(6, \n                                                     column(8, highchartOutput(\"BHPlotKpisContentOutputTitle\", height = 30)),\n                                                     column(4, selectizeInput(inputId = \"bh_kpis_month_content_output\", label = \"Month: \", choices = as.character(format(seq(as.Date(paste(format(range(DataBH$date)[1], \"%b %Y\"), \"01\"), \"%b %Y %d\"), as.Date(paste(format(range(DataBH$date)[2], \"%b %Y\"), \"01\"), \"%b %Y %d\"), by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                              ),\n                                              column(6, highchartOutput(\"BHPlotKpisContentOutput\")),\n                                              \n                                              column(6, highchartOutput(\"BHPlotKpisArticleContentOutputMonth\")),\n                                              column(6, \n                                                     column(8, highchartOutput(\"BHPlotKpisArticleContentOutputTitle\", height = 30)),\n                                                     column(4, selectizeInput(inputId = \"bh_kpis_month_article_content_output\", label = \"Month: \", choices = as.character(format(seq(as.Date(paste(format(range(DataBH$date)[1], \"%b %Y\"), \"01\"), \"%b %Y %d\"), as.Date(paste(format(range(DataBH$date)[2], \"%b %Y\"), \"01\"), \"%b %Y %d\"), by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                              ),\n                                              column(6, highchartOutput(\"BHPlotKpisArticleContentOutput\")),\n                                              \n                                              column(6, highchartOutput(\"BHPlotKpisVideoContentOutputMonth\")),\n                                              column(6, \n                                                     column(8, highchartOutput(\"BHPlotKpisVideoContentOutputTitle\", height = 30)),\n                                                     column(4, selectizeInput(inputId = \"bh_kpis_month_video_content_output\", label = \"Month: \", choices = as.character(format(seq(as.Date(paste(format(range(DataBH$date)[1], \"%b %Y\"), \"01\"), \"%b %Y %d\"), as.Date(paste(format(range(DataBH$date)[2], \"%b %Y\"), \"01\"), \"%b %Y %d\"), by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                              ),\n                                              column(6, highchartOutput(\"BHPlotKpisVideoContentOutput\")),\n                                              \n                                              column(6, highchartOutput(\"BHPlotKpisMemeContentOutputMonth\")),\n                                              column(6, \n                                                     column(8, highchartOutput(\"BHPlotKpisMemeContentOutputTitle\", height = 30)),\n                                                     column(4, selectizeInput(inputId = \"bh_kpis_month_meme_content_output\", label = \"Month: \", choices = as.character(format(seq(as.Date(paste(format(range(DataBH$date)[1], \"%b %Y\"), \"01\"), \"%b %Y %d\"), as.Date(paste(format(range(DataBH$date)[2], \"%b %Y\"), \"01\"), \"%b %Y %d\"), by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                              ),\n                                              column(6, highchartOutput(\"BHPlotKpisMemeContentOutput\"))\n                                          ),\n                                          \n                                          box(title = \"Followers\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              column(12, highchartOutput(\"BHPlotKpisTotalFollowers\")),\n                                              column(6, highchartOutput(\"BHPlotKpisNewFollowersMonth\")),\n                                              column(4, highchartOutput(\"BHPlotKpisNewFollowersTitle\", height = 30)),\n                                              column(2, selectizeInput(inputId = \"bh_kpis_month_new_followers\", label = \"Month:\", choices = as.character(format(seq(as.Date(paste(format(range(DataBH$date)[1], \"%b %Y\"), \"01\"), \"%b %Y %d\"), as.Date(paste(format(range(DataBH$date)[2], \"%b %Y\"), \"01\"), \"%b %Y %d\"), by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                              column(6, highchartOutput(\"BHPlotKpisNewFollowers\"))\n                                              \n                                          ),\n                                          \n                                          # box(title = \"New Followers - Month 2016\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 4,\n                                          #     column(12, highchartOutput(\"BHPlotKpisNewFollowersMonth16\", height = 478))),\n                                          # \n                                          # box(title = \"Reach - Month 2016\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                          #     column(12, highchartOutput(\"BHPlotKpisReachMonth16\", height = 478))),\n                                          \n                                          box(title = \"Content Views - Reach - Engagement\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              column(6, highchartOutput(\"BHPlotKpisContentViewsMonth\")),\n                                              column(6, \n                                                     column(8, highchartOutput(\"BHPlotKpisContentViewsTitle\", height = 30)),\n                                                     column(4, selectizeInput(inputId = \"bh_kpis_month_content_views\", label = \"Month: \", choices = as.character(format(seq(as.Date(paste(format(range(DataBH$date)[1], \"%b %Y\"), \"01\"), \"%b %Y %d\"), as.Date(paste(format(range(DataBH$date)[2], \"%b %Y\"), \"01\"), \"%b %Y %d\"), by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                              ),\n                                              column(6, highchartOutput(\"BHPlotKpisContentViews\")),\n                                              \n                                              column(6, highchartOutput(\"BHPlotKpisReachMonth\")),\n                                              column(6, \n                                                     column(8, highchartOutput(\"BHPlotKpisReachTitle\", height = 30)),\n                                                     column(4, selectizeInput(inputId = \"bh_kpis_month_reach\", label = \"Month: \", choices = as.character(format(seq(as.Date(paste(format(range(DataBH$date)[1], \"%b %Y\"), \"01\"), \"%b %Y %d\"), as.Date(paste(format(range(DataBH$date)[2], \"%b %Y\"), \"01\"), \"%b %Y %d\"), by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                              ),\n                                              column(6, highchartOutput(\"BHPlotKpisReach\")),\n                                              \n                                              column(6, highchartOutput(\"BHPlotKpisEngagementMonth\")),\n                                              column(6, \n                                                     column(8, highchartOutput(\"BHPlotKpisEngagementTitle\", height = 30)),\n                                                     column(4, selectizeInput(inputId = \"bh_kpis_month_engagement\", label = \"Month: \", choices = as.character(format(seq(as.Date(paste(format(range(DataBH$date)[1], \"%b %Y\"), \"01\"), \"%b %Y %d\"), as.Date(paste(format(range(DataBH$date)[2], \"%b %Y\"), \"01\"), \"%b %Y %d\"), by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                              ),\n                                              column(6, highchartOutput(\"BHPlotKpisEngagement\"))\n                                              \n                                          ),\n                                          \n                                          box(title = \"Articles\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                              column(4, selectizeInput(inputId = \"bh_kpis_month_articles\", label = \"Month: \", choices = as.character(format(seq(as.Date(paste(format(range(DataBH$date)[1], \"%b %Y\"), \"01\"), \"%b %Y %d\"), as.Date(paste(format(range(DataBH$date)[2], \"%b %Y\"), \"01\"), \"%b %Y %d\"), by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                              column(4, selectizeInput(inputId = \"bh_articles_kpi_select_variable\", label = \"Show: \", choices = c(\"Content Views\", \"Interactions\", \"Reach\"), selected = \"Content Views\")),\n                                              \n                                              column(4, selectizeInput(inputId = \"bh_articles_kpi_select_repost\", label = \"Posts: \", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                              \n                                              column(12, highchartOutput(\"BHPlotKpisArticles\"))),\n                                          \n                                          box(title = \"All Videos\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                              column(4, selectizeInput(inputId = \"bh_kpis_month_all_videos\", label = \"Month: \", choices = as.character(format(seq(as.Date(paste(format(range(DataBH$date)[1], \"%b %Y\"), \"01\"), \"%b %Y %d\"), as.Date(paste(format(range(DataBH$date)[2], \"%b %Y\"), \"01\"), \"%b %Y %d\"), by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                              column(4, selectizeInput(inputId = \"bh_all_videos_kpi_select_variable\", label = \"Show: \", choices = c(\"Content Views\", \"Interactions\", \"Reach\"), selected = \"Content Views\")),\n                                              \n                                              column(4, selectizeInput(inputId = \"bh_all_videos_kpi_select_repost\", label = \"Posts: \", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                              \n                                              column(12, highchartOutput(\"BHPlotKpisAllVideos\"))),\n                                          \n                                          \n                                          box(title = \"Videos\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                              column(4, selectizeInput(inputId = \"bh_kpis_month_videos\", label = \"Month: \", choices = as.character(format(seq(as.Date(paste(format(range(DataBH$date)[1], \"%b %Y\"), \"01\"), \"%b %Y %d\"), as.Date(paste(format(range(DataBH$date)[2], \"%b %Y\"), \"01\"), \"%b %Y %d\"), by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                              column(4, selectizeInput(inputId = \"bh_videos_kpi_select_variable\", label = \"Show: \", choices = c(\"Content Views\", \"Interactions\", \"Reach\"), selected = \"Content Views\")),\n                                              \n                                              column(4, selectizeInput(inputId = \"bh_videos_kpi_select_repost\", label = \"Posts: \", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                              \n                                              column(12, highchartOutput(\"BHPlotKpisVideos\"))),\n                                          \n                                          box(title = \"Video Memes\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                              column(4, selectizeInput(inputId = \"bh_kpis_month_video_memes\", label = \"Month: \", choices = as.character(format(seq(as.Date(paste(format(range(DataBH$date)[1], \"%b %Y\"), \"01\"), \"%b %Y %d\"), as.Date(paste(format(range(DataBH$date)[2], \"%b %Y\"), \"01\"), \"%b %Y %d\"), by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                              column(4, selectizeInput(inputId = \"bh_video_memes_kpi_select_variable\", label = \"Show: \", choices = c(\"Content Views\", \"Interactions\", \"Reach\"), selected = \"Content Views\")),\n                                              \n                                              column(4, selectizeInput(inputId = \"bh_video_memes_kpi_select_repost\", label = \"Posts: \", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                              \n                                              column(12, highchartOutput(\"BHPlotKpisVideoMemes\"))),\n                                          \n                                          box(title = \"Memes\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                              column(4, selectizeInput(inputId = \"bh_kpis_month_memes\", label = \"Month: \", choices = as.character(format(seq(as.Date(paste(format(range(DataBH$date)[1], \"%b %Y\"), \"01\"), \"%b %Y %d\"), as.Date(paste(format(range(DataBH$date)[2], \"%b %Y\"), \"01\"), \"%b %Y %d\"), by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                              column(4, selectizeInput(inputId = \"bh_memes_kpi_select_variable\", label = \"Show: \", choices = c(\"Content Views\", \"Interactions\"), selected = \"Content Views\")),\n                                              \n                                              column(4, selectizeInput(inputId = \"bh_memes_kpi_select_repost\", label = \"Posts: \", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                              \n                                              column(12, highchartOutput(\"BHPlotKpisMemes\")))\n                                          \n                                 )\n                                 , width = 12))\n                        ),\n                      \n                      \n                        # 3. Top Posts -------------------------------------------------------------------------------------------------------\n                        \n                        tabItem(tabName = \"topposts\", fluidRow(\n                          \n                          tabBox(title = \"\",\n                                 \n                                 # 3.1. Top Posts - We Are MitÃº -----------------------------------------------------------------------------------\n                                 \n                                 tabPanel(\"We Are MitÃº\",\n                                          \n                                          tabsetPanel(\n                                            \n                                            # 3.1.1. Articles -------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Articles\",\n                                                     \n                                                     box(title = \"Top 10 Link Clicks\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"article_select_original_repost_top\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"article_select_sort_by_top\", label = \"Sort By:\", choices = c(\"Link Clicks\", \"Interactions\", \"Reach\"), selected = \"Link Clicks\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"article_select_plot_variable_top\", label = \"Plot Variable:\", choices = c(\"Link Clicks\", \"Interactions\", \"Reach\"), selected = \"Link Clicks\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"article_select_categories_top\", label = \"Categories:\", choices = as.character(unique(DataArticles$category)[order(unique(DataArticles$category))]), selected = as.character(unique(DataArticles$category)), multiple = TRUE)),\n                                                         \n                                                         # column(12, uiOutput(\"article_select_categories_top\")),\n                                                         \n                                                         column(4, actionButton(inputId = \"article_prev_ten_top\", label = \"Previous 10\", width = \"100%\", style = \"height:40px\")),\n                                                         # tagList(shiny::icon(\"fa fa-chevron-left\", \"fa-2x\"), \" Previous 10\")\n                                                         \n                                                         column(4, highchartOutput(\"Plot1_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"article_next_ten_top\", label = \" Next 10\", width = \"100%\", style = \"height:40px\")),\n                                                         # , icon = icon(\"fa fa-chevron-right\")\n                                                         column(12, highchartOutput(\"Plot1\", height = 450))),\n                                                     \n                                                     box(title = \"Top 10 IR & CTR\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"Plot2\")),\n                                                     \n                                                     box(title = \"Top 10 Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7,highchartOutput(\"Plot21\")),\n                                                         column(5,highchartOutput(\"Plot22\"))),\n                                                     \n                                                     box(title = \"Top 10 Articles:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"show_vars1\", strong(\"Variables\"), names(DataArticles),selected = c(\"headline\",\"date\",\"post_reach\",\"interaction_rate\",\"link_clicks\",\"ctr\", \"times_repost\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"Table1\"))\n                                                     \n                                            ),\n                                            \n                                            # 3.1.2. Videos ---------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Videos\",\n                                                     \n                                                     box(title = \"Top 5 Videos: Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"video_select_original_repost_top\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"video_select_sort_by_top\", label = \"Sort By:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"video_select_plot_variable_top\", label = \"Plot Variable:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"video_select_categories_top\", label = \"Categories:\", choices = as.character(unique(DataVideos$category)[order(unique(DataVideos$category))]), selected = as.character(unique(DataVideos$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"video_prev_ten_top\", label = \"Previous 5\", width = \"100%\", style = \"height:40px\")),\n                                                         # , icon = icon(\"fa fa-chevron-left\")\n                                                         \n                                                         column(4, highchartOutput(\"Plot5_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"video_next_ten_top\", label = \" Next 5\", width = \"100%\", style = \"height:40px\")),\n                                                         # , icon = icon(\"fa fa-chevron-right\")\n                                                         column(12, highchartOutput(\"Plot5\", height = 450))),\n                                                     \n                                                     box(title = \"Top 5 Videos: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7, highchartOutput(\"Plot53\")),\n                                                         column(5, highchartOutput(\"Plot54\"))),\n                                                     \n                                                     box(title = \"Top 5 Videos: % Viewed\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"Plot52\")),\n                                                     \n                                                     box(title = \"Top 5 Videos:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"show_vars2\", strong(\"Variables\"), names(DataVideos),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\", \"post_video_views\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"Table3\"))\n                                                     \n                                            ),\n                                            \n                                            # 3.1.3. Video Memes ----------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Video Memes\",\n                                                     \n                                                     box(title = \"Top 5 Video Memes: Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"video_meme_select_original_repost_top\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"video_meme_select_sort_by_top\", label = \"Sort By:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"video_meme_select_plot_variable_top\", label = \"Plot Variable:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"video_meme_select_categories_top\", label = \"Categories:\", choices = as.character(unique(DataVideos$category)[order(unique(DataVideos$category))]), selected = as.character(unique(DataVideos$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"video_meme_prev_ten_top\", label = \"Previous 5\", width = \"100%\", style = \"height:40px\")),\n                                                         # , icon = icon(\"fa fa-chevron-left\")\n                                                         \n                                                         column(4, highchartOutput(\"Plot5b_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"video_meme_next_ten_top\", label = \" Next 5\", width = \"100%\", style = \"height:40px\")),\n                                                         # , icon = icon(\"fa fa-chevron-right\")\n                                                         column(12, highchartOutput(\"Plot5b\", height = 450))),\n                                                     \n                                                     box(title = \"Top 5 Video Memes: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7, highchartOutput(\"Plot53b\")),\n                                                         column(5, highchartOutput(\"Plot54b\"))),\n                                                     \n                                                     box(title = \"Top 5 Video Memes: % Viewed\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"Plot52b\")),\n                                                     \n                                                     box(title = \"Top 5 Video Memes:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"show_vars2b\", strong(\"Variables\"), names(DataVideos),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\", \"post_video_views\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"Table3b\"))\n                                                     \n                                            ),\n                                            \n                                            # 3.1.4. Memes ----------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Memes\",\n                                                     \n                                                     box(title = \"Top 10 Memes: Photo Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"meme_select_original_repost_top\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"meme_select_sort_by_top\", label = \"Sort By:\", choices = c(\"Interactions\", \"Reach\"), selected = \"Reach\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"meme_select_plot_variable_top\", label = \"Plot Variable:\", choices = c(\"Interactions\", \"Reach\"), selected = \"Reach\")),\n                                                         \n                                                         column(4, actionButton(inputId = \"meme_prev_ten_top\", label = \"Previous 10\", width = \"100%\", style = \"height:40px\")),\n                                                         # , icon = icon(\"fa fa-chevron-left\")\n                                                         \n                                                         column(4, highchartOutput(\"Plot7_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"meme_next_ten_top\", label = \" Next 10\", width = \"100%\", style = \"height:40px\")),\n                                                         # , icon = icon(\"fa fa-chevron-right\")\n                                                         column(12, highchartOutput(\"Plot7\", height = 450))),\n                                                     \n                                                     box(title = \"Top 10 Memes: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7,highchartOutput(\"Plot71\")),\n                                                         column(5,highchartOutput(\"Plot72\"))),\n                                                     \n                                                     box(title = \"Top 10 Memes:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"show_vars3\", strong(\"Variables\"), names(DataPhotos),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"Table5\"))\n                                                     \n                                            ))),\n                                 \n                                 # 3.2. Top Posts - Bad Hombres ---------------------------------------------------------------------------\n                                 \n                                 tabPanel(\"Bad Hombres\",\n                                          \n                                          tabsetPanel(\n                                            \n                                            # 3.2.1. Articles ------------------------------------------------------------------------\n                                            tabPanel(\"Articles\",\n                                                     \n                                                     box(title = \"Top 10 Link Clicks\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"bh_article_select_original_repost_top\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_article_select_sort_by_top\", label = \"Sort By:\", choices = c(\"Link Clicks\", \"Interactions\", \"Reach\"), selected = \"Link Clicks\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_article_select_plot_variable_top\", label = \"Plot Variable:\", choices = c(\"Link Clicks\", \"Interactions\", \"Reach\"), selected = \"Link Clicks\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"bh_article_select_categories_top\", label = \"Categories:\", choices = as.character(unique(DataArticlesBH$category)[order(unique(DataArticlesBH$category))]), selected = as.character(unique(DataArticlesBH$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_article_prev_ten_top\", label = \"Previous 10\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"BH_Plot1_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_article_next_ten_top\", label = \" Next 10\", width = \"100%\", style = \"height:40px\")),\n                                                         column(12, highchartOutput(\"BH_Plot1\", height = 450))),\n                                                     \n                                                     box(title = \"Top 10 IR & CTR\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"BH_Plot2\")),\n                                                     \n                                                     box(title = \"Top 10 Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7,highchartOutput(\"BH_Plot21\")),\n                                                         column(5,highchartOutput(\"BH_Plot22\"))),\n                                                     \n                                                     box(title = \"Top 10 Articles:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"bh_show_vars1\", strong(\"Variables\"), names(DataArticlesBH),selected = c(\"headline\",\"date\",\"post_reach\",\"interaction_rate\",\"link_clicks\",\"ctr\", \"times_repost\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"BH_Table1\"))\n                                            ),\n                                            \n                                            # 3.2.2. Videos ------------------------------------------------------------------------\n                                            tabPanel(\"Videos\",\n                                                     \n                                                     box(title = \"Top 5 Videos: Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"bh_video_select_original_repost_top\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_video_select_sort_by_top\", label = \"Sort By:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_video_select_plot_variable_top\", label = \"Plot Variable:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"bh_video_select_categories_top\", label = \"Categories:\", choices = as.character(unique(DataVideosBH$category)[order(unique(DataVideosBH$category))]), selected = as.character(unique(DataVideosBH$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_video_prev_ten_top\", label = \"Previous 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"BH_Plot5_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_video_next_ten_top\", label = \" Next 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(12, highchartOutput(\"BH_Plot5\", height = 450))),\n                                                     \n                                                     box(title = \"Top 5 Videos: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7, highchartOutput(\"BH_Plot53\")),\n                                                         column(5, highchartOutput(\"BH_Plot54\"))),\n                                                     \n                                                     box(title = \"Top 5 Videos: % Viewed\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"BH_Plot52\")),\n                                                     \n                                                     box(title = \"Top 5 Videos:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"bh_show_vars2\", strong(\"Variables\"), names(DataVideosBH),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\", \"post_video_views\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"BH_Table3\"))\n                                            ),\n                                            \n                                            # 3.2.3. Video Memes ------------------------------------------------------------------------\n                                            tabPanel(\"Video Memes\",\n                                                     \n                                                     box(title = \"Top 5 Video Memes: Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"bh_video_meme_select_original_repost_top\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_video_meme_select_sort_by_top\", label = \"Sort By:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_video_meme_select_plot_variable_top\", label = \"Plot Variable:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"bh_video_meme_select_categories_top\", label = \"Categories:\", choices = as.character(unique(DataVideosBH$category)[order(unique(DataVideosBH$category))]), selected = as.character(unique(DataVideosBH$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_video_meme_prev_ten_top\", label = \"Previous 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"BH_Plot5b_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_video_meme_next_ten_top\", label = \" Next 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(12, highchartOutput(\"BH_Plot5b\", height = 450))),\n                                                     \n                                                     box(title = \"Top 5 Video Memes: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7, highchartOutput(\"BH_Plot53b\")),\n                                                         column(5, highchartOutput(\"BH_Plot54b\"))),\n                                                     \n                                                     box(title = \"Top 5 Video Memes: % Viewed\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"BH_Plot52b\")),\n                                                     \n                                                     box(title = \"Top 5 Video Memes:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"bh_show_vars2b\", strong(\"Variables\"), names(DataVideosBH),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\", \"post_video_views\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"BH_Table3b\"))\n                                            ),\n                                            \n                                            # 3.2.4. Memes ------------------------------------------------------------------------\n                                            tabPanel(\"Memes\",\n                                                     \n                                                     box(title = \"Top 10 Memes: Photo Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"bh_meme_select_original_repost_top\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_meme_select_sort_by_top\", label = \"Sort By:\", choices = c(\"Interactions\", \"Reach\"), selected = \"Reach\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_meme_select_plot_variable_top\", label = \"Plot Variable:\", choices = c(\"Interactions\", \"Reach\"), selected = \"Reach\")),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_meme_prev_ten_top\", label = \"Previous 10\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"BH_Plot7_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_meme_next_ten_top\", label = \" Next 10\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(12, highchartOutput(\"BH_Plot7\", height = 450))),\n                                                     \n                                                     box(title = \"Top 10 Memes: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7,highchartOutput(\"BH_Plot71\")),\n                                                         column(5,highchartOutput(\"BH_Plot72\"))),\n                                                     \n                                                     box(title = \"Top 10 Memes:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"bh_show_vars3\", strong(\"Variables\"), names(DataPhotosBH),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"BH_Table5\"))\n                                            ))),\n                                 \n                                 # 3.3. Top Posts - Fierce ---------------------------------------------------------------------------\n                                 \n                                 tabPanel(\"Fierce\",\n                                          \n                                          tabsetPanel(\n                                            \n                                            # 3.3.1. Articles ------------------------------------------------------------------------\n                                            tabPanel(\"Articles\",\n                                                     \n                                                     box(title = \"Top 10 Link Clicks\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"fc_article_select_original_repost_top\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_article_select_sort_by_top\", label = \"Sort By:\", choices = c(\"Link Clicks\", \"Interactions\", \"Reach\"), selected = \"Link Clicks\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_article_select_plot_variable_top\", label = \"Plot Variable:\", choices = c(\"Link Clicks\", \"Interactions\", \"Reach\"), selected = \"Link Clicks\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"fc_article_select_categories_top\", label = \"Categories:\", choices = as.character(unique(DataArticlesFC$category)[order(unique(DataArticlesFC$category))]), selected = as.character(unique(DataArticlesFC$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_article_prev_ten_top\", label = \"Previous 10\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"FC_Plot1_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_article_next_ten_top\", label = \" Next 10\", width = \"100%\", style = \"height:40px\")),\n                                                         column(12, highchartOutput(\"FC_Plot1\", height = 450))),\n                                                     \n                                                     box(title = \"Top 10 IR & CTR\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"FC_Plot2\")),\n                                                     \n                                                     box(title = \"Top 10 Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7,highchartOutput(\"FC_Plot21\")),\n                                                         column(5,highchartOutput(\"FC_Plot22\"))),\n                                                     \n                                                     box(title = \"Top 10 Articles:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"fc_show_vars1\", strong(\"Variables\"), names(DataArticlesFC),selected = c(\"headline\",\"date\",\"post_reach\",\"interaction_rate\",\"link_clicks\",\"ctr\", \"times_repost\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"FC_Table1\"))\n                                            ),\n                                            \n                                            # 3.3.2. Videos ------------------------------------------------------------------------\n                                            tabPanel(\"Videos\",\n                                                     \n                                                     box(title = \"Top 5 Videos: Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"fc_video_select_original_repost_top\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_video_select_sort_by_top\", label = \"Sort By:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_video_select_plot_variable_top\", label = \"Plot Variable:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"fc_video_select_categories_top\", label = \"Categories:\", choices = as.character(unique(DataVideosFC$category)[order(unique(DataVideosFC$category))]), selected = as.character(unique(DataVideosFC$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_video_prev_ten_top\", label = \"Previous 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"FC_Plot5_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_video_next_ten_top\", label = \" Next 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(12, highchartOutput(\"FC_Plot5\", height = 450))),\n                                                     \n                                                     box(title = \"Top 5 Videos: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7, highchartOutput(\"FC_Plot53\")),\n                                                         column(5, highchartOutput(\"FC_Plot54\"))),\n                                                     \n                                                     box(title = \"Top 5 Videos: % Viewed\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"FC_Plot52\")),\n                                                     \n                                                     box(title = \"Top 5 Videos:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"fc_show_vars2\", strong(\"Variables\"), names(DataVideosFC),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\", \"post_video_views\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"FC_Table3\"))\n                                            ),\n                                            \n                                            # 3.3.3. Video Memes ------------------------------------------------------------------------\n                                            tabPanel(\"Video Memes\",\n                                                     \n                                                     box(title = \"Top 5 Video Memes: Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"fc_video_meme_select_original_repost_top\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_video_meme_select_sort_by_top\", label = \"Sort By:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_video_meme_select_plot_variable_top\", label = \"Plot Variable:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"fc_video_meme_select_categories_top\", label = \"Categories:\", choices = as.character(unique(DataVideosFC$category)[order(unique(DataVideosFC$category))]), selected = as.character(unique(DataVideosFC$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_video_meme_prev_ten_top\", label = \"Previous 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"FC_Plot5b_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_video_meme_next_ten_top\", label = \" Next 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(12, highchartOutput(\"FC_Plot5b\", height = 450))),\n                                                     \n                                                     box(title = \"Top 5 Video Memes: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7, highchartOutput(\"FC_Plot53b\")),\n                                                         column(5, highchartOutput(\"FC_Plot54b\"))),\n                                                     \n                                                     box(title = \"Top 5 Video Memes: % Viewed\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"FC_Plot52b\")),\n                                                     \n                                                     box(title = \"Top 5 Video Memes:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"fc_show_vars2b\", strong(\"Variables\"), names(DataVideosFC),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\", \"post_video_views\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"FC_Table3b\"))\n                                            ),\n                                            \n                                            # 3.3.4. Memes ------------------------------------------------------------------------\n                                            tabPanel(\"Memes\",\n                                                     \n                                                     box(title = \"Top 10 Memes: Photo Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"fc_meme_select_original_repost_top\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_meme_select_sort_by_top\", label = \"Sort By:\", choices = c(\"Interactions\", \"Reach\"), selected = \"Reach\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_meme_select_plot_variable_top\", label = \"Plot Variable:\", choices = c(\"Interactions\", \"Reach\"), selected = \"Reach\")),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_meme_prev_ten_top\", label = \"Previous 10\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"FC_Plot7_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_meme_next_ten_top\", label = \" Next 10\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(12, highchartOutput(\"FC_Plot7\", height = 450))),\n                                                     \n                                                     box(title = \"Top 10 Memes: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7,highchartOutput(\"FC_Plot71\")),\n                                                         column(5,highchartOutput(\"FC_Plot72\"))),\n                                                     \n                                                     box(title = \"Top 10 Memes:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"fc_show_vars3\", strong(\"Variables\"), names(DataPhotosFC),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"FC_Table5\"))\n                                            )))\n                                 \n                                 , width = 12))\n                          \n                        ),\n                        \n\n                        # 4. Bottom Posts -----------------------------------------------------------------------------------------\n                        \n                        tabItem(tabName = \"bottomposts\", fluidRow(\n                          \n                          tabBox(title = \"\",\n                                 \n                                 # 4.1. Bottom Posts - We Are MitÃº ----------------------------------------------------------------\n                                 \n                                 tabPanel(\"We Are MitÃº\",\n                                          \n                                          tabsetPanel(\n                                            \n                                            # 4.1.1. Articles ----------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Articles\",\n                                                     \n                                                     box(title = \"Bottom 10 Link Clicks\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12, \n                                                         column(4, selectizeInput(inputId = \"article_select_original_repost_bottom\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"article_select_sort_by_bottom\", label = \"Sort By:\", choices = c(\"Link Clicks\", \"Interactions\", \"Reach\"), selected = \"Link Clicks\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"article_select_plot_variable_bottom\", label = \"Plot Variable:\", choices = c(\"Link Clicks\", \"Interactions\", \"Reach\"), selected = \"Link Clicks\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"article_select_categories_bottom\", label = \"Categories:\", choices = as.character(unique(DataArticles$category)[order(unique(DataArticles$category))]), selected = as.character(unique(DataArticles$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"article_prev_ten_bottom\", label = \"Previous 10\", width = \"100%\", style = \"height:40px\")),\n                                                         # , icon = icon(\"fa fa-chevron-left\")\n                                                         \n                                                         column(4, highchartOutput(\"Plot3_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"article_next_ten_bottom\", label = \" Next 10\", width = \"100%\", style = \"height:40px\")),\n                                                         # , icon = icon(\"fa fa-chevron-right\")\n                                                         column(12, highchartOutput(\"Plot3\", height = 450))),\n                                                     \n                                                     box(title = \"Bottom 10 IR & CTR\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"Plot4\")),\n                                                     \n                                                     box(title = \"Bottom 10 Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7,highchartOutput(\"Plot41\")),\n                                                         column(5,highchartOutput(\"Plot42\"))),\n                                                     \n                                                     box(title = \"Bottom 10 Articles:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"show_vars4\", strong(\"Variables\"), names(DataArticles),selected = c(\"headline\",\"date\",\"post_reach\",\"interaction_rate\",\"link_clicks\",\"ctr\", \"times_repost\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"Table2\"))\n                                                     \n                                            ),\n                                            \n                                            # 4.1.2. Videos ------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Videos\",\n                                                     \n                                                     box(title = \"Bottom 5 Videos: Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"video_select_original_repost_bottom\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"video_select_sort_by_bottom\", label = \"Sort By:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"video_select_plot_variable_bottom\", label = \"Plot Variable:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"video_select_categories_bottom\", label = \"Categories:\", choices = as.character(unique(DataVideos$category)[order(unique(DataVideos$category))]), selected = as.character(unique(DataVideos$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"video_prev_ten_bottom\", label = \"Previous 5\", width = \"100%\", style = \"height:40px\")),\n                                                         # , icon = icon(\"fa fa-chevron-left\")\n                                                         \n                                                         column(4, highchartOutput(\"Plot6_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"video_next_ten_bottom\", label = \" Next 5\", width = \"100%\", style = \"height:40px\")),\n                                                         # , icon = icon(\"fa fa-chevron-right\")\n                                                         column(12, highchartOutput(\"Plot6\", height = 450))),\n                                                     \n                                                     box(title = \"Bottom 5 Videos: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7, highchartOutput(\"Plot63\")),\n                                                         column(5, highchartOutput(\"Plot64\"))),\n                                                     \n                                                     box(title = \"Bottom 5 Videos: % Viewed\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"Plot62\")),\n                                                     \n                                                     box(title = \"Bottom 5 Videos:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"show_vars5\", strong(\"Variables\"), names(DataVideos),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\", \"post_video_views\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"Table4\"))\n                                                     \n                                            ),\n                                            \n                                            # 4.1.3. Video Memes -------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Video Memes\",\n                                                     \n                                                     box(title = \"Bottom 5 Video Memes: Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"video_meme_select_original_repost_bottom\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"video_meme_select_sort_by_bottom\", label = \"Sort By:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"video_meme_select_plot_variable_bottom\", label = \"Plot Variable:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"video_meme_select_categories_bottom\", label = \"Categories:\", choices = as.character(unique(DataVideos$category)[order(unique(DataVideos$category))]), selected = as.character(unique(DataVideos$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"video_meme_prev_ten_bottom\", label = \"Previous 5\", width = \"100%\", style = \"height:40px\")),\n                                                         # , icon = icon(\"fa fa-chevron-left\")\n                                                         \n                                                         column(4, highchartOutput(\"Plot6b_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"video_meme_next_ten_bottom\", label = \" Next 5\", width = \"100%\", style = \"height:40px\")),\n                                                         # , icon = icon(\"fa fa-chevron-right\")\n                                                         column(12, highchartOutput(\"Plot6b\", height = 450))),\n                                                     \n                                                     box(title = \"Bottom 5 Video Memes: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7, highchartOutput(\"Plot63b\")),\n                                                         column(5, highchartOutput(\"Plot64b\"))),\n                                                     \n                                                     box(title = \"Bottom 5 Video Memes: % Viewed\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"Plot62b\")),\n                                                     \n                                                     box(title = \"Bottom 5 Video Memes:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"show_vars5b\", strong(\"Variables\"), names(DataVideos),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\", \"post_video_views\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"Table4b\"))\n                                                     \n                                            ),\n                                            \n                                            # 4.1.4. Memes -------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Memes\",\n                                                     \n                                                     box(title = \"Bottom 10 Memes: Photo Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"meme_select_original_repost_bottom\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"meme_select_sort_by_bottom\", label = \"Sort By:\", choices = c(\"Interactions\", \"Reach\"), selected = \"Reach\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"meme_select_plot_variable_bottom\", label = \"Plot Variable:\", choices = c(\"Interactions\", \"Reach\"), selected = \"Reach\")),\n                                                         \n                                                         column(4, actionButton(inputId = \"meme_prev_ten_bottom\", label = \"Previous 10\", width = \"100%\", style = \"height:40px\")),\n                                                         # , icon = icon(\"fa fa-chevron-left\")\n                                                         \n                                                         column(4, highchartOutput(\"Plot8_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"meme_next_ten_bottom\", label = \" Next 10\", width = \"100%\", style = \"height:40px\")),\n                                                         # , icon = icon(\"fa fa-chevron-right\")\n                                                         column(12, highchartOutput(\"Plot8\", height = 450))),\n                                                     \n                                                     box(title = \"Bottom 10 Memes: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7,highchartOutput(\"Plot81\")),\n                                                         column(5,highchartOutput(\"Plot82\"))),\n                                                     \n                                                     box(title = \"Bottom 10 Memes:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"show_vars6\", strong(\"Variables\"), names(DataPhotos),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"Table6\"))\n                                                     \n                                            ))),\n                                 \n                                 # 4.2. Bottom Posts - Bad Hombres ---------------------------------------------------------------------------\n                                 \n                                 tabPanel(\"Bad Hombres\",\n                                          \n                                          tabsetPanel(\n                                            \n                                            # 4.2.1. Articles ------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Articles\",\n                                                     \n                                                     box(title = \"Bottom 10 Link Clicks\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12, \n                                                         column(4, selectizeInput(inputId = \"bh_article_select_original_repost_bottom\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_article_select_sort_by_bottom\", label = \"Sort By:\", choices = c(\"Link Clicks\", \"Interactions\", \"Reach\"), selected = \"Link Clicks\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_article_select_plot_variable_bottom\", label = \"Plot Variable:\", choices = c(\"Link Clicks\", \"Interactions\", \"Reach\"), selected = \"Link Clicks\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"bh_article_select_categories_bottom\", label = \"Categories:\", choices = as.character(unique(DataArticlesBH$category)[order(unique(DataArticlesBH$category))]), selected = as.character(unique(DataArticlesBH$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_article_prev_ten_bottom\", label = \"Previous 10\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"BH_Plot3_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_article_next_ten_bottom\", label = \" Next 10\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(12, highchartOutput(\"BH_Plot3\", height = 450))),\n                                                     \n                                                     box(title = \"Bottom 10 IR & CTR\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"BH_Plot4\")),\n                                                     \n                                                     box(title = \"Bottom 10 Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7,highchartOutput(\"BH_Plot41\")),\n                                                         column(5,highchartOutput(\"BH_Plot42\"))),\n                                                     \n                                                     box(title = \"Bottom 10 Articles:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"bh_show_vars4\", strong(\"Variables\"), names(DataArticlesBH),selected = c(\"headline\",\"date\",\"post_reach\",\"interaction_rate\",\"link_clicks\",\"ctr\", \"times_repost\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"BH_Table2\"))\n                                                     \n                                            ),\n                                            \n                                            # 4.2.2. Videos ------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Videos\",\n                                                     \n                                                     box(title = \"Bottom 5 Videos: Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"bh_video_select_original_repost_bottom\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_video_select_sort_by_bottom\", label = \"Sort By:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_video_select_plot_variable_bottom\", label = \"Plot Variable:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"bh_video_select_categories_bottom\", label = \"Categories:\", choices = as.character(unique(DataVideosBH$category)[order(unique(DataVideosBH$category))]), selected = as.character(unique(DataVideosBH$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_video_prev_ten_bottom\", label = \"Previous 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"BH_Plot6_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_video_next_ten_bottom\", label = \" Next 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(12, highchartOutput(\"BH_Plot6\", height = 450))),\n                                                     \n                                                     box(title = \"Bottom 5 Videos: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7, highchartOutput(\"BH_Plot63\")),\n                                                         column(5, highchartOutput(\"BH_Plot64\"))),\n                                                     \n                                                     box(title = \"Bottom 5 Videos: % Viewed\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"BH_Plot62\")),\n                                                     \n                                                     box(title = \"Bottom 5 Videos:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"bh_show_vars5\", strong(\"Variables\"), names(DataVideosBH),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\", \"post_video_views\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"BH_Table4\"))\n                                                     \n                                            ),\n                                            \n                                            # 4.2.3. Video Memes ------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Video Memes\",\n                                                     \n                                                     box(title = \"Bottom 5 Video Memes: Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"bh_video_meme_select_original_repost_bottom\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_video_meme_select_sort_by_bottom\", label = \"Sort By:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_video_meme_select_plot_variable_bottom\", label = \"Plot Variable:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"bh_video_meme_select_categories_bottom\", label = \"Categories:\", choices = as.character(unique(DataVideosBH$category)[order(unique(DataVideosBH$category))]), selected = as.character(unique(DataVideosBH$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_video_meme_prev_ten_bottom\", label = \"Previous 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"BH_Plot6b_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_video_meme_next_ten_bottom\", label = \" Next 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(12, highchartOutput(\"BH_Plot6b\", height = 450))),\n                                                     \n                                                     box(title = \"Bottom 5 Video Memes: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7, highchartOutput(\"BH_Plot63b\")),\n                                                         column(5, highchartOutput(\"BH_Plot64b\"))),\n                                                     \n                                                     box(title = \"Bottom 5 Video Memes: % Viewed\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"BH_Plot62b\")),\n                                                     \n                                                     box(title = \"Bottom 5 Video Memes:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"bh_show_vars5b\", strong(\"Variables\"), names(DataVideosBH),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\", \"post_video_views\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"BH_Table4b\"))\n                                                     \n                                            ),\n                                            \n                                            # 4.2.4. Memes ------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Memes\",\n                                                     \n                                                     box(title = \"Bottom 10 Memes: Photo Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"bh_meme_select_original_repost_bottom\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_meme_select_sort_by_bottom\", label = \"Sort By:\", choices = c(\"Interactions\", \"Reach\"), selected = \"Reach\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_meme_select_plot_variable_bottom\", label = \"Plot Variable:\", choices = c(\"Interactions\", \"Reach\"), selected = \"Reach\")),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_meme_prev_ten_bottom\", label = \"Previous 10\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"BH_Plot8_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"bh_meme_next_ten_bottom\", label = \" Next 10\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(12, highchartOutput(\"BH_Plot8\", height = 450))),\n                                                     \n                                                     box(title = \"Bottom 10 Memes: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7,highchartOutput(\"BH_Plot81\")),\n                                                         column(5,highchartOutput(\"BH_Plot82\"))),\n                                                     \n                                                     box(title = \"Bottom 10 Memes:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"bh_show_vars6\", strong(\"Variables\"), names(DataPhotosBH),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"BH_Table6\"))\n                                                     \n                                            ))),\n                                 \n                                 # 4.2. Bottom Posts - Fierce ---------------------------------------------------------------------------\n                                 \n                                 tabPanel(\"Fierce\",\n                                          \n                                          tabsetPanel(\n                                            \n                                            # 4.2.1. Articles ------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Articles\",\n                                                     \n                                                     box(title = \"Bottom 10 Link Clicks\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12, \n                                                         column(4, selectizeInput(inputId = \"fc_article_select_original_repost_bottom\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_article_select_sort_by_bottom\", label = \"Sort By:\", choices = c(\"Link Clicks\", \"Interactions\", \"Reach\"), selected = \"Link Clicks\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_article_select_plot_variable_bottom\", label = \"Plot Variable:\", choices = c(\"Link Clicks\", \"Interactions\", \"Reach\"), selected = \"Link Clicks\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"fc_article_select_categories_bottom\", label = \"Categories:\", choices = as.character(unique(DataArticlesFC$category)[order(unique(DataArticlesFC$category))]), selected = as.character(unique(DataArticlesFC$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_article_prev_ten_bottom\", label = \"Previous 10\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"FC_Plot3_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_article_next_ten_bottom\", label = \" Next 10\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(12, highchartOutput(\"FC_Plot3\", height = 450))),\n                                                     \n                                                     box(title = \"Bottom 10 IR & CTR\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"FC_Plot4\")),\n                                                     \n                                                     box(title = \"Bottom 10 Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7,highchartOutput(\"FC_Plot41\")),\n                                                         column(5,highchartOutput(\"FC_Plot42\"))),\n                                                     \n                                                     box(title = \"Bottom 10 Articles:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"fc_show_vars4\", strong(\"Variables\"), names(DataArticlesFC),selected = c(\"headline\",\"date\",\"post_reach\",\"interaction_rate\",\"link_clicks\",\"ctr\", \"times_repost\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"FC_Table2\"))\n                                                     \n                                            ),\n                                            \n                                            # 4.2.2. Videos ------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Videos\",\n                                                     \n                                                     box(title = \"Bottom 5 Videos: Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"fc_video_select_original_repost_bottom\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_video_select_sort_by_bottom\", label = \"Sort By:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_video_select_plot_variable_bottom\", label = \"Plot Variable:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"fc_video_select_categories_bottom\", label = \"Categories:\", choices = as.character(unique(DataVideosFC$category)[order(unique(DataVideosFC$category))]), selected = as.character(unique(DataVideosFC$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_video_prev_ten_bottom\", label = \"Previous 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"FC_Plot6_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_video_next_ten_bottom\", label = \" Next 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(12, highchartOutput(\"FC_Plot6\", height = 450))),\n                                                     \n                                                     box(title = \"Bottom 5 Videos: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7, highchartOutput(\"FC_Plot63\")),\n                                                         column(5, highchartOutput(\"FC_Plot64\"))),\n                                                     \n                                                     box(title = \"Bottom 5 Videos: % Viewed\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"FC_Plot62\")),\n                                                     \n                                                     box(title = \"Bottom 5 Videos:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"fc_show_vars5\", strong(\"Variables\"), names(DataVideosFC),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\", \"post_video_views\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"FC_Table4\"))\n                                                     \n                                            ),\n                                            \n                                            # 4.2.3. Video Memes ------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Video Memes\",\n                                                     \n                                                     box(title = \"Bottom 5 Video Memes: Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"fc_video_meme_select_original_repost_bottom\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_video_meme_select_sort_by_bottom\", label = \"Sort By:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_video_meme_select_plot_variable_bottom\", label = \"Plot Variable:\", choices = c(\"Video Views\", \"Interactions\", \"Reach\"), selected = \"Video Views\")),\n                                                         \n                                                         column(12, selectizeInput(inputId = \"fc_video_meme_select_categories_bottom\", label = \"Categories:\", choices = as.character(unique(DataVideosFC$category)[order(unique(DataVideosFC$category))]), selected = as.character(unique(DataVideosFC$category)), multiple = TRUE)),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_video_meme_prev_ten_bottom\", label = \"Previous 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"FC_Plot6b_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_video_meme_next_ten_bottom\", label = \" Next 5\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(12, highchartOutput(\"FC_Plot6b\", height = 450))),\n                                                     \n                                                     box(title = \"Bottom 5 Video Memes: % Viewed\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         highchartOutput(\"FC_Plot62b\")),\n                                                     \n                                                     box(title = \"Bottom 5 Video Memes: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7, highchartOutput(\"FC_Plot63b\")),\n                                                         column(5, highchartOutput(\"FC_Plot64b\"))),\n                                                     \n                                                     box(title = \"Bottom 5 Video Memes:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"fc_show_vars5b\", strong(\"Variables\"), names(DataVideosFC),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\", \"post_video_views\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"FC_Table4b\"))\n                                                     \n                                            ),\n                                            \n                                            # 4.2.4. Memes ------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Memes\",\n                                                     \n                                                     box(title = \"Bottom 10 Memes: Photo Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(4, selectizeInput(inputId = \"fc_meme_select_original_repost_bottom\", label = \"Reposts:\", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_meme_select_sort_by_bottom\", label = \"Sort By:\", choices = c(\"Interactions\", \"Reach\"), selected = \"Reach\")),\n                                                         \n                                                         column(4, selectizeInput(inputId = \"fc_meme_select_plot_variable_bottom\", label = \"Plot Variable:\", choices = c(\"Interactions\", \"Reach\"), selected = \"Reach\")),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_meme_prev_ten_bottom\", label = \"Previous 10\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(4, highchartOutput(\"FC_Plot8_Title\", height = 50)),\n                                                         \n                                                         column(4, actionButton(inputId = \"fc_meme_next_ten_bottom\", label = \" Next 10\", width = \"100%\", style = \"height:40px\")),\n                                                         \n                                                         column(12, highchartOutput(\"FC_Plot8\", height = 450))),\n                                                     \n                                                     box(title = \"Bottom 10 Memes: Reaction Rates & Fan Vs. Viral\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         column(7,highchartOutput(\"FC_Plot81\")),\n                                                         column(5,highchartOutput(\"FC_Plot82\"))),\n                                                     \n                                                     box(title = \"Bottom 10 Memes:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                         selectizeInput(\"fc_show_vars6\", strong(\"Variables\"), names(DataPhotosFC),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\"), multiple = TRUE ),\n                                                         DT::dataTableOutput(\"FC_Table6\"))\n                                                     \n                                            )))\n                               \n                                 , width = 12))\n                        ),\n                        \n                        # 5. Authors Performance ----------------------------------------------------------------------------------\n                        \n                        tabItem(tabName = \"authors\", fluidRow(\n                          \n                          box(title = \"Last Week's Visitors by Author\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                              highchartOutput(\"PlotAuthors1\")),\n                          \n                          box(title = \"Last Month's Visitors by Author\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                              highchartOutput(\"PlotAuthors2\")),\n                          \n                          valueBox(\"Parse.ly\", \"click for More Info\" , icon = icon(\"fa fa-eye\"), color = \"light-blue\" , width = 12, href = \"https://dash.parsely.com/wearemitu.com/authors/?minutes=today&metric=visitors\")\n                          \n                        )),\n                        \n                        # 6. Content Categories -----------------------------------------------------------------------------------\n                        \n                        tabItem(tabName = \"categories\", fluidRow(\n                          \n                          tabBox(title = \"\",\n                                 \n                                 # 6.1. Content Categories - We Are MitÃº --------------------------------------------------------------\n                                 \n                                 tabPanel(\"We Are MitÃº\",\n                                          \n                                          tabsetPanel(\n                                            \n                                            # 6.1.1. Articles ------------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Articles\",\n                                                     \n                                                     #  6.1.1.1. Top 5 Days ------------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Top 5 Days by Category\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"PlotCategories4\")),\n                                                     \n                                                     #  6.1.1.2. Category Pie --------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Category Distribution\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"PlotCategories1\")),\n                                                     \n                                                     #  6.1.1.3. Avg. Reach & Link Clicks --------------------------------------------------------\n                                                     \n                                                     box(title = \"Avg. Reach & Link Clicks\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"PlotCategories2\")),\n                                                     \n                                                     #  6.1.1.4. Avg. CTR & IR -------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Avg. CTR & IR\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"PlotCategories3\")),\n                                                     \n                                                     #  6.1.1.5. Overview ------------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Link Clicks\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, collapsed = TRUE, width = 12,\n                                                         \n                                                         column(4, selectizeInput(inputId = \"category_buttons\", label = \"Categories:\", choices = as.character(unique(DataArticles$category)[order(unique(DataArticles$category))]), selected = as.character(unique(DataArticles$category)), multiple = TRUE)),\n                                                         \n                                                         column(2,selectizeInput(inputId = \"chart_type\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(2, selectizeInput(inputId = \"chart_avg_total\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"chart_time\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(2, selectizeInput(inputId = \"chart_stack\", label = \"Stacked:\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         \n                                                         column(width = 8, offset = 4,actionButton(inputId = \"plot_categories\", label = \"Plot\", width = \"100%\")),\n                                                         \n                                                         column(12, highchartOutput(\"PlotCategoriesOverview1\", height = 450))),\n                                                     \n                                                     \n                                                     box(title = \"Reach\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, collapsed = TRUE, width = 12,\n                                                         \n                                                         column(4, selectizeInput(inputId = \"category_buttons2\", label = \"Categories:\", choices = as.character(unique(DataArticles$category)[order(unique(DataArticles$category))]), selected = as.character(unique(DataArticles$category)), multiple = TRUE)),\n                                                         \n                                                         column(2,selectizeInput(inputId = \"chart_type2\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(2, selectizeInput(inputId = \"chart_avg_total2\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"chart_time2\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(2, selectizeInput(inputId = \"chart_stack2\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         \n                                                         column(width = 8, offset = 4,actionButton(inputId = \"plot_categories2\", label = \"Plot\", width = \"100%\")),\n                                                         \n                                                         column(12, highchartOutput(\"PlotCategoriesOverview2\", height = 450)))\n                                                     \n                                            ),\n                                            \n                                            # 6.1.2. Videos --------------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Videos\",\n                                                     \n                                                     #  6.1.2.1. Top 5 Days ------------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Top 5 Days by Category\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"PlotCategoriesVideo4\")),\n                                                     \n                                                     #  6.1.2.2. Category Pie --------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Category Distribution\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"PlotCategoriesVideo1\")),\n                                                     \n                                                     #  6.1.2.3. Avg. Reach & Video Views --------------------------------------------------------\n                                                     \n                                                     box(title = \"Avg. Reach & Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"PlotCategoriesVideo2\")),\n                                                     \n                                                     #  6.1.2.4. Avg. IR -------------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Avg. IR\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"PlotCategoriesVideo3\")),\n                                                     \n                                                     #  6.1.2.5. Overview ------------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, collapsed = TRUE, width = 12,\n                                                         \n                                                         column(4, selectizeInput(inputId = \"category_buttons_video\", label = \"Categories:\", choices = as.character(unique(DataVideos$category)[order(unique(DataVideos$category))]), selected = as.character(unique(DataVideos$category)), multiple = TRUE)),\n                                                         \n                                                         column(2,selectizeInput(inputId = \"chart_type_video\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(2, selectizeInput(inputId = \"chart_avg_total_video\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"chart_time_video\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(2, selectizeInput(inputId = \"chart_stack_video\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         \n                                                         column(width = 8, offset = 4, actionButton(inputId = \"plot_categories_video\", label = \"Plot\", width = \"100%\")),\n                                                         \n                                                         column(12, highchartOutput(\"PlotCategoriesVideoOverview1\", height = 450))),\n                                                     \n                                                     \n                                                     box(title = \"Reach\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, collapsed = TRUE, width = 12,\n                                                         \n                                                         column(4, selectizeInput(inputId = \"category_buttons_video2\", label = \"Categories:\", choices = as.character(unique(DataVideos$category)[order(unique(DataVideos$category))]), selected = as.character(unique(DataVideos$category)), multiple = TRUE)),\n                                                         \n                                                         column(2,selectizeInput(inputId = \"chart_type_video2\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(2, selectizeInput(inputId = \"chart_avg_total_video2\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"chart_time_video2\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(2, selectizeInput(inputId = \"chart_stack_video2\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         \n                                                         column(width = 8, offset = 4, actionButton(inputId = \"plot_categories_video2\", label = \"Plot\", width = \"100%\")),\n                                                         \n                                                         column(12, highchartOutput(\"PlotCategoriesVideoOverview2\", height = 450)))\n                                                     \n                                            ),\n                                            \n                                            # 6.1.3. Video Memes ---------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Video Memes\",\n                                                     \n                                                     #  6.1.3.1. Top 5 Days ------------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Top 5 Days by Category\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"PlotCategoriesVideoMeme4\")),\n                                                     \n                                                     #  6.1.3.2. Category Pie --------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Category Distribution\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"PlotCategoriesVideoMeme1\")),\n                                                     \n                                                     #  6.1.3.3. Avg. Reach & Video Views --------------------------------------------------------\n                                                     \n                                                     box(title = \"Avg. Reach & Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"PlotCategoriesVideoMeme2\")),\n                                                     \n                                                     #  6.1.3.4. Avg. IR -------------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Avg. IR\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"PlotCategoriesVideoMeme3\")),\n                                                     \n                                                     #  6.1.3.5. Overview ------------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, collapsed = TRUE, width = 12,\n                                                         \n                                                         column(4, selectizeInput(inputId = \"category_buttons_video_meme\", label = \"Categories:\", choices = as.character(unique(DataVideos$category)[order(unique(DataVideos$category))]), selected = as.character(unique(DataVideos$category)), multiple = TRUE)),\n                                                         \n                                                         column(2,selectizeInput(inputId = \"chart_type_video_meme\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(2, selectizeInput(inputId = \"chart_avg_total_video_meme\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"chart_time_video_meme\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(2, selectizeInput(inputId = \"chart_stack_video_meme\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         \n                                                         column(width = 8, offset = 4, actionButton(inputId = \"plot_categories_video_meme\", label = \"Plot\", width = \"100%\")),\n                                                         \n                                                         column(12, highchartOutput(\"PlotCategoriesVideoMemeOverview1\", height = 450))),\n                                                     \n                                                     \n                                                     box(title = \"Reach\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, collapsed = TRUE, width = 12,\n                                                         \n                                                         column(4, selectizeInput(inputId = \"category_buttons_video_meme2\", label = \"Categories:\", choices = as.character(unique(DataVideos$category)[order(unique(DataVideos$category))]), selected = as.character(unique(DataVideos$category)), multiple = TRUE)),\n                                                         \n                                                         column(2,selectizeInput(inputId = \"chart_type_video_meme2\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(2, selectizeInput(inputId = \"chart_avg_total_video_meme2\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"chart_time_video_meme2\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(2, selectizeInput(inputId = \"chart_stack_video_meme2\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         \n                                                         column(width = 8, offset = 4, actionButton(inputId = \"plot_categories_video_meme2\", label = \"Plot\", width = \"100%\")),\n                                                         \n                                                         column(12, highchartOutput(\"PlotCategoriesVideoMemeOverview2\", height = 450)))\n                                                     \n                                            )\n                                            \n                                          )),\n                                 \n                                 # 6.2. Content Categories - Bad Hombres -------------------------------------------------------------------------\n                                 \n                                 tabPanel(\"Bad Hombres (WIP*)\",\n                                          \n                                          tabsetPanel(\n                                            \n                                            # 6.2.1. Articles -----------------------------------------------------------------------------------\n                                            \n                                            tabPanel(\"Articles\",\n                                                     \n                                                     #  6.2.1.1. Top 5 Days ------------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Top 5 Days by Category\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"BHPlotCategories4\")),\n                                                     \n                                                     #  6.2.1.2. Category Pie --------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Category Distribution\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"BHPlotCategories1\")),\n                                                     \n                                                     #  6.2.1.3. Avg. Reach & Link Clicks --------------------------------------------------------\n                                                     \n                                                     box(title = \"Avg. Reach & Link Clicks\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"BHPlotCategories2\")),\n                                                     \n                                                     #  6.2.1.4. Avg. CTR & IR -------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Avg. CTR & IR\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                         highchartOutput(\"BHPlotCategories3\")),\n                                                     \n                                                     #  6.2.1.5. Overview ------------------------------------------------------------------------\n                                                     \n                                                     box(title = \"Link Clicks\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, collapsed = TRUE, width = 12,\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_category_buttons\", label = \"Categories:\", choices = as.character(unique(DataArticlesBH$category)[order(unique(DataArticlesBH$category))]), selected = as.character(unique(DataArticlesBH$category)), multiple = TRUE)),\n                                                         \n                                                         column(2,selectizeInput(inputId = \"bh_chart_type\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(2, selectizeInput(inputId = \"bh_chart_avg_total\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"bh_chart_time\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(2, selectizeInput(inputId = \"bh_chart_stack\", label = \"Stacked:\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         \n                                                         column(width = 8, offset = 4,actionButton(inputId = \"bh_plot_categories\", label = \"Plot\", width = \"100%\")),\n                                                         \n                                                         column(12, highchartOutput(\"BHPlotCategoriesOverview1\", height = 450))),\n                                                     \n                                                     \n                                                     box(title = \"Reach\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, collapsed = TRUE, width = 12,\n                                                         \n                                                         column(4, selectizeInput(inputId = \"bh_category_buttons2\", label = \"Categories:\", choices = as.character(unique(DataArticlesBH$category)[order(unique(DataArticlesBH$category))]), selected = as.character(unique(DataArticlesBH$category)), multiple = TRUE)),\n                                                         \n                                                         column(2,selectizeInput(inputId = \"bh_chart_type2\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"column\")),\n                                                         column(2, selectizeInput(inputId = \"bh_chart_avg_total2\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                                         column(2, selectizeInput(inputId = \"bh_chart_time2\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                                         column(2, selectizeInput(inputId = \"bh_chart_stack2\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                                         \n                                                         column(width = 8, offset = 4,actionButton(inputId = \"bh_plot_categories2\", label = \"Plot\", width = \"100%\")),\n                                                         \n                                                         column(12, highchartOutput(\"BHPlotCategoriesOverview2\", height = 450)))\n                                                     \n                                            )\n                                            \n                                          )\n                                 )\n                                 \n                                 , width = 12))),\n                        \n                        #  7. Reposts ----------------------------------------------------------------------------------------------\n              \n                        tabItem(tabName = \"reposts\", fluidRow(\n                          \n                          tabBox(title = \"\",\n                                 \n                                 #  7.1 Articles -----------------------------------------------------------------------------------\n                                 \n                                 tabPanel(\"Articles\",\n                                          \n                                          box(title = \"Number of Posts\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              \n                                              column(3,selectizeInput(inputId = \"chart_type_repost_articles\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"area\")),\n                                              column(3, selectizeInput(inputId = \"chart_time_repost_articles\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                              column(3, selectizeInput(inputId = \"chart_stack_repost_articles\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                              column(3, actionButton(inputId = \"plot_repost_articles\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                              column(12, highchartOutput(\"PlotRepostsOverviewArticles1\", height = 450))),\n                                          \n                                          box(title = \"Reach\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              \n                                              column(2,selectizeInput(inputId = \"chart_type_repost_articles2\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"area\")),\n                                              column(2, selectizeInput(inputId = \"chart_avg_total_repost_articles2\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                              column(2, selectizeInput(inputId = \"chart_time_repost_articles2\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                              column(3, selectizeInput(inputId = \"chart_stack_repost_articles2\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                              column(3, actionButton(inputId = \"plot_repost_articles2\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                              column(12, highchartOutput(\"PlotRepostsOverviewArticles2\", height = 450))),\n                                          \n                                          box(title = \"Link Clicks\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              \n                                              column(2,selectizeInput(inputId = \"chart_type_repost_articles3\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"area\")),\n                                              column(2, selectizeInput(inputId = \"chart_avg_total_repost_articles3\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                              column(2, selectizeInput(inputId = \"chart_time_repost_articles3\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                              column(3, selectizeInput(inputId = \"chart_stack_repost_articles3\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                              column(3, actionButton(inputId = \"plot_repost_articles3\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                              column(12, highchartOutput(\"PlotRepostsOverviewArticles3\", height = 450))),\n                                          \n                                          box(title = \"Reposts:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              selectizeInput(\"show_vars_repost_articles1\", strong(\"Variables\"), names(DataArticles),selected = c(\"headline\",\"date\",\"post_reach\",\"interaction_rate\",\"link_clicks\",\"ctr\", \"times_repost\"), multiple = TRUE ),\n                                              DT::dataTableOutput(\"TableRepostsArticles1\")),\n                                          \n                                          conditionalPanel(\n                                            condition = \"input.TableRepostsArticles1_rows_selected != 0\",\n                                            box( title = \"Breakdown\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                 column(1,htmlOutput(\"picture_article\")),\n                                                 column(11,highchartOutput(\"TitleRepostSelectedArticles1\", height = 200)),\n                                                 column(4,highchartOutput(\"PlotRepostSelectedArticles1\")),\n                                                 column(4,highchartOutput(\"PlotRepostSelectedArticles2\")),\n                                                 column(4,highchartOutput(\"PlotRepostSelectedArticles3\")),\n                                                 column(12,\n                                                        selectizeInput(\"show_vars_repost_selected_articles1\", strong(\"Variables\"), names(DataArticles),selected = c(\"headline\",\"date\",\"post_reach\",\"interaction_rate\",\"link_clicks\",\"ctr\", \"times_repost\"), multiple = TRUE ),\n                                                        DT::dataTableOutput(\"TableRepostSelectedArticles1\")\n                                                 )\n                                                 \n                                            ))\n                                 ),\n                                 \n                                 #  7.2 Videos -------------------------------------------------------------------------------------\n                                 \n                                 tabPanel(\"Videos\",\n                                          \n                                          box(title = \"Number of Posts\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              \n                                              column(3,selectizeInput(inputId = \"chart_type_repost_videos\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"area\")),\n                                              column(3, selectizeInput(inputId = \"chart_time_repost_videos\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                              column(3, selectizeInput(inputId = \"chart_stack_repost_videos\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                              column(3, actionButton(inputId = \"plot_repost_videos\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                              column(12, highchartOutput(\"PlotRepostsOverviewVideos1\", height = 450))),\n                                          \n                                          box(title = \"Reach\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              \n                                              column(2,selectizeInput(inputId = \"chart_type_repost_videos2\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"area\")),\n                                              column(2, selectizeInput(inputId = \"chart_avg_total_repost_videos2\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                              column(2, selectizeInput(inputId = \"chart_time_repost_videos2\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                              column(3, selectizeInput(inputId = \"chart_stack_repost_videos2\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                              column(3, actionButton(inputId = \"plot_repost_videos2\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                              column(12, highchartOutput(\"PlotRepostsOverviewVideos2\", height = 450))),\n                                          \n                                          box(title = \"Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              \n                                              column(2,selectizeInput(inputId = \"chart_type_repost_videos3\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"area\")),\n                                              column(2, selectizeInput(inputId = \"chart_avg_total_repost_videos3\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                              column(2, selectizeInput(inputId = \"chart_time_repost_videos3\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                              column(3, selectizeInput(inputId = \"chart_stack_repost_videos3\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                              column(3, actionButton(inputId = \"plot_repost_videos3\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                              column(12, highchartOutput(\"PlotRepostsOverviewVideos3\", height = 450))),\n                                          \n                                          box(title = \"Reposts:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              selectizeInput(\"show_vars_repost_videos1\", strong(\"Variables\"), names(DataVideos),selected = c(\"sharetext\",\"date\",\"post_reach\",\"post_video_views\", \"interaction_rate\", \"times_repost\"), multiple = TRUE ),\n                                              DT::dataTableOutput(\"TableRepostsVideos1\")),\n                                          \n                                          conditionalPanel(\n                                            condition = \"input.TableRepostsVideos1_rows_selected != 0\",\n                                            box( title = \"Breakdown\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                 column(1,htmlOutput(\"picture_video\")),\n                                                 column(11,highchartOutput(\"TitleRepostSelectedVideos1\", height = 200)),\n                                                 column(4,highchartOutput(\"PlotRepostSelectedVideos1\")),\n                                                 column(4,highchartOutput(\"PlotRepostSelectedVideos2\")),\n                                                 column(4,highchartOutput(\"PlotRepostSelectedVideos3\")),\n                                                 column(12,\n                                                        selectizeInput(\"show_vars_repost_selected_videos1\", strong(\"Variables\"), names(DataVideos),selected = c(\"sharetext\",\"date\",\"post_reach\",\"post_video_views\", \"interaction_rate\", \"times_repost\"), multiple = TRUE ),\n                                                        DT::dataTableOutput(\"TableRepostSelectedVideos1\")\n                                                 )\n                                                 \n                                            ))\n                                 ),\n                                 \n                                 #  7.3 Video Memes -------------------------------------------------------------------------------------\n                                 \n                                 tabPanel(\"Video Memes\",\n                                          \n                                          box(title = \"Number of Posts\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              \n                                              column(3,selectizeInput(inputId = \"chart_type_repost_video_memes\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"area\")),\n                                              column(3, selectizeInput(inputId = \"chart_time_repost_video_memes\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                              column(3, selectizeInput(inputId = \"chart_stack_repost_video_memes\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                              column(3, actionButton(inputId = \"plot_repost_video_memes\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                              column(12, highchartOutput(\"PlotRepostsOverviewVideoMemes1\", height = 450))),\n                                          \n                                          box(title = \"Reach\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              \n                                              column(2,selectizeInput(inputId = \"chart_type_repost_video_memes2\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"area\")),\n                                              column(2, selectizeInput(inputId = \"chart_avg_total_repost_video_memes2\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                              column(2, selectizeInput(inputId = \"chart_time_repost_video_memes2\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                              column(3, selectizeInput(inputId = \"chart_stack_repost_video_memes2\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                              column(3, actionButton(inputId = \"plot_repost_video_memes2\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                              column(12, highchartOutput(\"PlotRepostsOverviewVideoMemes2\", height = 450))),\n                                          \n                                          box(title = \"Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              \n                                              column(2,selectizeInput(inputId = \"chart_type_repost_video_memes3\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"area\")),\n                                              column(2, selectizeInput(inputId = \"chart_avg_total_repost_video_memes3\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                              column(2, selectizeInput(inputId = \"chart_time_repost_video_memes3\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                              column(3, selectizeInput(inputId = \"chart_stack_repost_video_memes3\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                              column(3, actionButton(inputId = \"plot_repost_video_memes3\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                              column(12, highchartOutput(\"PlotRepostsOverviewVideoMemes3\", height = 450))),\n                                          \n                                          box(title = \"Reposts:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              selectizeInput(\"show_vars_repost_video_memes1\", strong(\"Variables\"), names(DataVideos),selected = c(\"sharetext\",\"date\",\"post_reach\",\"post_video_views\", \"interaction_rate\", \"times_repost\"), multiple = TRUE ),\n                                              DT::dataTableOutput(\"TableRepostsVideoMemes1\")),\n                                          \n                                          conditionalPanel(\n                                            condition = \"input.TableRepostsVideoMemes1_rows_selected != 0\",\n                                            box( title = \"Breakdown\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                 column(1,htmlOutput(\"picture_video_meme\")),\n                                                 column(11,highchartOutput(\"TitleRepostSelectedVideoMemes1\", height = 200)),\n                                                 column(4,highchartOutput(\"PlotRepostSelectedVideoMemes1\")),\n                                                 column(4,highchartOutput(\"PlotRepostSelectedVideoMemes2\")),\n                                                 column(4,highchartOutput(\"PlotRepostSelectedVideoMemes3\")),\n                                                 column(12,\n                                                        selectizeInput(\"show_vars_repost_selected_video_memes1\", strong(\"Variables\"), names(DataVideos),selected = c(\"sharetext\",\"date\",\"post_reach\",\"post_video_views\", \"interaction_rate\", \"times_repost\"), multiple = TRUE ),\n                                                        DT::dataTableOutput(\"TableRepostSelectedVideoMemes1\")\n                                                 )\n                                                 \n                                            ))\n                                          \n                                 ),\n                                 \n                                 #  7.4 Memes -------------------------------------------------------------------------------------------\n                                 \n                                 tabPanel(\"Memes\",\n                                          \n                                          box(title = \"Number of Posts\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              \n                                              column(3,selectizeInput(inputId = \"chart_type_repost_memes\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"area\")),\n                                              column(3, selectizeInput(inputId = \"chart_time_repost_memes\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                              column(3, selectizeInput(inputId = \"chart_stack_repost_memes\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                              column(3, actionButton(inputId = \"plot_repost_memes\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                              column(12, highchartOutput(\"PlotRepostsOverviewMemes1\", height = 450))),\n                                          \n                                          box(title = \"Reach\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              \n                                              column(2,selectizeInput(inputId = \"chart_type_repost_memes2\", label = \"Chart Type:\", choices = c(\"line\", \"spline\", \"area\", \"column\"), selected = \"area\")),\n                                              column(2, selectizeInput(inputId = \"chart_avg_total_repost_memes2\", label = \"Charting Method:\", choices = c(\"average\", \"sum\"), selected = \"average\")),\n                                              column(2, selectizeInput(inputId = \"chart_time_repost_memes2\", label = \"Chart Timeline:\", choices = c(\"day\", \"week\", \"month\"), selected = \"week\")),\n                                              column(3, selectizeInput(inputId = \"chart_stack_repost_memes2\", label = \"Stacked (Area & Column Only):\", choices = c(\"none\",\"normal\", \"percent\"), selected = \"normal\")),\n                                              column(3, actionButton(inputId = \"plot_repost_memes2\", label = \"Plot\", width = \"100%\", style = \"height:60px\")),\n                                              column(12, highchartOutput(\"PlotRepostsOverviewMemes2\", height = 450))),\n                                          \n                                          box(title = \"Reposts:\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                              selectizeInput(\"show_vars_repost_memes1\", strong(\"Variables\"), names(DataPhotos),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\", \"times_repost\"), multiple = TRUE ),\n                                              DT::dataTableOutput(\"TableRepostsMemes1\")),\n                                          \n                                          conditionalPanel(\n                                            condition = \"input.TableRepostsMemes1_rows_selected != 0\",\n                                            box( title = \"Breakdown\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                 column(1,htmlOutput(\"picture_meme\")),\n                                                 column(11,highchartOutput(\"TitleRepostSelectedMemes1\", height = 200)),\n                                                 column(4,highchartOutput(\"PlotRepostSelectedMemes1\")),\n                                                 column(4,highchartOutput(\"PlotRepostSelectedMemes2\")),\n                                                 column(12,\n                                                        selectizeInput(\"show_vars_repost_selected_memes1\", strong(\"Variables\"), names(DataArticles),selected = c(\"sharetext\",\"date\",\"post_reach\",\"total_comments\",\"total_likes\",\"total_shares\", \"times_repost\"), multiple = TRUE ),\n                                                        DT::dataTableOutput(\"TableRepostSelectedMemes1\")\n                                                 )\n                                            ))\n                                 )\n                                 \n                                 , width = 12))),\n                        \n                        #  8. Sprint -----------------------------------------------------------------------------------------------\n                        \n                        tabItem(tabName = \"sprint\",\n                                \n                                box(title = \"Pageviews per Post\", solidHeader = FALSE, collapsible = FALSE, width = 12,\n                                    \n                                    infoBox(\"Goal\", formatC(sprint_benchs[1], format = \"f\", digits = 0, big.mark = \",\"), icon = icon(\"fa fa-crosshairs\"),width = 6, fill = TRUE, color = \"light-blue\"),\n                                    infoBoxOutput(\"infobox1\", width = 6)),\n                                \n                                box(title = \"Photoviews per Post\", solidHeader = FALSE, collapsible = FALSE, width = 12,\n                                    \n                                    infoBox(\"Goal\", formatC(sprint_benchs[2], format = \"f\", digits = 0, big.mark = \",\"), icon = icon(\"fa fa-crosshairs\"),width = 6, fill = TRUE, color = \"light-blue\"),\n                                    \n                                    infoBoxOutput(\"infobox2\", width = 6)),                               \n                                \n                                box(title = \"Videoviews per Post\", solidHeader = FALSE, collapsible = FALSE, width = 12,\n                                    \n                                    infoBox(\"Goal\", formatC(sprint_benchs[3], format = \"f\", digits = 0, big.mark = \",\"), icon = icon(\"fa fa-crosshairs\"),width = 6, fill = TRUE, color = \"light-blue\"),\n                                    \n                                    infoBoxOutput(\"infobox3\", width = 6))\n                                \n                        )\n                      )\n                    ))\n)\n\n\n\n\n\n# SERVER  ==========================================================================================================================\n\nserver <- function(input, output, session) {\n  \n  # 1. Reactive Data --------------------------------------------------------------------------------------------------------------------\n  \n  # 1.1 Reactive Data - We Are MitÃº ---------------------------------------------------------------------------------------------------------------\n  \n  number_article_top <- reactiveValues(n = 0)\n  number_article_bottom <- reactiveValues(n = 0)\n  number_video_top <- reactiveValues(n = 0)\n  number_video_bottom <- reactiveValues(n = 0)\n  number_video_meme_top <- reactiveValues(n = 0)\n  number_video_meme_bottom <- reactiveValues(n = 0)\n  number_meme_top <- reactiveValues(n = 0)\n  number_meme_bottom <- reactiveValues(n = 0)\n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$article_select_original_repost_top\n    input$article_select_categories_top\n    input$article_select_sort_by_top\n  }, {\n    number_article_top$n <- 0\n  })\n  \n  observeEvent({\n    input$article_next_ten_top\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$article_select_original_repost_top\n    input$article_select_categories_top\n    input$article_select_sort_by_top\n    }, {\n      \n      DateRangeArticles <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n      \n      if(input$article_select_original_repost_top == \"Originals\"){\n        DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n      }\n      \n      else if (input$article_select_original_repost_top == \"Reposts\"){\n        DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n      }\n      \n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$article_select_categories_top),]\n      \n      number_article_top$n <- min(number_article_top$n + 10, nrow(DateRangeArticles))\n  })\n  \n  observeEvent(input$article_prev_ten_top, {\n    number_article_top$n <- max(number_article_top$n - 10,10)\n  })\n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$article_select_original_repost_bottom\n    input$article_select_categories_bottom\n    input$article_select_sort_by_bottom\n  }, {\n    number_article_bottom$n <- 0\n  })\n  \n  observeEvent({\n    input$article_next_ten_bottom\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$article_select_original_repost_bottom\n    input$article_select_categories_bottom\n    input$article_select_sort_by_bottom\n  }, {\n    DateRangeArticles <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    \n    if(input$article_select_original_repost_bottom == \"Originals\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n    }\n    \n    else if (input$article_select_original_repost_bottom == \"Reposts\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$article_select_categories_bottom),]\n    \n    number_article_bottom$n <- min(number_article_bottom$n + 10, nrow(DateRangeArticles))\n  })\n  \n  observeEvent(input$article_prev_ten_bottom, {\n    number_article_bottom$n <- max(number_article_bottom$n - 10,10)\n  })\n  \n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$video_select_original_repost_top\n    input$video_select_categories_top\n    input$video_select_sort_by_top\n  }, {\n    number_video_top$n <- 0\n  })\n  \n  observeEvent({\n    input$video_next_ten_top\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$video_select_original_repost_top\n    input$video_select_categories_top\n    input$video_select_sort_by_top\n  }, {\n    DateRangeVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 0),]\n    \n    if(input$video_select_original_repost_top == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$video_select_original_repost_top == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n\n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$video_select_categories_top),]\n    \n    number_video_top$n <- min(number_video_top$n + 5, nrow(DateRangeVideos))\n  })\n  \n  observeEvent(input$video_prev_ten_top, {\n    number_video_top$n <- max(number_video_top$n - 5,5)\n  })\n\n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$video_select_original_repost_bottom\n    input$video_select_categories_bottom\n    input$video_select_sort_by_bottom\n  }, {\n    number_video_bottom$n <- 0\n  })\n  \n  observeEvent({\n    input$video_next_ten_bottom\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$video_select_original_repost_bottom\n    input$video_select_categories_bottom\n    input$video_select_sort_by_bottom\n  }, {\n    DateRangeVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 0),]\n    \n    if(input$video_select_original_repost_bottom == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$video_select_original_repost_bottom == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$video_select_categories_bottom),]\n    \n    number_video_bottom$n <- min(number_video_bottom$n + 5, nrow(DateRangeVideos))\n  })\n  \n  observeEvent(input$video_prev_ten_bottom, {\n    number_video_bottom$n <- max(number_video_bottom$n - 5,5)\n  })\n  \n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$video_meme_select_original_repost_top\n    input$video_meme_select_categories_top\n    input$video_meme_select_sort_by_top\n  }, {\n    number_video_meme_top$n <- 0\n  })\n  \n  observeEvent({\n    input$video_meme_next_ten_top\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$video_meme_select_original_repost_top\n    input$video_meme_select_categories_top\n    input$video_meme_select_sort_by_top\n  }, {\n    DateRangeVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 1),]\n    \n    if(input$video_meme_select_original_repost_top == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$video_meme_select_original_repost_top == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$video_meme_select_categories_top),]\n    \n    number_video_meme_top$n <- min(number_video_meme_top$n + 5, nrow(DateRangeVideos))\n  })\n  \n  observeEvent(input$video_meme_prev_ten_top, {\n    number_video_meme_top$n <- max(number_video_meme_top$n - 5,5)\n  })\n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$video_meme_select_original_repost_bottom\n    input$video_meme_select_categories_bottom\n    input$video_meme_select_sort_by_bottom\n  }, {\n    number_video_meme_bottom$n <- 0\n  })\n  \n  observeEvent({\n    input$video_meme_next_ten_bottom\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$video_meme_select_original_repost_bottom\n    input$video_meme_select_categories_bottom\n    input$video_meme_select_sort_by_bottom\n  }, {\n    DateRangeVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 1),]\n    \n    if(input$video_meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$video_meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$video_meme_select_categories_bottom),]\n    \n    number_video_meme_bottom$n <- min(number_video_meme_bottom$n + 5, nrow(DateRangeVideos))\n  })\n  \n  observeEvent(input$video_meme_prev_ten_bottom, {\n    number_video_meme_bottom$n <- max(number_video_meme_bottom$n - 5,5)\n  })\n  \n\n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$meme_select_original_repost_top\n    input$meme_select_sort_by_top\n  }, {\n    number_meme_top$n <- 0\n  })\n  \n  observeEvent({\n    input$meme_next_ten_top\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$meme_select_original_repost_top\n    input$meme_select_sort_by_top\n  }, {\n    DateRangeMemes <- DataPhotos[which(DataPhotos$date >= input$dateRange1[1] & DataPhotos$date <= input$dateRange1[2]),]\n    \n    if(input$meme_select_original_repost_top == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$meme_select_original_repost_top == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    number_meme_top$n <- min(number_meme_top$n + 10, nrow(DateRangeMemes))\n  })\n  \n  observeEvent(input$meme_prev_ten_top, {\n    number_meme_top$n <- max(number_meme_top$n - 10,10)\n  })\n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$meme_select_original_repost_bottom\n    input$meme_select_sort_by_bottom\n  }, {\n    number_meme_bottom$n <- 0\n  })\n  \n  observeEvent({\n    input$meme_next_ten_bottom\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$meme_select_original_repost_bottom\n    input$meme_select_sort_by_bottom\n  }, {\n    DateRangeMemes <- DataPhotos[which(DataPhotos$date >= input$dateRange1[1] & DataPhotos$date <= input$dateRange1[2]),]\n    \n    if(input$meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    number_meme_bottom$n <- min(number_meme_bottom$n + 10, nrow(DateRangeMemes))\n  })\n  \n  observeEvent(input$meme_prev_ten_bottom, {\n    number_meme_bottom$n <- max(number_meme_bottom$n - 10,10)\n  })\n  \n  \n  WeekLinksTop <- reactive({\n    \n    DateRangeArticles <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    \n    ifelse(input$article_select_sort_by_top == \"Link Clicks\", DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$link_clicks, decreasing = TRUE),], ifelse(input$article_select_sort_by_top == \"Reach\", DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$post_reach, decreasing = TRUE),], DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$total_interactions, decreasing = TRUE),]))\n    \n    if(input$article_select_original_repost_top == \"Originals\"){\n      \n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n      \n    }\n    \n    else if (input$article_select_original_repost_top == \"Reposts\"){\n      \n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$article_select_categories_top),]\n    \n    DateRangeArticles$rank_link_clicks <- rank(-DateRangeArticles$link_clicks, ties.method=\"max\")\n    DateRangeArticles$rank_reach <- rank(-DateRangeArticles$post_reach, ties.method=\"max\")\n    DateRangeArticles$rank_interactions <- rank(-DateRangeArticles$total_interactions, ties.method=\"max\")\n    \n    DateRangeArticles <- DateRangeArticles[max((number_article_top$n-9), 1):min(nrow(DateRangeArticles), number_article_top$n),]\n    DateRangeArticles\n    \n  })\n  \n  WeekLinksBottom <- reactive({\n    \n    DateRangeArticles <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    \n    ifelse(input$article_select_sort_by_bottom == \"Link Clicks\", DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$link_clicks, decreasing = FALSE),], ifelse(input$article_select_sort_by_bottom == \"Reach\", DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$post_reach, decreasing = FALSE),], DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$total_interactions, decreasing = FALSE),]))\n    \n    if(input$article_select_original_repost_bottom == \"Originals\"){\n      \n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n      \n    }\n    \n    else if (input$article_select_original_repost_bottom == \"Reposts\"){\n      \n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$article_select_categories_bottom),]\n    \n    DateRangeArticles$rank_link_clicks <- rank(-DateRangeArticles$link_clicks, ties.method=\"max\")\n    DateRangeArticles$rank_reach <- rank(-DateRangeArticles$post_reach, ties.method=\"max\")\n    DateRangeArticles$rank_interactions <- rank(-DateRangeArticles$total_interactions, ties.method=\"max\")\n    \n    DateRangeArticles <- DateRangeArticles[max((number_article_bottom$n-9), 1):min(nrow(DateRangeArticles), number_article_bottom$n),]\n    DateRangeArticles\n    \n  })\n  \n  WeekVideosTop <- reactive({\n    \n    DateRangeVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 0),]\n    \n    ifelse(input$video_select_sort_by_top == \"Video Views\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_video_views, decreasing = TRUE),], ifelse(input$video_select_sort_by_top == \"Reach\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_reach, decreasing = TRUE),], DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$total_interactions, decreasing = TRUE),]))\n    \n    if(input$video_select_original_repost_top == \"Originals\"){\n      \n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n      \n    }\n    \n    else if (input$video_select_original_repost_top == \"Reposts\"){\n      \n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$video_select_categories_top),]\n    \n    DateRangeVideos$rank_video_views <- rank(-DateRangeVideos$post_video_views, ties.method=\"max\")\n    DateRangeVideos$rank_reach <- rank(-DateRangeVideos$post_reach, ties.method=\"max\")\n    DateRangeVideos$rank_interactions <- rank(-DateRangeVideos$total_interactions, ties.method=\"max\")\n    \n    DateRangeVideos <- DateRangeVideos[max((number_video_top$n-4), 1):min(nrow(DateRangeVideos), number_video_top$n),]\n    DateRangeVideos\n    \n  })\n  \n  WeekVideosBottom <- reactive({\n    \n    DateRangeVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 0),]\n    \n    ifelse(input$video_select_sort_by_bottom == \"Video Views\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_video_views, decreasing = FALSE),], ifelse(input$video_select_sort_by_bottom == \"Reach\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_reach, decreasing = FALSE),], DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$total_interactions, decreasing = FALSE),]))\n    \n    if(input$video_select_original_repost_bottom == \"Originals\"){\n      \n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n      \n    }\n    \n    else if (input$video_select_original_repost_bottom == \"Reposts\"){\n      \n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$video_select_categories_bottom),]\n    \n    DateRangeVideos$rank_video_views <- rank(-DateRangeVideos$post_video_views, ties.method=\"max\")\n    DateRangeVideos$rank_reach <- rank(-DateRangeVideos$post_reach, ties.method=\"max\")\n    DateRangeVideos$rank_interactions <- rank(-DateRangeVideos$total_interactions, ties.method=\"max\")\n    \n    DateRangeVideos <- DateRangeVideos[max((number_video_bottom$n-4), 1):min(nrow(DateRangeVideos), number_video_bottom$n),]\n    DateRangeVideos\n    \n  })\n  \n  WeekVideoMemesTop <- reactive({\n    \n    DateRangeVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 1),]\n    \n    ifelse(input$video_meme_select_sort_by_top == \"Video Views\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_video_views, decreasing = TRUE),], ifelse(input$video_meme_select_sort_by_top == \"Reach\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_reach, decreasing = TRUE),], DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$total_interactions, decreasing = TRUE),]))\n    \n    if(input$video_meme_select_original_repost_top == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$video_meme_select_original_repost_top == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$video_meme_select_categories_top),]\n    \n    DateRangeVideos$rank_video_views <- rank(-DateRangeVideos$post_video_views, ties.method=\"max\")\n    DateRangeVideos$rank_reach <- rank(-DateRangeVideos$post_reach, ties.method=\"max\")\n    DateRangeVideos$rank_interactions <- rank(-DateRangeVideos$total_interactions, ties.method=\"max\")\n    \n    DateRangeVideos <- DateRangeVideos[max((number_video_meme_top$n-4), 1):min(nrow(DateRangeVideos), number_video_meme_top$n),]\n    DateRangeVideos\n    \n  })\n  \n  WeekVideoMemesBottom <- reactive({\n    \n    DateRangeVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 1),]\n    \n    ifelse(input$video_meme_select_sort_by_bottom == \"Video Views\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_video_views, decreasing = FALSE),], ifelse(input$video_meme_select_sort_by_bottom == \"Reach\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_reach, decreasing = FALSE),], DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$total_interactions, decreasing = FALSE),]))\n    \n    if(input$video_meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$video_meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$video_meme_select_categories_bottom),]\n    \n    DateRangeVideos$rank_video_views <- rank(-DateRangeVideos$post_video_views, ties.method=\"max\")\n    DateRangeVideos$rank_reach <- rank(-DateRangeVideos$post_reach, ties.method=\"max\")\n    DateRangeVideos$rank_interactions <- rank(-DateRangeVideos$total_interactions, ties.method=\"max\")\n    \n    DateRangeVideos <- DateRangeVideos[max((number_video_meme_bottom$n-4), 1):min(nrow(DateRangeVideos), number_video_meme_bottom$n),]\n    DateRangeVideos\n    \n  })\n  \n  WeekPhotoTop <- reactive({\n    \n    DateRangeMemes <- DataPhotos[which(DataPhotos$date >= input$dateRange1[1] & DataPhotos$date <= input$dateRange1[2]),]\n    DateRangeMemes <- DateRangeMemes[order(DateRangeMemes$post_reach, decreasing = TRUE),]\n    \n    ifelse(input$meme_select_sort_by_top == \"Reach\", DateRangeMemes <- DateRangeMemes[order(DateRangeMemes$post_reach, decreasing = TRUE),], DateRangeMemes <- DateRangeMemes[order(DateRangeMemes$total_interactions, decreasing = TRUE),])\n    \n    if(input$meme_select_original_repost_top == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$meme_select_original_repost_top == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    DateRangeMemes$rank_reach <- rank(-DateRangeMemes$post_reach, ties.method=\"max\")\n    DateRangeMemes$rank_interactions <- rank(-DateRangeMemes$total_interactions, ties.method=\"max\")\n    \n    DateRangeMemes <- DateRangeMemes[max((number_meme_top$n-9), 1):min(nrow(DateRangeMemes), number_meme_top$n),]\n    DateRangeMemes\n    \n  })\n  \n  WeekPhotoBottom <- reactive({\n    \n    DateRangeMemes <- DataPhotos[which(DataPhotos$date >= input$dateRange1[1] & DataPhotos$date <= input$dateRange1[2]),]\n    \n    ifelse(input$meme_select_sort_by_bottom == \"Reach\", DateRangeMemes <- DateRangeMemes[order(DateRangeMemes$post_reach, decreasing = FALSE),], DateRangeMemes <- DateRangeMemes[order(DateRangeMemes$total_interactions, decreasing = FALSE),])\n    \n    if(input$meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    DateRangeMemes$rank_reach <- rank(-DateRangeMemes$post_reach, ties.method=\"max\")\n    DateRangeMemes$rank_interactions <- rank(-DateRangeMemes$total_interactions, ties.method=\"max\")\n    \n    DateRangeMemes <- DateRangeMemes[max((number_meme_bottom$n-9), 1):min(nrow(DateRangeMemes), number_meme_bottom$n),]\n    DateRangeMemes\n    \n  })\n  \n  \n  # 1.2. Reactive Data - Bad Hombres ---------------------------------------------------------------------------------------------------------------\n  \n  bh_number_article_top <- reactiveValues(n = 0)\n  bh_number_article_bottom <- reactiveValues(n = 0)\n  bh_number_video_top <- reactiveValues(n = 0)\n  bh_number_video_bottom <- reactiveValues(n = 0)\n  bh_number_video_meme_top <- reactiveValues(n = 0)\n  bh_number_video_meme_bottom <- reactiveValues(n = 0)\n  bh_number_meme_top <- reactiveValues(n = 0)\n  bh_number_meme_bottom <- reactiveValues(n = 0)\n\n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_article_select_original_repost_top\n    input$bh_article_select_categories_top\n    input$bh_article_select_sort_by_top\n  }, {\n    bh_number_article_top$n <- 0\n  })\n  \n  observeEvent({\n    input$bh_article_next_ten_top\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_article_select_original_repost_top\n    input$bh_article_select_categories_top\n    input$bh_article_select_sort_by_top\n  }, {\n    \n    DateRangeArticles <- DataArticlesBH[which(DataArticlesBH$date >= input$dateRange1[1] & DataArticlesBH$date <= input$dateRange1[2]),]\n    \n    if(input$bh_article_select_original_repost_top == \"Originals\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n    }\n    \n    else if (input$bh_article_select_original_repost_top == \"Reposts\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$bh_article_select_categories_top),]\n    \n    bh_number_article_top$n <- min(bh_number_article_top$n + 10, nrow(DateRangeArticles))\n  })\n  \n  observeEvent(input$bh_article_prev_ten_top, {\n    bh_number_article_top$n <- max(bh_number_article_top$n - 10,10)\n  })\n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_article_select_original_repost_bottom\n    input$bh_article_select_categories_bottom\n    input$bh_article_select_sort_by_bottom\n  }, {\n    bh_number_article_bottom$n <- 0\n  })\n  \n  observeEvent({\n    input$bh_article_next_ten_bottom\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_article_select_original_repost_bottom\n    input$bh_article_select_categories_bottom\n    input$bh_article_select_sort_by_bottom\n  }, {\n    DateRangeArticles <- DataArticlesBH[which(DataArticlesBH$date >= input$dateRange1[1] & DataArticlesBH$date <= input$dateRange1[2]),]\n    \n    if(input$bh_article_select_original_repost_bottom == \"Originals\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n    }\n    \n    else if (input$bh_article_select_original_repost_bottom == \"Reposts\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$bh_article_select_categories_bottom),]\n    \n    bh_number_article_bottom$n <- min(bh_number_article_bottom$n + 10, nrow(DateRangeArticles))\n  })\n  \n  observeEvent(input$bh_article_prev_ten_bottom, {\n    bh_number_article_bottom$n <- max(bh_number_article_bottom$n - 10,10)\n  })\n  \n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_video_select_original_repost_top\n    input$bh_video_select_categories_top\n    input$bh_video_select_sort_by_top\n  }, {\n    bh_number_video_top$n <- 0\n  })\n  \n  observeEvent({\n    input$bh_video_next_ten_top\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_video_select_original_repost_top\n    input$bh_video_select_categories_top\n    input$bh_video_select_sort_by_top\n  }, {\n    DateRangeVideos <- DataVideosBH[which(DataVideosBH$date >= input$dateRange1[1] & DataVideosBH$date <= input$dateRange1[2] & DataVideosBH$video_meme == 0),]\n    \n    if(input$bh_video_select_original_repost_top == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$bh_video_select_original_repost_top == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$bh_video_select_categories_top),]\n    \n    bh_number_video_top$n <- min(bh_number_video_top$n + 5, nrow(DateRangeVideos))\n  })\n  \n  observeEvent(input$bh_video_prev_ten_top, {\n    bh_number_video_top$n <- max(bh_number_video_top$n - 5,5)\n  })\n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_video_select_original_repost_bottom\n    input$bh_video_select_categories_bottom\n    input$bh_video_select_sort_by_bottom\n  }, {\n    bh_number_video_bottom$n <- 0\n  })\n  \n  observeEvent({\n    input$bh_video_next_ten_bottom\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_video_select_original_repost_bottom\n    input$bh_video_select_categories_bottom\n    input$bh_video_select_sort_by_bottom\n  }, {\n    DateRangeVideos <- DataVideosBH[which(DataVideosBH$date >= input$dateRange1[1] & DataVideosBH$date <= input$dateRange1[2] & DataVideosBH$video_meme == 0),]\n    \n    if(input$bh_video_select_original_repost_bottom == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$bh_video_select_original_repost_bottom == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$bh_video_select_categories_bottom),]\n    \n    bh_number_video_bottom$n <- min(bh_number_video_bottom$n + 5, nrow(DateRangeVideos))\n  })\n  \n  observeEvent(input$bh_video_prev_ten_bottom, {\n    bh_number_video_bottom$n <- max(bh_number_video_bottom$n - 5,5)\n  })\n  \n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_video_meme_select_original_repost_top\n    input$bh_video_meme_select_categories_top\n    input$bh_video_meme_select_sort_by_top\n  }, {\n    bh_number_video_meme_top$n <- 0\n  })\n  \n  observeEvent({\n    input$bh_video_meme_next_ten_top\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_video_meme_select_original_repost_top\n    input$bh_video_meme_select_categories_top\n    input$bh_video_meme_select_sort_by_top\n  }, {\n    DateRangeVideos <- DataVideosBH[which(DataVideosBH$date >= input$dateRange1[1] & DataVideosBH$date <= input$dateRange1[2] & DataVideosBH$video_meme == 1),]\n    \n    if(input$bh_video_meme_select_original_repost_top == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$bh_video_meme_select_original_repost_top == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$bh_video_meme_select_categories_top),]\n    \n    bh_number_video_meme_top$n <- min(bh_number_video_meme_top$n + 5, nrow(DateRangeVideos))\n  })\n  \n  observeEvent(input$bh_video_meme_prev_ten_top, {\n    bh_number_video_meme_top$n <- max(bh_number_video_meme_top$n - 5,5)\n  })\n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_video_meme_select_original_repost_bottom\n    input$bh_video_meme_select_categories_bottom\n    input$bh_video_meme_select_sort_by_bottom\n  }, {\n    bh_number_video_meme_bottom$n <- 0\n  })\n  \n  observeEvent({\n    input$bh_video_meme_next_ten_bottom\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_video_meme_select_original_repost_bottom\n    input$bh_video_meme_select_categories_bottom\n    input$bh_video_meme_select_sort_by_bottom\n  }, {\n    DateRangeVideos <- DataVideosBH[which(DataVideosBH$date >= input$dateRange1[1] & DataVideosBH$date <= input$dateRange1[2] & DataVideosBH$video_meme == 1),]\n    \n    if(input$bh_video_meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$bh_video_meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$bh_video_meme_select_categories_bottom),]\n    \n    bh_number_video_meme_bottom$n <- min(bh_number_video_meme_bottom$n + 5, nrow(DateRangeVideos))\n  })\n  \n  observeEvent(input$bh_video_meme_prev_ten_bottom, {\n    bh_number_video_meme_bottom$n <- max(bh_number_video_meme_bottom$n - 5,5)\n  })\n  \n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_meme_select_original_repost_top\n    input$bh_meme_select_sort_by_top\n  }, {\n    bh_number_meme_top$n <- 0\n  })\n  \n  observeEvent({\n    input$bh_meme_next_ten_top\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_meme_select_original_repost_top\n    input$bh_meme_select_sort_by_top\n  }, {\n    DateRangeMemes <- DataPhotosBH[which(DataPhotosBH$date >= input$dateRange1[1] & DataPhotosBH$date <= input$dateRange1[2]),]\n    \n    if(input$bh_meme_select_original_repost_top == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$bh_meme_select_original_repost_top == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    bh_number_meme_top$n <- min(bh_number_meme_top$n + 10, nrow(DateRangeMemes))\n  })\n  \n  observeEvent(input$bh_meme_prev_ten_top, {\n    bh_number_meme_top$n <- max(bh_number_meme_top$n - 10,10)\n  })\n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_meme_select_original_repost_bottom\n    input$bh_meme_select_sort_by_bottom\n  }, {\n    bh_number_meme_bottom$n <- 0\n  })\n  \n  observeEvent({\n    input$bh_meme_next_ten_bottom\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$bh_meme_select_original_repost_bottom\n    input$bh_meme_select_sort_by_bottom\n  }, {\n    DateRangeMemes <- DataPhotosBH[which(DataPhotosBH$date >= input$dateRange1[1] & DataPhotosBH$date <= input$dateRange1[2]),]\n    \n    if(input$bh_meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$bh_meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    bh_number_meme_bottom$n <- min(bh_number_meme_bottom$n + 10, nrow(DateRangeMemes))\n  })\n  \n  observeEvent(input$bh_meme_prev_ten_bottom, {\n    bh_number_meme_bottom$n <- max(bh_number_meme_bottom$n - 10,10)\n  })\n  \n  \n  WeekLinksTopBH <- reactive({\n    \n    DateRangeArticles <- DataArticlesBH[which(DataArticlesBH$date >= input$dateRange1[1] & DataArticlesBH$date <= input$dateRange1[2]),]\n    \n    ifelse(input$bh_article_select_sort_by_top == \"Link Clicks\", DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$link_clicks, decreasing = TRUE),], ifelse(input$bh_article_select_sort_by_top == \"Reach\", DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$post_reach, decreasing = TRUE),], DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$total_interactions, decreasing = TRUE),]))\n    \n    if(input$bh_article_select_original_repost_top == \"Originals\"){\n      \n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n      \n    }\n    \n    else if (input$bh_article_select_original_repost_top == \"Reposts\"){\n      \n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$bh_article_select_categories_top),]\n    \n    DateRangeArticles$rank_link_clicks <- rank(-DateRangeArticles$link_clicks, ties.method=\"max\")\n    DateRangeArticles$rank_reach <- rank(-DateRangeArticles$post_reach, ties.method=\"max\")\n    DateRangeArticles$rank_interactions <- rank(-DateRangeArticles$total_interactions, ties.method=\"max\")\n    \n    DateRangeArticles <- DateRangeArticles[max((bh_number_article_top$n-9), 1):min(nrow(DateRangeArticles), bh_number_article_top$n),]\n    DateRangeArticles\n    \n  })\n  \n  WeekLinksBottomBH <- reactive({\n    \n    DateRangeArticles <- DataArticlesBH[which(DataArticlesBH$date >= input$dateRange1[1] & DataArticlesBH$date <= input$dateRange1[2]),]\n    \n    ifelse(input$bh_article_select_sort_by_bottom == \"Link Clicks\", DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$link_clicks, decreasing = FALSE),], ifelse(input$bh_article_select_sort_by_bottom == \"Reach\", DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$post_reach, decreasing = FALSE),], DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$total_interactions, decreasing = FALSE),]))\n    \n    if(input$bh_article_select_original_repost_bottom == \"Originals\"){\n      \n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n      \n    }\n    \n    else if (input$bh_article_select_original_repost_bottom == \"Reposts\"){\n      \n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$bh_article_select_categories_bottom),]\n    \n    DateRangeArticles$rank_link_clicks <- rank(-DateRangeArticles$link_clicks, ties.method=\"max\")\n    DateRangeArticles$rank_reach <- rank(-DateRangeArticles$post_reach, ties.method=\"max\")\n    DateRangeArticles$rank_interactions <- rank(-DateRangeArticles$total_interactions, ties.method=\"max\")\n    \n    DateRangeArticles <- DateRangeArticles[max((bh_number_article_bottom$n-9), 1):min(nrow(DateRangeArticles), bh_number_article_bottom$n),]\n    DateRangeArticles\n    \n  })\n  \n  WeekVideosTopBH <- reactive({\n    \n    DateRangeVideos <- DataVideosBH[which(DataVideosBH$date >= input$dateRange1[1] & DataVideosBH$date <= input$dateRange1[2] & DataVideosBH$video_meme == 0),]\n    \n    ifelse(input$bh_video_select_sort_by_top == \"Video Views\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_video_views, decreasing = TRUE),], ifelse(input$bh_video_select_sort_by_top == \"Reach\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_reach, decreasing = TRUE),], DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$total_interactions, decreasing = TRUE),]))\n    \n    if(input$bh_video_select_original_repost_top == \"Originals\"){\n      \n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n      \n    }\n    \n    else if (input$bh_video_select_original_repost_top == \"Reposts\"){\n      \n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$bh_video_select_categories_top),]\n    \n    DateRangeVideos$rank_video_views <- rank(-DateRangeVideos$post_video_views, ties.method=\"max\")\n    DateRangeVideos$rank_reach <- rank(-DateRangeVideos$post_reach, ties.method=\"max\")\n    DateRangeVideos$rank_interactions <- rank(-DateRangeVideos$total_interactions, ties.method=\"max\")\n    \n    DateRangeVideos <- DateRangeVideos[max((bh_number_video_top$n-4), 1):min(nrow(DateRangeVideos), bh_number_video_top$n),]\n    DateRangeVideos\n    \n  })\n  \n  WeekVideosBottomBH <- reactive({\n    \n    DateRangeVideos <- DataVideosBH[which(DataVideosBH$date >= input$dateRange1[1] & DataVideosBH$date <= input$dateRange1[2] & DataVideosBH$video_meme == 0),]\n    \n    ifelse(input$bh_video_select_sort_by_bottom == \"Video Views\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_video_views, decreasing = FALSE),], ifelse(input$bh_video_select_sort_by_bottom == \"Reach\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_reach, decreasing = FALSE),], DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$total_interactions, decreasing = FALSE),]))\n    \n    if(input$bh_video_select_original_repost_bottom == \"Originals\"){\n      \n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n      \n    }\n    \n    else if (input$bh_video_select_original_repost_bottom == \"Reposts\"){\n      \n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$bh_video_select_categories_bottom),]\n    \n    DateRangeVideos$rank_video_views <- rank(-DateRangeVideos$post_video_views, ties.method=\"max\")\n    DateRangeVideos$rank_reach <- rank(-DateRangeVideos$post_reach, ties.method=\"max\")\n    DateRangeVideos$rank_interactions <- rank(-DateRangeVideos$total_interactions, ties.method=\"max\")\n    \n    DateRangeVideos <- DateRangeVideos[max((bh_number_video_bottom$n-4), 1):min(nrow(DateRangeVideos), bh_number_video_bottom$n),]\n    DateRangeVideos\n    \n  })\n  \n  WeekVideoMemesTopBH <- reactive({\n    \n    DateRangeVideos <- DataVideosBH[which(DataVideosBH$date >= input$dateRange1[1] & DataVideosBH$date <= input$dateRange1[2] & DataVideosBH$video_meme == 1),]\n    \n    ifelse(input$bh_video_meme_select_sort_by_top == \"Video Views\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_video_views, decreasing = TRUE),], ifelse(input$bh_video_meme_select_sort_by_top == \"Reach\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_reach, decreasing = TRUE),], DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$total_interactions, decreasing = TRUE),]))\n    \n    if(input$bh_video_meme_select_original_repost_top == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$bh_video_meme_select_original_repost_top == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$bh_video_meme_select_categories_top),]\n    \n    DateRangeVideos$rank_video_views <- rank(-DateRangeVideos$post_video_views, ties.method=\"max\")\n    DateRangeVideos$rank_reach <- rank(-DateRangeVideos$post_reach, ties.method=\"max\")\n    DateRangeVideos$rank_interactions <- rank(-DateRangeVideos$total_interactions, ties.method=\"max\")\n    \n    DateRangeVideos <- DateRangeVideos[max((bh_number_video_meme_top$n-4), 1):min(nrow(DateRangeVideos), bh_number_video_meme_top$n),]\n    DateRangeVideos\n    \n  })\n  \n  WeekVideoMemesBottomBH <- reactive({\n    \n    DateRangeVideos <- DataVideosBH[which(DataVideosBH$date >= input$dateRange1[1] & DataVideosBH$date <= input$dateRange1[2] & DataVideosBH$video_meme == 1),]\n    \n    ifelse(input$bh_video_meme_select_sort_by_bottom == \"Video Views\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_video_views, decreasing = FALSE),], ifelse(input$bh_video_meme_select_sort_by_bottom == \"Reach\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_reach, decreasing = FALSE),], DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$total_interactions, decreasing = FALSE),]))\n    \n    if(input$bh_video_meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$bh_video_meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$bh_video_meme_select_categories_bottom),]\n    \n    DateRangeVideos$rank_video_views <- rank(-DateRangeVideos$post_video_views, ties.method=\"max\")\n    DateRangeVideos$rank_reach <- rank(-DateRangeVideos$post_reach, ties.method=\"max\")\n    DateRangeVideos$rank_interactions <- rank(-DateRangeVideos$total_interactions, ties.method=\"max\")\n    \n    DateRangeVideos <- DateRangeVideos[max((bh_number_video_meme_bottom$n-4), 1):min(nrow(DateRangeVideos), bh_number_video_meme_bottom$n),]\n    DateRangeVideos\n    \n  })\n  \n  WeekPhotoTopBH <- reactive({\n    \n    DateRangeMemes <- DataPhotosBH[which(DataPhotosBH$date >= input$dateRange1[1] & DataPhotosBH$date <= input$dateRange1[2]),]\n    DateRangeMemes <- DateRangeMemes[order(DateRangeMemes$post_reach, decreasing = TRUE),]\n    \n    ifelse(input$bh_meme_select_sort_by_top == \"Reach\", DateRangeMemes <- DateRangeMemes[order(DateRangeMemes$post_reach, decreasing = TRUE),], DateRangeMemes <- DateRangeMemes[order(DateRangeMemes$total_interactions, decreasing = TRUE),])\n    \n    if(input$bh_meme_select_original_repost_top == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$bh_meme_select_original_repost_top == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    DateRangeMemes$rank_reach <- rank(-DateRangeMemes$post_reach, ties.method=\"max\")\n    DateRangeMemes$rank_interactions <- rank(-DateRangeMemes$total_interactions, ties.method=\"max\")\n    \n    DateRangeMemes <- DateRangeMemes[max((bh_number_meme_top$n-9), 1):min(nrow(DateRangeMemes), bh_number_meme_top$n),]\n    DateRangeMemes\n    \n  })\n  \n  WeekPhotoBottomBH <- reactive({\n    \n    DateRangeMemes <- DataPhotosBH[which(DataPhotosBH$date >= input$dateRange1[1] & DataPhotosBH$date <= input$dateRange1[2]),]\n    \n    ifelse(input$bh_meme_select_sort_by_bottom == \"Reach\", DateRangeMemes <- DateRangeMemes[order(DateRangeMemes$post_reach, decreasing = FALSE),], DateRangeMemes <- DateRangeMemes[order(DateRangeMemes$total_interactions, decreasing = FALSE),])\n    \n    if(input$bh_meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$bh_meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    DateRangeMemes$rank_reach <- rank(-DateRangeMemes$post_reach, ties.method=\"max\")\n    DateRangeMemes$rank_interactions <- rank(-DateRangeMemes$total_interactions, ties.method=\"max\")\n    \n    DateRangeMemes <- DateRangeMemes[max((bh_number_meme_bottom$n-9), 1):min(nrow(DateRangeMemes), bh_number_meme_bottom$n),]\n    DateRangeMemes\n    \n  })\n\n  # 1.3. Reactive Data - Fierce ---------------------------------------------------------------------------------------------------------------\n  \n  fc_number_article_top <- reactiveValues(n = 0)\n  fc_number_article_bottom <- reactiveValues(n = 0)\n  fc_number_video_top <- reactiveValues(n = 0)\n  fc_number_video_bottom <- reactiveValues(n = 0)\n  fc_number_video_meme_top <- reactiveValues(n = 0)\n  fc_number_video_meme_bottom <- reactiveValues(n = 0)\n  fc_number_meme_top <- reactiveValues(n = 0)\n  fc_number_meme_bottom <- reactiveValues(n = 0)\n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_article_select_original_repost_top\n    input$fc_article_select_categories_top\n    input$fc_article_select_sort_by_top\n  }, {\n    fc_number_article_top$n <- 0\n  })\n  \n  observeEvent({\n    input$fc_article_next_ten_top\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_article_select_original_repost_top\n    input$fc_article_select_categories_top\n    input$fc_article_select_sort_by_top\n  }, {\n    \n    DateRangeArticles <- DataArticlesFC[which(DataArticlesFC$date >= input$dateRange1[1] & DataArticlesFC$date <= input$dateRange1[2]),]\n    \n    if(input$fc_article_select_original_repost_top == \"Originals\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n    }\n    \n    else if (input$fc_article_select_original_repost_top == \"Reposts\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$fc_article_select_categories_top),]\n    \n    fc_number_article_top$n <- min(fc_number_article_top$n + 10, nrow(DateRangeArticles))\n  })\n  \n  observeEvent(input$fc_article_prev_ten_top, {\n    fc_number_article_top$n <- max(fc_number_article_top$n - 10,10)\n  })\n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_article_select_original_repost_bottom\n    input$fc_article_select_categories_bottom\n    input$fc_article_select_sort_by_bottom\n  }, {\n    fc_number_article_bottom$n <- 0\n  })\n  \n  observeEvent({\n    input$fc_article_next_ten_bottom\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_article_select_original_repost_bottom\n    input$fc_article_select_categories_bottom\n    input$fc_article_select_sort_by_bottom\n  }, {\n    DateRangeArticles <- DataArticlesFC[which(DataArticlesFC$date >= input$dateRange1[1] & DataArticlesFC$date <= input$dateRange1[2]),]\n    \n    if(input$fc_article_select_original_repost_bottom == \"Originals\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n    }\n    \n    else if (input$fc_article_select_original_repost_bottom == \"Reposts\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$fc_article_select_categories_bottom),]\n    \n    fc_number_article_bottom$n <- min(fc_number_article_bottom$n + 10, nrow(DateRangeArticles))\n  })\n  \n  observeEvent(input$fc_article_prev_ten_bottom, {\n    fc_number_article_bottom$n <- max(fc_number_article_bottom$n - 10,10)\n  })\n  \n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_video_select_original_repost_top\n    input$fc_video_select_categories_top\n    input$fc_video_select_sort_by_top\n  }, {\n    fc_number_video_top$n <- 0\n  })\n  \n  observeEvent({\n    input$fc_video_next_ten_top\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_video_select_original_repost_top\n    input$fc_video_select_categories_top\n    input$fc_video_select_sort_by_top\n  }, {\n    DateRangeVideos <- DataVideosFC[which(DataVideosFC$date >= input$dateRange1[1] & DataVideosFC$date <= input$dateRange1[2] & DataVideosFC$video_meme == 0),]\n    \n    if(input$fc_video_select_original_repost_top == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$fc_video_select_original_repost_top == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$fc_video_select_categories_top),]\n    \n    fc_number_video_top$n <- min(fc_number_video_top$n + 5, nrow(DateRangeVideos))\n  })\n  \n  observeEvent(input$fc_video_prev_ten_top, {\n    fc_number_video_top$n <- max(fc_number_video_top$n - 5,5)\n  })\n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_video_select_original_repost_bottom\n    input$fc_video_select_categories_bottom\n    input$fc_video_select_sort_by_bottom\n  }, {\n    fc_number_video_bottom$n <- 0\n  })\n  \n  observeEvent({\n    input$fc_video_next_ten_bottom\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_video_select_original_repost_bottom\n    input$fc_video_select_categories_bottom\n    input$fc_video_select_sort_by_bottom\n  }, {\n    DateRangeVideos <- DataVideosFC[which(DataVideosFC$date >= input$dateRange1[1] & DataVideosFC$date <= input$dateRange1[2] & DataVideosFC$video_meme == 0),]\n    \n    if(input$fc_video_select_original_repost_bottom == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$fc_video_select_original_repost_bottom == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$fc_video_select_categories_bottom),]\n    \n    fc_number_video_bottom$n <- min(fc_number_video_bottom$n + 5, nrow(DateRangeVideos))\n  })\n  \n  observeEvent(input$fc_video_prev_ten_bottom, {\n    fc_number_video_bottom$n <- max(fc_number_video_bottom$n - 5,5)\n  })\n  \n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_video_meme_select_original_repost_top\n    input$fc_video_meme_select_categories_top\n    input$fc_video_meme_select_sort_by_top\n  }, {\n    fc_number_video_meme_top$n <- 0\n  })\n  \n  observeEvent({\n    input$fc_video_meme_next_ten_top\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_video_meme_select_original_repost_top\n    input$fc_video_meme_select_categories_top\n    input$fc_video_meme_select_sort_by_top\n  }, {\n    DateRangeVideos <- DataVideosFC[which(DataVideosFC$date >= input$dateRange1[1] & DataVideosFC$date <= input$dateRange1[2] & DataVideosFC$video_meme == 1),]\n    \n    if(input$fc_video_meme_select_original_repost_top == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$fc_video_meme_select_original_repost_top == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$fc_video_meme_select_categories_top),]\n    \n    fc_number_video_meme_top$n <- min(fc_number_video_meme_top$n + 5, nrow(DateRangeVideos))\n  })\n  \n  observeEvent(input$fc_video_meme_prev_ten_top, {\n    fc_number_video_meme_top$n <- max(fc_number_video_meme_top$n - 5,5)\n  })\n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_video_meme_select_original_repost_bottom\n    input$fc_video_meme_select_categories_bottom\n    input$fc_video_meme_select_sort_by_bottom\n  }, {\n    fc_number_video_meme_bottom$n <- 0\n  })\n  \n  observeEvent({\n    input$fc_video_meme_next_ten_bottom\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_video_meme_select_original_repost_bottom\n    input$fc_video_meme_select_categories_bottom\n    input$fc_video_meme_select_sort_by_bottom\n  }, {\n    DateRangeVideos <- DataVideosFC[which(DataVideosFC$date >= input$dateRange1[1] & DataVideosFC$date <= input$dateRange1[2] & DataVideosFC$video_meme == 1),]\n    \n    if(input$fc_video_meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$fc_video_meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$fc_video_meme_select_categories_bottom),]\n    \n    fc_number_video_meme_bottom$n <- min(fc_number_video_meme_bottom$n + 5, nrow(DateRangeVideos))\n  })\n  \n  observeEvent(input$fc_video_meme_prev_ten_bottom, {\n    fc_number_video_meme_bottom$n <- max(fc_number_video_meme_bottom$n - 5,5)\n  })\n  \n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_meme_select_original_repost_top\n    input$fc_meme_select_sort_by_top\n  }, {\n    fc_number_meme_top$n <- 0\n  })\n  \n  observeEvent({\n    input$fc_meme_next_ten_top\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_meme_select_original_repost_top\n    input$fc_meme_select_sort_by_top\n  }, {\n    DateRangeMemes <- DataPhotosFC[which(DataPhotosFC$date >= input$dateRange1[1] & DataPhotosFC$date <= input$dateRange1[2]),]\n    \n    if(input$fc_meme_select_original_repost_top == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$fc_meme_select_original_repost_top == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    fc_number_meme_top$n <- min(fc_number_meme_top$n + 10, nrow(DateRangeMemes))\n  })\n  \n  observeEvent(input$fc_meme_prev_ten_top, {\n    fc_number_meme_top$n <- max(fc_number_meme_top$n - 10,10)\n  })\n  \n  observeEvent({\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_meme_select_original_repost_bottom\n    input$fc_meme_select_sort_by_bottom\n  }, {\n    fc_number_meme_bottom$n <- 0\n  })\n  \n  observeEvent({\n    input$fc_meme_next_ten_bottom\n    input$dateRange1[1]\n    input$dateRange1[2]\n    input$fc_meme_select_original_repost_bottom\n    input$fc_meme_select_sort_by_bottom\n  }, {\n    DateRangeMemes <- DataPhotosFC[which(DataPhotosFC$date >= input$dateRange1[1] & DataPhotosFC$date <= input$dateRange1[2]),]\n    \n    if(input$fc_meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$fc_meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    fc_number_meme_bottom$n <- min(fc_number_meme_bottom$n + 10, nrow(DateRangeMemes))\n  })\n  \n  observeEvent(input$fc_meme_prev_ten_bottom, {\n    fc_number_meme_bottom$n <- max(fc_number_meme_bottom$n - 10,10)\n  })\n  \n  \n  WeekLinksTopFC <- reactive({\n    \n    DateRangeArticles <- DataArticlesFC[which(DataArticlesFC$date >= input$dateRange1[1] & DataArticlesFC$date <= input$dateRange1[2]),]\n    \n    ifelse(input$fc_article_select_sort_by_top == \"Link Clicks\", DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$link_clicks, decreasing = TRUE),], ifelse(input$fc_article_select_sort_by_top == \"Reach\", DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$post_reach, decreasing = TRUE),], DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$total_interactions, decreasing = TRUE),]))\n    \n    if(input$fc_article_select_original_repost_top == \"Originals\"){\n      \n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n      \n    }\n    \n    else if (input$fc_article_select_original_repost_top == \"Reposts\"){\n      \n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$fc_article_select_categories_top),]\n    \n    DateRangeArticles$rank_link_clicks <- rank(-DateRangeArticles$link_clicks, ties.method=\"max\")\n    DateRangeArticles$rank_reach <- rank(-DateRangeArticles$post_reach, ties.method=\"max\")\n    DateRangeArticles$rank_interactions <- rank(-DateRangeArticles$total_interactions, ties.method=\"max\")\n    \n    DateRangeArticles <- DateRangeArticles[max((fc_number_article_top$n-9), 1):min(nrow(DateRangeArticles), fc_number_article_top$n),]\n    DateRangeArticles\n    \n  })\n  \n  WeekLinksBottomFC <- reactive({\n    \n    DateRangeArticles <- DataArticlesFC[which(DataArticlesFC$date >= input$dateRange1[1] & DataArticlesFC$date <= input$dateRange1[2]),]\n    \n    ifelse(input$fc_article_select_sort_by_bottom == \"Link Clicks\", DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$link_clicks, decreasing = FALSE),], ifelse(input$fc_article_select_sort_by_bottom == \"Reach\", DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$post_reach, decreasing = FALSE),], DateRangeArticles <- DateRangeArticles[order(DateRangeArticles$total_interactions, decreasing = FALSE),]))\n    \n    if(input$fc_article_select_original_repost_bottom == \"Originals\"){\n      \n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n      \n    }\n    \n    else if (input$fc_article_select_original_repost_bottom == \"Reposts\"){\n      \n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$fc_article_select_categories_bottom),]\n    \n    DateRangeArticles$rank_link_clicks <- rank(-DateRangeArticles$link_clicks, ties.method=\"max\")\n    DateRangeArticles$rank_reach <- rank(-DateRangeArticles$post_reach, ties.method=\"max\")\n    DateRangeArticles$rank_interactions <- rank(-DateRangeArticles$total_interactions, ties.method=\"max\")\n    \n    DateRangeArticles <- DateRangeArticles[max((fc_number_article_bottom$n-9), 1):min(nrow(DateRangeArticles), fc_number_article_bottom$n),]\n    DateRangeArticles\n    \n  })\n  \n  WeekVideosTopFC <- reactive({\n    \n    DateRangeVideos <- DataVideosFC[which(DataVideosFC$date >= input$dateRange1[1] & DataVideosFC$date <= input$dateRange1[2] & DataVideosFC$video_meme == 0),]\n    \n    ifelse(input$fc_video_select_sort_by_top == \"Video Views\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_video_views, decreasing = TRUE),], ifelse(input$fc_video_select_sort_by_top == \"Reach\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_reach, decreasing = TRUE),], DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$total_interactions, decreasing = TRUE),]))\n    \n    if(input$fc_video_select_original_repost_top == \"Originals\"){\n      \n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n      \n    }\n    \n    else if (input$fc_video_select_original_repost_top == \"Reposts\"){\n      \n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$fc_video_select_categories_top),]\n    \n    DateRangeVideos$rank_video_views <- rank(-DateRangeVideos$post_video_views, ties.method=\"max\")\n    DateRangeVideos$rank_reach <- rank(-DateRangeVideos$post_reach, ties.method=\"max\")\n    DateRangeVideos$rank_interactions <- rank(-DateRangeVideos$total_interactions, ties.method=\"max\")\n    \n    DateRangeVideos <- DateRangeVideos[max((fc_number_video_top$n-4), 1):min(nrow(DateRangeVideos), fc_number_video_top$n),]\n    DateRangeVideos\n    \n  })\n  \n  WeekVideosBottomFC <- reactive({\n    \n    DateRangeVideos <- DataVideosFC[which(DataVideosFC$date >= input$dateRange1[1] & DataVideosFC$date <= input$dateRange1[2] & DataVideosFC$video_meme == 0),]\n    \n    ifelse(input$fc_video_select_sort_by_bottom == \"Video Views\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_video_views, decreasing = FALSE),], ifelse(input$fc_video_select_sort_by_bottom == \"Reach\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_reach, decreasing = FALSE),], DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$total_interactions, decreasing = FALSE),]))\n    \n    if(input$fc_video_select_original_repost_bottom == \"Originals\"){\n      \n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n      \n    }\n    \n    else if (input$fc_video_select_original_repost_bottom == \"Reposts\"){\n      \n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$fc_video_select_categories_bottom),]\n    \n    DateRangeVideos$rank_video_views <- rank(-DateRangeVideos$post_video_views, ties.method=\"max\")\n    DateRangeVideos$rank_reach <- rank(-DateRangeVideos$post_reach, ties.method=\"max\")\n    DateRangeVideos$rank_interactions <- rank(-DateRangeVideos$total_interactions, ties.method=\"max\")\n    \n    DateRangeVideos <- DateRangeVideos[max((fc_number_video_bottom$n-4), 1):min(nrow(DateRangeVideos), fc_number_video_bottom$n),]\n    DateRangeVideos\n    \n  })\n  \n  WeekVideoMemesTopFC <- reactive({\n    \n    DateRangeVideos <- DataVideosFC[which(DataVideosFC$date >= input$dateRange1[1] & DataVideosFC$date <= input$dateRange1[2] & DataVideosFC$video_meme == 1),]\n    \n    ifelse(input$fc_video_meme_select_sort_by_top == \"Video Views\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_video_views, decreasing = TRUE),], ifelse(input$fc_video_meme_select_sort_by_top == \"Reach\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_reach, decreasing = TRUE),], DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$total_interactions, decreasing = TRUE),]))\n    \n    if(input$fc_video_meme_select_original_repost_top == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$fc_video_meme_select_original_repost_top == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$fc_video_meme_select_categories_top),]\n    \n    DateRangeVideos$rank_video_views <- rank(-DateRangeVideos$post_video_views, ties.method=\"max\")\n    DateRangeVideos$rank_reach <- rank(-DateRangeVideos$post_reach, ties.method=\"max\")\n    DateRangeVideos$rank_interactions <- rank(-DateRangeVideos$total_interactions, ties.method=\"max\")\n    \n    DateRangeVideos <- DateRangeVideos[max((fc_number_video_meme_top$n-4), 1):min(nrow(DateRangeVideos), fc_number_video_meme_top$n),]\n    DateRangeVideos\n    \n  })\n  \n  WeekVideoMemesBottomFC <- reactive({\n    \n    DateRangeVideos <- DataVideosFC[which(DataVideosFC$date >= input$dateRange1[1] & DataVideosFC$date <= input$dateRange1[2] & DataVideosFC$video_meme == 1),]\n    \n    ifelse(input$fc_video_meme_select_sort_by_bottom == \"Video Views\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_video_views, decreasing = FALSE),], ifelse(input$fc_video_meme_select_sort_by_bottom == \"Reach\", DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$post_reach, decreasing = FALSE),], DateRangeVideos <- DateRangeVideos[order(DateRangeVideos$total_interactions, decreasing = FALSE),]))\n    \n    if(input$fc_video_meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$fc_video_meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$fc_video_meme_select_categories_bottom),]\n    \n    DateRangeVideos$rank_video_views <- rank(-DateRangeVideos$post_video_views, ties.method=\"max\")\n    DateRangeVideos$rank_reach <- rank(-DateRangeVideos$post_reach, ties.method=\"max\")\n    DateRangeVideos$rank_interactions <- rank(-DateRangeVideos$total_interactions, ties.method=\"max\")\n    \n    DateRangeVideos <- DateRangeVideos[max((fc_number_video_meme_bottom$n-4), 1):min(nrow(DateRangeVideos), fc_number_video_meme_bottom$n),]\n    DateRangeVideos\n    \n  })\n  \n  WeekPhotoTopFC <- reactive({\n    \n    DateRangeMemes <- DataPhotosFC[which(DataPhotosFC$date >= input$dateRange1[1] & DataPhotosFC$date <= input$dateRange1[2]),]\n    DateRangeMemes <- DateRangeMemes[order(DateRangeMemes$post_reach, decreasing = TRUE),]\n    \n    ifelse(input$fc_meme_select_sort_by_top == \"Reach\", DateRangeMemes <- DateRangeMemes[order(DateRangeMemes$post_reach, decreasing = TRUE),], DateRangeMemes <- DateRangeMemes[order(DateRangeMemes$total_interactions, decreasing = TRUE),])\n    \n    if(input$fc_meme_select_original_repost_top == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$fc_meme_select_original_repost_top == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    DateRangeMemes$rank_reach <- rank(-DateRangeMemes$post_reach, ties.method=\"max\")\n    DateRangeMemes$rank_interactions <- rank(-DateRangeMemes$total_interactions, ties.method=\"max\")\n    \n    DateRangeMemes <- DateRangeMemes[max((fc_number_meme_top$n-9), 1):min(nrow(DateRangeMemes), fc_number_meme_top$n),]\n    DateRangeMemes\n    \n  })\n  \n  WeekPhotoBottomFC <- reactive({\n    \n    DateRangeMemes <- DataPhotosFC[which(DataPhotosFC$date >= input$dateRange1[1] & DataPhotosFC$date <= input$dateRange1[2]),]\n    \n    ifelse(input$fc_meme_select_sort_by_bottom == \"Reach\", DateRangeMemes <- DateRangeMemes[order(DateRangeMemes$post_reach, decreasing = FALSE),], DateRangeMemes <- DateRangeMemes[order(DateRangeMemes$total_interactions, decreasing = FALSE),])\n    \n    if(input$fc_meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$fc_meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    DateRangeMemes$rank_reach <- rank(-DateRangeMemes$post_reach, ties.method=\"max\")\n    DateRangeMemes$rank_interactions <- rank(-DateRangeMemes$total_interactions, ties.method=\"max\")\n    \n    DateRangeMemes <- DateRangeMemes[max((fc_number_meme_bottom$n-9), 1):min(nrow(DateRangeMemes), fc_number_meme_bottom$n),]\n    DateRangeMemes\n    \n  })\n  \n  \n  #----------------------------------------------------------------------------------------------------------------------\n\n  \n  # 2. Overview --------------------------------------------------------------------------------------------------------------------\n  \n  # 2.1. Overview - We Are MitÃº -------------------------------------------------------------------------------------------------------------------\n  \n  output$PlotOverview11 <- renderHighchart({\n    \n    input$plot_article_overview\n    isolate({   \n      \n      DataArticles <- DataArticles[which(DataArticles$category %in% input$article_select_categories_performance_overview & DataArticles$article_click_rank %in% input$chart_link_clicks_group_overview & DataArticles$repost %in% input$article_overview_repost),]\n      \n      AvgDailyArticleReach <- as.xts(DataArticles$post_reach, order.by = DataArticles$created_time)\n      AvgDailyArticleLC <- as.xts(DataArticles$link_clicks, order.by = DataArticles$created_time)\n      \n      if(input$variable_display_overview == \"link clicks\"){\n        AvgDailyArticleVariable <- as.xts(DataArticles$link_clicks, order.by = DataArticles$created_time)\n      } else {\n        AvgDailyArticleVariable <- as.xts(DataArticles$total_comments+DataArticles$total_likes+DataArticles$total_shares, order.by = DataArticles$created_time)\n      }\n      \n      if(input$rate_display_overview == \"ctr\"){\n        AvgDailyArticleRate <- as.xts(as.numeric(formatC(DataArticles$ctr*100, format = \"f\", digits = 2)), order.by = DataArticles$created_time)\n      } else {\n        AvgDailyArticleRate <- as.xts(as.numeric(formatC(DataArticles$interaction_rate*100, format = \"f\", digits = 2)), order.by = DataArticles$created_time)\n      }\n      \n      sufix <- ifelse(input$avg_total_article_overview == \"average\", \"Avg.\", \"Total\")\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_yAxis_multiples(\n          list(offset = 30, title = list(text = paste(sufix,\"Reach\", sep = \" \")), height = \"45%\", top = \"0%\"),\n          list(offset = 30, title = list(text = paste(sufix, ifelse(input$variable_display_overview == \"link clicks\", \"Link Clicks\", \"Interactions\"), sep = \" \")), height = \"35%\", top = \"47.5%\"),\n          list(offset = 30, title = list(text = ifelse(input$avg_total_article_overview == \"average\", ifelse(input$rate_display_overview == \"ctr\", \"Avg. CTR\", \"Avg. IR\"), \"Ignore!\")), height = \"15%\", top = \"85%\", labels = list(format = \"{value} %\"))) %>% \n        \n        hc_add_series(AvgDailyArticleReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0, color = \"#D73027\", type = \"area\") %>%\n        hc_add_series(AvgDailyArticleVariable, id = \"Daily LC\", yAxis = 1, name = ifelse(input$variable_display_overview == \"link clicks\", \"Link Clicks\", \"Interactions\"), color = \"#F46D43\", type = \"area\") %>%\n        hc_add_series(AvgDailyArticleRate, id = \"Daily CTR\", yAxis = 2, name = ifelse(input$rate_display_overview == \"ctr\", \"CTR\", \"IR\"), type = \"column\", color = \"#2580B9\", tooltip = list(valueSuffix = \" %\")) %>% \n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_article_overview == \"month\", 5, 4)) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = \"none\", dataGrouping = list(approximation = input$avg_total_article_overview, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input$chart_time_article_overview, list(1)))))) %>%\n        hc_tooltip(valueDecimals = ifelse(input$avg_total_article_overview == \"average\", 2, 0)) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  output$PlotOverview111 <- renderHighchart({\n    \n    input$plot_article_overview1\n    isolate({ \n      \n      DataArticles <- DataArticles[which(DataArticles$category %in% input$article_select_categories_overview & DataArticles$article_click_rank %in% input$chart_link_clicks_group_overview2),]\n      \n      dates <- data.frame(created_time = DataArticles$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$repost == 1 & DataArticles$post_source_type == \"native\"),\"created_time\"], num = rep(1,nrow(DataArticles[which(DataArticles$repost == 1  & DataArticles$post_source_type == \"native\"),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$original == 1  & DataArticles$post_source_type == \"native\"),\"created_time\"], num = rep(1,nrow(DataArticles[which(DataArticles$original == 1  & DataArticles$post_source_type == \"native\"),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      shares <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$post_source_type == \"shared\"),\"created_time\"], num = rep(1,nrow(DataArticles[which(DataArticles$post_source_type == \"shared\"),]))), by = \"created_time\", all = TRUE)\n      shares <- as.xts(shares[,\"num\"], order.by = shares[,\"created_time\"])\n      \n      \n      colores<- c('#D55200', '#2580B9', '#C80D4A')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$chart_type_overview1) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$chart_type_overview1) %>%\n        hc_add_series(shares, name = \"Shares\", type = input$chart_type_overview1) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_overview1 == \"day\", 0, 2)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_overview1 == \"area\" || input$chart_type_overview1 == \"column\"){if(input$chart_stack_overview1 != \"none\"){input$chart_stack_overview1}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_overview1, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n\n  output$PlotOverview12 <- renderHighchart({\n    \n    input$plot_video_overview\n    isolate({  \n      \n      VideoData <- DataVideos[which(DataVideos$video_meme == 0 & DataVideos$video_views_rank %in% input$chart_video_views_group_overview & DataVideos$category %in% input$video_select_categories_performance_overview & DataVideos$repost %in% input$video_overview_repost),]\n      \n      AvgDailyVideoReach <- as.xts(VideoData$post_reach, order.by = VideoData$created_time)\n      \n      if(input$video_variable_display_overview == \"video views\"){\n        AvgDailyVideoVariable <- as.xts(VideoData$post_video_views, order.by = VideoData$created_time)\n      } else {\n        AvgDailyVideoVariable <- as.xts(VideoData$total_comments+VideoData$total_likes+VideoData$total_shares , order.by = VideoData$created_time)\n      }\n      \n      if(input$video_rate_display_overview == \"interaction rate\"){\n        AvgDailyVideoRate <- as.xts(as.numeric(formatC(VideoData$interaction_rate*100, format = \"f\", digits = 2)), order.by = VideoData$created_time)\n      } else {\n        AvgDailyVideoRate <- as.xts(as.numeric(formatC((VideoData$post_video_views/VideoData$post_reach)*100, format = \"f\", digits = 2)), order.by = VideoData$created_time)\n      }\n  \n      sufix <- ifelse(input$avg_total_video_overview == \"average\", \"Avg.\", \"Total\")\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_yAxis_multiples(\n          list(offset = 30, title = list(text = paste(sufix,\"Reach\", sep = \" \")), height = \"45%\", top = \"0%\"),\n          list(offset = 30, title = list(text = paste(sufix, ifelse(input$video_variable_display_overview == \"video views\", \"Video Views\", \"Interactions\"), sep = \" \")), height = \"35%\", top = \"47.5%\"),\n          list(offset = 30, title = list(text = ifelse(input$avg_total_video_overview == \"average\", ifelse(input$video_rate_display_overview == \"interaction rate\", \"Avg. IR\", \"Avg. VR\"), \"Ignore!\")), height = \"15%\", top = \"85%\", labels = list(format = \"{value} %\"))\n        ) %>%\n        \n        hc_add_series(AvgDailyVideoReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0, color = \"#D73027\", type = \"area\") %>%\n        hc_add_series(AvgDailyVideoVariable, id = \"Daily Video Views\", yAxis = 1, name = ifelse(input$video_variable_display_overview == \"video views\", \"Video Views\", \"Interactions\"), color = \"#F46D43\", type = \"area\") %>%\n        hc_add_series(AvgDailyVideoRate, id = \"Daily IR\", yAxis = 2, name = ifelse(input$video_rate_display_overview == \"interaction rate\", \"IR\", \"VR\"), type = \"column\", color = \"#2580B9\", tooltip = list(valueSuffix = \" %\")) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_video_overview == \"month\", 5, 4)) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = \"none\", dataGrouping = list(approximation = input$avg_total_video_overview, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input$chart_time_video_overview, list(1)))))) %>%\n        hc_tooltip(valueDecimals = ifelse(input$avg_total_video_overview == \"average\", 2, 0)) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    \n    })\n  })\n  \n  output$PlotOverview121 <- renderHighchart({\n    \n    input$plot_video_overview1\n    isolate({ \n      \n      VideoData <- DataVideos[which(DataVideos$video_meme == 0 & DataVideos$video_views_rank %in% input$chart_video_views_group_overview2 & DataVideos$category %in% input$video_select_categories_overview),]\n      \n      dates <- data.frame(created_time = VideoData$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = VideoData[which(VideoData$repost == 1  & VideoData$post_source_type == \"native\"),\"created_time\"], num = rep(1,nrow(VideoData[which(VideoData$repost == 1 & VideoData$post_source_type == \"native\"),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = VideoData[which(VideoData$original == 1 & VideoData$post_source_type == \"native\"),\"created_time\"], num = rep(1,nrow(VideoData[which(VideoData$original == 1 & VideoData$post_source_type == \"native\"),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      shares <- merge(dates, data.frame(created_time = VideoData[which(VideoData$post_source_type == \"shared\"),\"created_time\"], num = rep(1,nrow(VideoData[which(VideoData$post_source_type == \"shared\"),]))), by = \"created_time\", all = TRUE)\n      shares <- as.xts(shares[,\"num\"], order.by = shares[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9', '#C80D4A')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$chart_type_overview2) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$chart_type_overview2) %>%\n        hc_add_series(shares, name = \"Shares\", type = input$chart_type_overview2) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_overview2 == \"day\", 0, 2)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_overview2 == \"area\" || input$chart_type_overview2 == \"column\"){if(input$chart_stack_overview2 != \"none\"){input$chart_stack_overview2}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_overview2, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$PlotOverview13 <- renderHighchart({\n\n    input$plot_videomeme_overview\n    isolate({  \n      \n      DataVideos <- DataVideos[which(DataVideos$video_meme == 1 & DataVideos$video_views_rank %in% input$chart_video_views_meme_group_overview & DataVideos$category %in% input$video_meme_select_categories_performance_overview & DataVideos$repost %in% input$video_meme_overview_repost),]\n      \n    AvgDailyVideoReach <- as.xts(DataVideos[which(DataVideos$video_meme == 1),]$post_reach, order.by = DataVideos[which(DataVideos$video_meme == 1),]$created_time)\n   \n    if(input$videomeme_variable_display_overview == \"video views\"){\n      AvgDailyVideoVariable <- as.xts(DataVideos[which(DataVideos$video_meme == 1),]$post_video_views, order.by = DataVideos[which(DataVideos$video_meme == 1),]$created_time)\n    } else {\n      AvgDailyVideoVariable <- as.xts(DataVideos[which(DataVideos$video_meme == 1),]$total_comments+DataVideos[which(DataVideos$video_meme == 1),]$total_likes+DataVideos[which(DataVideos$video_meme == 1),]$total_shares , order.by = DataVideos[which(DataVideos$video_meme == 1),]$created_time)\n    }\n    \n    if(input$videomeme_rate_display_overview == \"interaction rate\"){\n      AvgDailyVideoRate <- as.xts(as.numeric(formatC(DataVideos[which(DataVideos$video_meme == 1),]$interaction_rate*100, format = \"f\", digits = 2)), order.by = DataVideos[which(DataVideos$video_meme == 1),]$created_time)\n    } else {\n      AvgDailyVideoRate <- as.xts(as.numeric(formatC((DataVideos[which(DataVideos$video_meme == 1),]$post_video_views/DataVideos[which(DataVideos$video_meme == 1),]$post_reach)*100, format = \"f\", digits = 2)), order.by = DataVideos[which(DataVideos$video_meme == 1),]$created_time)\n    }\n    \n    sufix <- ifelse(input$avg_total_videomeme_overview == \"average\", \"Avg.\", \"Total\")\n    \n    hc <-highchart(type = \"stock\") %>%\n      hc_yAxis_multiples(\n        list(offset = 30, title = list(text = paste(sufix,\"Reach\", sep = \" \")), height = \"45%\", top = \"0%\"),\n        list(offset = 30, title = list(text = paste(sufix, ifelse(input$videomeme_variable_display_overview == \"video views\", \"Video Views\", \"Interactions\"), sep = \" \")), height = \"35%\", top = \"47.5%\"),\n        list(offset = 30, title = list(text = ifelse(input$avg_total_videomeme_overview == \"average\", ifelse(input$videomeme_rate_display_overview == \"interaction rate\", \"Avg. IR\", \"Avg. VR\"), \"Ignore!\")), height = \"15%\", top = \"85%\", labels = list(format = \"{value} %\"))\n      ) %>%\n      hc_add_series(AvgDailyVideoReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0, color = \"#D73027\", type = \"area\") %>%\n      hc_add_series(AvgDailyVideoVariable, id = \"Daily Video Views\", yAxis = 1, name = ifelse(input$videomeme_variable_display_overview == \"video views\", \"Video Views\", \"Interactions\"), color = \"#F46D43\", type = \"area\") %>%\n      hc_add_series(AvgDailyVideoRate, id = \"Daily IR\", yAxis = 2, name = ifelse(input$videomeme_rate_display_overview == \"interaction rate\", \"Interaction Rate\", \"Views Rate\"), type = \"column\", color = \"#2580B9\", tooltip = list(valueSuffix = \" %\")) %>%\n      \n      hc_scrollbar(enabled = FALSE) %>%\n      hc_rangeSelector(selected = ifelse(input$chart_time_videomeme_overview == \"month\", 5, 4)) %>%\n      hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = \"none\", dataGrouping = list(approximation = input$avg_total_videomeme_overview, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input$chart_time_videomeme_overview, list(1)))))) %>%\n      hc_tooltip(valueDecimals = ifelse(input$avg_total_videomeme_overview == \"average\", 2, 0)) %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n    })\n  })\n  \n  output$PlotOverview131 <- renderHighchart({\n    \n    input$plot_videomeme_overview1\n    isolate({ \n      \n      VideoData <- DataVideos[which(DataVideos$video_meme == 1 & DataVideos$video_views_rank %in% input$chart_video_views_meme_group_overview2 & DataVideos$category %in% input$video_meme_select_categories_overview),]\n      \n      dates <- data.frame(created_time = VideoData$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = VideoData[which(VideoData$repost == 1 & VideoData$post_source_type == \"native\"),\"created_time\"], num = rep(1,nrow(VideoData[which(VideoData$repost == 1 & VideoData$post_source_type == \"native\"),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = VideoData[which(VideoData$original == 1 & VideoData$post_source_type == \"native\"),\"created_time\"], num = rep(1,nrow(VideoData[which(VideoData$original == 1 & VideoData$post_source_type == \"native\"),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      shares <- merge(dates, data.frame(created_time = VideoData[which(VideoData$post_source_type == \"shared\"),\"created_time\"], num = rep(1,nrow(VideoData[which(VideoData$post_source_type == \"shared\"),]))), by = \"created_time\", all = TRUE)\n      shares <- as.xts(shares[,\"num\"], order.by = shares[,\"created_time\"])\n       \n      colores<- c('#D55200', '#2580B9', '#C80D4A')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$chart_type_overview3) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$chart_type_overview3) %>%\n        hc_add_series(shares, name = \"Shares\", type = input$chart_type_overview3) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_overview3 == \"day\", 0, 2)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_overview3 == \"area\" || input$chart_type_overview3 == \"column\"){if(input$chart_stack_overview2 != \"none\"){input$chart_stack_overview3}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_overview3, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$PlotOverview14 <- renderHighchart({\n    \n    input$plot_meme_overview\n    isolate({  \n    \n    AvgDailyPhotoReach <- as.xts(DataPhotos$post_reach, order.by = DataPhotos$created_time)\n    AvgDailyPhotoFanReach <- as.xts(DataPhotos$post_reach_fan_unique, order.by = DataPhotos$created_time)\n    AvgDailyPhotoIR <- as.xts(as.numeric(formatC(DataPhotos$interaction_rate*100, format = \"f\", digits = 2)), order.by = DataPhotos$created_time)\n    \n    if(input$meme_variable_display_overview == \"fan reach\"){\n      AvgDailyPhotoVariable <- as.xts(DataPhotos$post_reach_fan_unique, order.by = DataPhotos$created_time)\n    } else {\n      AvgDailyPhotoVariable <- as.xts(DataPhotos$post_reach_viral_unique, order.by = DataPhotos$created_time)\n    }\n    \n    if(input$meme_rate_display_overview == \"interaction rate\"){\n      AvgDailyPhotoRate <- as.xts(as.numeric(formatC(DataPhotos$interaction_rate*100, format = \"f\", digits = 2)), order.by = DataPhotos$created_time)\n    } else {\n      AvgDailyPhotoRate <- as.xts(as.numeric(formatC((DataPhotos$total_shares/(DataPhotos$total_comments+DataPhotos$total_likes+DataPhotos$total_shares))*100, format = \"f\", digits = 2)), order.by = DataPhotos$created_time)\n    }\n    \n    sufix <- ifelse(input$avg_total_meme_overview == \"average\", \"Avg.\", \"Total\")\n    \n    hc <-highchart(type = \"stock\") %>%\n      hc_yAxis_multiples(\n        list(offset = 30, title = list(text = paste(sufix,\"Reach\", sep = \" \")), height = \"45%\", top = \"0%\"),\n        list(offset = 30, title = list(text = paste(sufix, ifelse(input$meme_variable_display_overview == \"fan reach\", \"Fan Reach\", \"Viral Reach\"), sep = \" \")), height = \"35%\", top = \"47.5%\"),\n        list(offset = 30, title = list(text = ifelse(input$avg_total_videomeme_overview == \"average\", ifelse(input$meme_rate_display_overview == \"interaction rate\", \"Avg. IR\", \"Avg. Share Rate\"), \"Ignore!\")), height = \"15%\", top = \"85%\", labels = list(format = \"{value} %\"))\n      ) %>%\n\n      hc_add_series(AvgDailyPhotoReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0, color = \"#D73027\", type = \"area\") %>%\n      hc_add_series(AvgDailyPhotoVariable, id = \"Daily Fan Reach\", yAxis = 1, name = ifelse(input$meme_variable_display_overview == \"fan reach\", \"Fan Reach\", \"Viral Reach\"), color = \"#F46D43\", type = \"area\") %>%\n      hc_add_series(AvgDailyPhotoRate, id = \"Daily IR\", yAxis = 2, name = ifelse(input$meme_rate_display_overview == \"interaction rate\", \"Interaction Rate\", \"Share Rate\"), type = \"column\", color = \"#2580B9\", tooltip = list(valueSuffix = \" %\")) %>%\n      hc_scrollbar(enabled = FALSE) %>%\n      hc_rangeSelector(selected = ifelse(input$chart_time_meme_overview == \"month\", 5, 4)) %>%\n      hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = \"none\", dataGrouping = list(approximation = input$avg_total_meme_overview, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input$chart_time_meme_overview, list(1)))))) %>%\n      hc_tooltip(valueDecimals = ifelse(input$avg_total_meme_overview == \"average\", 2, 0)) %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n    })\n  })\n  \n  output$PlotOverview141 <- renderHighchart({\n    \n    input$plot_meme_overview1\n    isolate({ \n      \n      dates <- data.frame(created_time = DataPhotos$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$repost == 1 & DataPhotos$post_source_type == \"native\"),\"created_time\"], num = rep(1,nrow(DataPhotos[which(DataPhotos$repost == 1 & DataPhotos$post_source_type == \"native\"),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$original == 1 & DataPhotos$post_source_type == \"native\"),\"created_time\"], num = rep(1,nrow(DataPhotos[which(DataPhotos$original == 1 & DataPhotos$post_source_type == \"native\"),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      shares <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$post_source_type == \"shared\"),\"created_time\"], num = rep(1,nrow(DataPhotos[which(DataPhotos$post_source_type == \"shared\"),]))), by = \"created_time\", all = TRUE)\n      shares <- as.xts(shares[,\"num\"], order.by = shares[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9', '#C80D4A')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$chart_type_overview4) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$chart_type_overview4) %>%\n        hc_add_series(shares, name = \"Shares\", type = input$chart_type_overview4) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_overview3 == \"day\", 0, 2)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_overview4 == \"area\" || input$chart_type_overview4 == \"column\"){if(input$chart_stack_overview2 != \"none\"){input$chart_stack_overview4}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_overview4, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  \n  Plot_Page_Reach_Function <- function (viral_page_reach, organic_page_reach, page_reach, page_reach_us, input_chart_time, input_avg_total){\n    \n    hc <-highchart(type = \"stock\") %>%\n      # hc_colors(colores) %>%\n      hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>% \n      # hc_add_series(viral_page_reach, name = \"Viral Reach\", type = \"column\") %>%\n      # hc_add_series(organic_page_reach, name = \"Organic Reach\", type = \"column\") %>%\n      hc_add_series(page_reach, name = \"Reach\", type = \"column\", stacking = NULL) %>%\n      # hc_add_series(page_reach_us, name = \"US Reach\", type = \"line\", stacking = NULL) %>%\n      hc_scrollbar(enabled = FALSE) %>%\n      hc_rangeSelector(selected = ifelse(input_chart_time == \"day\", 0, 2)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\",  stacking = \"normal\", dataGrouping = list(approximation = input_avg_total, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input_chart_time, list(1)))))) %>%\n      hc_tooltip(valueDecimals = ifelse(input_avg_total == \"average\", 2, 0), pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>') %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  }\n  \n  Plot_Page_Reach_US_Function <- function (viral_page_reach, organic_page_reach, page_reach, page_reach_us, input_chart_time, input_avg_total){\n    \n    hc <-highchart(type = \"stock\") %>%\n      # hc_colors(colores) %>%\n      hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>% \n      # hc_add_series(viral_page_reach, name = \"Viral Reach\", type = \"column\") %>%\n      # hc_add_series(organic_page_reach, name = \"Organic Reach\", type = \"column\") %>%\n      # hc_add_series(page_reach, name = \"Reach\", type = \"column\", stacking = NULL) %>%\n      hc_add_series(page_reach_us, name = \"US Reach\", type = \"column\", stacking = NULL) %>%\n      hc_scrollbar(enabled = FALSE) %>%\n      hc_rangeSelector(selected = ifelse(input_chart_time == \"day\", 0, 2)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\",  stacking = \"normal\", dataGrouping = list(approximation = input_avg_total, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input_chart_time, list(1)))))) %>%\n      hc_tooltip(valueDecimals = ifelse(input_avg_total == \"average\", 2, 0), pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>') %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  }\n  \n  Plot_Page_Reach_Gender_Function <- function (page_reach_fem, page_reach_male, input_chart_time, input_avg_total){\n    \n    hc <-highchart(type = \"stock\") %>%\n      # hc_colors(colores) %>%\n      hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>% \n      hc_add_series(page_reach_fem, name = \"Female\", type = \"column\") %>%\n      hc_add_series(page_reach_male, name = \"Male\", type = \"column\") %>%\n      hc_scrollbar(enabled = FALSE) %>%\n      hc_rangeSelector(selected = ifelse(input_chart_time == \"day\", 0, 2)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\",  stacking = \"normal\", dataGrouping = list(approximation = input_avg_total, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input_chart_time, list(1)))))) %>%\n      hc_tooltip(valueDecimals = ifelse(input_avg_total == \"average\", 2, 0), pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>') %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  }\n  \n  Plot_Page_Reach_Age_Function <- function (page_reach_13_17, page_reach_18_24, page_reach_25_34, page_reach_35_44, page_reach_45_54, page_reach_55_64, page_reach_65, input_chart_time, input_avg_total){\n    \n    hc <-highchart(type = \"stock\") %>%\n      # hc_colors(colores) %>%\n      hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>% \n      hc_add_series(page_reach_13_17, name = \"13 - 17\", type = \"column\") %>%\n      hc_add_series(page_reach_18_24, name = \"18 - 24\", type = \"column\") %>%\n      hc_add_series(page_reach_25_34, name = \"25 - 34\", type = \"column\") %>%\n      hc_add_series(page_reach_35_44, name = \"35 - 44\", type = \"column\") %>%\n      hc_add_series(page_reach_45_54, name = \"45 - 54\", type = \"column\") %>%\n      hc_add_series(page_reach_55_64, name = \"55 - 64\", type = \"column\") %>%\n      hc_add_series(page_reach_65, name = \"65+\", type = \"column\") %>%\n      hc_scrollbar(enabled = FALSE) %>%\n      hc_rangeSelector(selected = ifelse(input_chart_time == \"day\", 0, 2)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\",  stacking = \"normal\", dataGrouping = list(approximation = input_avg_total, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input_chart_time, list(1)))))) %>%\n      hc_tooltip(valueDecimals = ifelse(input_avg_total == \"average\", 2, 0), pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>') %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  }\n  \n  output$PlotOverviewPageReach <- renderHighchart({\n    \n    input$plot_overview_page_reach\n    isolate({ \n      \n      input_chart_time <- input$chart_time_overview_page_reach\n      input_avg_total <- input$avg_total_overview_page_reach\n      \n      dates <- data.frame(created_time = WamPageData$date)\n\n      page_reach <- merge(dates, data.frame(created_time = WamPageData$date, reach = WamPageData$page_reach), by = \"created_time\", all = TRUE)\n      page_reach_us <- merge(dates, data.frame(created_time = WamPageData$date, reach_us = WamPageData$page_reach_US), by = \"created_time\", all = TRUE)\n      page_reach_non_us <- merge(dates, data.frame(created_time = WamPageData$date, reach_non_us = WamPageData$page_reach - WamPageData$page_reach_US), by = \"created_time\", all = TRUE)\n      page_reach_viral <- merge(dates, data.frame(created_time = WamPageData$date, viral_reach = WamPageData$page_reach_viral), by = \"created_time\", all = TRUE)\n      page_reach_organic <- merge(dates, data.frame(created_time = WamPageData$date, organic_reach = WamPageData$page_reach_organic), by = \"created_time\", all = TRUE)\n      \n      page_reach <- as.xts(page_reach[,\"reach\"], order.by = page_reach[,\"created_time\"])\n      page_reach_us <- as.xts(page_reach_us[,\"reach_us\"], order.by = page_reach_us[,\"created_time\"])\n      viral_page_reach <- as.xts(page_reach_viral[,\"viral_reach\"], order.by = page_reach_viral[,\"created_time\"])\n      organic_page_reach <- as.xts(page_reach_organic[,\"organic_reach\"], order.by = page_reach_organic[,\"created_time\"])\n      \n      \n      page_reach_fem <- merge(dates, data.frame(created_time = WamPageData$date, reach_fem = WamPageData$page_reach_F_13_17 + WamPageData$page_reach_F_18_24 + WamPageData$page_reach_F_25_34 + WamPageData$page_reach_F_35_44 + WamPageData$page_reach_F_45_54 + WamPageData$page_reach_F_55_64 + WamPageData$page_reach_F_65), by = \"created_time\", all = TRUE)\n      page_reach_male <- merge(dates, data.frame(created_time = WamPageData$date, reach_male = WamPageData$page_reach_M_13_17 + WamPageData$page_reach_M_18_24 + WamPageData$page_reach_M_25_34 + WamPageData$page_reach_M_35_44 + WamPageData$page_reach_M_45_54 + WamPageData$page_reach_M_55_64 + WamPageData$page_reach_M_65), by = \"created_time\", all = TRUE)\n      \n      page_reach_fem <- as.xts(page_reach_fem[,\"reach_fem\"], order.by = page_reach_fem[,\"created_time\"])\n      page_reach_male <- as.xts(page_reach_male[,\"reach_male\"], order.by = page_reach_male[,\"created_time\"])\n      \n      \n      page_reach_13_17 <- merge(dates, data.frame(created_time = WamPageData$date, reach = WamPageData$page_reach_F_13_17 + WamPageData$page_reach_M_13_17), by = \"created_time\", all = TRUE)\n      page_reach_18_24 <- merge(dates, data.frame(created_time = WamPageData$date, reach = WamPageData$page_reach_F_18_24 + WamPageData$page_reach_M_18_24), by = \"created_time\", all = TRUE)\n      page_reach_25_34 <- merge(dates, data.frame(created_time = WamPageData$date, reach = WamPageData$page_reach_F_25_34 + WamPageData$page_reach_M_25_34), by = \"created_time\", all = TRUE)\n      page_reach_35_44 <- merge(dates, data.frame(created_time = WamPageData$date, reach = WamPageData$page_reach_F_35_44 + WamPageData$page_reach_M_35_44), by = \"created_time\", all = TRUE)\n      page_reach_45_54 <- merge(dates, data.frame(created_time = WamPageData$date, reach = WamPageData$page_reach_F_45_54 + WamPageData$page_reach_M_45_54), by = \"created_time\", all = TRUE)\n      page_reach_55_64 <- merge(dates, data.frame(created_time = WamPageData$date, reach = WamPageData$page_reach_F_55_64 + WamPageData$page_reach_M_55_64), by = \"created_time\", all = TRUE)\n      page_reach_65 <- merge(dates, data.frame(created_time = WamPageData$date, reach = WamPageData$page_reach_F_65 + WamPageData$page_reach_M_65), by = \"created_time\", all = TRUE)\n      \n      page_reach_13_17 <- as.xts(page_reach_13_17[,\"reach\"], order.by = page_reach_13_17[,\"created_time\"])\n      page_reach_18_24 <- as.xts(page_reach_18_24[,\"reach\"], order.by = page_reach_18_24[,\"created_time\"])\n      page_reach_25_34 <- as.xts(page_reach_25_34[,\"reach\"], order.by = page_reach_25_34[,\"created_time\"])\n      page_reach_35_44 <- as.xts(page_reach_35_44[,\"reach\"], order.by = page_reach_35_44[,\"created_time\"])\n      page_reach_45_54 <- as.xts(page_reach_45_54[,\"reach\"], order.by = page_reach_45_54[,\"created_time\"])\n      page_reach_55_64 <- as.xts(page_reach_55_64[,\"reach\"], order.by = page_reach_55_64[,\"created_time\"])\n      page_reach_65 <- as.xts(page_reach_65[,\"reach\"], order.by = page_reach_65[,\"created_time\"])\n      \n      \n      if(input$reach_chart_selectize == \"Reach\"){\n        \n        Plot_Page_Reach_Function(viral_page_reach, organic_page_reach, page_reach, page_reach_us, input_chart_time, input_avg_total)\n      }\n      else if(input$reach_chart_selectize == \"Reach by Gender\") {\n        Plot_Page_Reach_Gender_Function(page_reach_fem, page_reach_male, input_chart_time, input_avg_total)\n        \n      }\n      else {\n        Plot_Page_Reach_Age_Function(page_reach_13_17, page_reach_18_24, page_reach_25_34, page_reach_35_44, page_reach_45_54, page_reach_55_64, page_reach_65, input_chart_time, input_avg_total)\n        \n      }\n      \n     \n    })\n  })\n  \n  \n  # 2.2. Overview - Bad Hombres -------------------------------------------------------------------------------------------------------------------\n  \n  output$BHPlotOverview11 <- renderHighchart({\n    \n    input$bh_plot_article_overview\n    isolate({   \n      \n      AvgDailyArticleReach <- as.xts(DataArticlesBH$post_reach, order.by = DataArticlesBH$created_time)\n      AvgDailyArticleLC <- as.xts(DataArticlesBH$link_clicks, order.by = DataArticlesBH$created_time)\n      \n      if(input$bh_variable_display_overview == \"link clicks\"){\n        AvgDailyArticleVariable <- as.xts(DataArticlesBH$link_clicks, order.by = DataArticlesBH$created_time)\n      } else {\n        AvgDailyArticleVariable <- as.xts(DataArticlesBH$total_comments+DataArticlesBH$total_likes+DataArticles$total_shares, order.by = DataArticlesBH$created_time)\n      }\n      \n      if(input$bh_rate_display_overview == \"ctr\"){\n        AvgDailyArticleRate <- as.xts(as.numeric(formatC(DataArticlesBH$ctr*100, format = \"f\", digits = 2)), order.by = DataArticlesBH$created_time)\n      } else {\n        AvgDailyArticleRate <- as.xts(as.numeric(formatC(DataArticlesBH$interaction_rate*100, format = \"f\", digits = 2)), order.by = DataArticlesBH$created_time)\n      }\n      \n      sufix <- ifelse(input$bh_avg_total_article_overview == \"average\", \"Avg.\", \"Total\")\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_yAxis_multiples(\n          list(offset = 30, title = list(text = paste(sufix,\"Reach\", sep = \" \")), height = \"45%\", top = \"0%\"),\n          list(offset = 30, title = list(text = paste(sufix, ifelse(input$bh_variable_display_overview == \"link clicks\", \"Link Clicks\", \"Interactions\"), sep = \" \")), height = \"35%\", top = \"47.5%\"),\n          list(offset = 30, title = list(text = ifelse(input$bh_avg_total_article_overview == \"average\", ifelse(input$bh_rate_display_overview == \"ctr\", \"Avg. CTR\", \"Avg. IR\"), \"Ignore!\")), height = \"15%\", top = \"85%\", labels = list(format = \"{value} %\"))) %>% \n        \n        hc_add_series(AvgDailyArticleReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0, color = \"#D73027\", type = \"area\") %>%\n        hc_add_series(AvgDailyArticleVariable, id = \"Daily LC\", yAxis = 1, name = ifelse(input$bh_variable_display_overview == \"link clicks\", \"Link Clicks\", \"Interactions\"), color = \"#F46D43\", type = \"area\") %>%\n        hc_add_series(AvgDailyArticleRate, id = \"Daily CTR\", yAxis = 2, name = ifelse(input$bh_rate_display_overview == \"ctr\", \"CTR\", \"IR\"), type = \"column\", color = \"#2580B9\", tooltip = list(valueSuffix = \" %\")) %>% \n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$bh_chart_time_article_overview == \"month\", 5, 4)) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = \"none\", dataGrouping = list(approximation = input$bh_avg_total_article_overview, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input$bh_chart_time_article_overview, list(1)))))) %>%\n        hc_tooltip(valueDecimals = ifelse(input$bh_avg_total_article_overview == \"average\", 2, 0)) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  output$BHPlotOverview111 <- renderHighchart({\n    \n    input$bh_plot_article_overview1\n    isolate({ \n      \n      dates <- data.frame(created_time = DataArticlesBH$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = DataArticlesBH[which(DataArticlesBH$repost == 1),\"created_time\"], num = rep(1,nrow(DataArticlesBH[which(DataArticlesBH$repost == 1),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = DataArticlesBH[which(DataArticlesBH$original == 1),\"created_time\"], num = rep(1,nrow(DataArticlesBH[which(DataArticlesBH$original == 1),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$bh_chart_type_overview1) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$bh_chart_type_overview1) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$bh_chart_time_overview1 == \"day\", 0, 2)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$bh_chart_type_overview1 == \"area\" || input$bh_chart_type_overview1 == \"column\"){if(input$bh_chart_stack_overview1 != \"none\"){input$bh_chart_stack_overview1}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$bh_chart_time_overview1, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$BHPlotOverview12 <- renderHighchart({\n    \n    input$bh_plot_video_overview\n    isolate({  \n      \n      AvgDailyVideoReach <- as.xts(DataVideosBH[which(DataVideosBH$video_meme == 0),]$post_reach, order.by = DataVideosBH[which(DataVideosBH$video_meme == 0),]$created_time)\n      \n      if(input$bh_video_variable_display_overview == \"video views\"){\n        AvgDailyVideoVariable <- as.xts(DataVideosBH[which(DataVideosBH$video_meme == 0),]$post_video_views, order.by = DataVideosBH[which(DataVideosBH$video_meme == 0),]$created_time)\n      } else {\n        AvgDailyVideoVariable <- as.xts(DataVideosBH[which(DataVideosBH$video_meme == 0),]$total_comments+DataVideosBH[which(DataVideosBH$video_meme == 0),]$total_likes+DataVideosBH[which(DataVideosBH$video_meme == 0),]$total_shares , order.by = DataVideosBH[which(DataVideosBH$video_meme == 0),]$created_time)\n      }\n      \n      if(input$bh_video_rate_display_overview == \"interaction rate\"){\n        AvgDailyVideoRate <- as.xts(as.numeric(formatC(DataVideosBH[which(DataVideosBH$video_meme == 0),]$interaction_rate*100, format = \"f\", digits = 2)), order.by = DataVideosBH[which(DataVideosBH$video_meme == 0),]$created_time)\n      } else {\n        AvgDailyVideoRate <- as.xts(as.numeric(formatC((DataVideosBH[which(DataVideosBH$video_meme == 0),]$post_video_views/DataVideosBH[which(DataVideosBH$video_meme == 0),]$post_reach)*100, format = \"f\", digits = 2)), order.by = DataVideosBH[which(DataVideosBH$video_meme == 0),]$created_time)\n      }\n      \n      sufix <- ifelse(input$bh_avg_total_video_overview == \"average\", \"Avg.\", \"Total\")\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_yAxis_multiples(\n          list(offset = 30, title = list(text = paste(sufix,\"Reach\", sep = \" \")), height = \"45%\", top = \"0%\"),\n          list(offset = 30, title = list(text = paste(sufix, ifelse(input$bh_video_variable_display_overview == \"video views\", \"Video Views\", \"Interactions\"), sep = \" \")), height = \"35%\", top = \"47.5%\"),\n          list(offset = 30, title = list(text = ifelse(input$bh_avg_total_video_overview == \"average\", ifelse(input$bh_video_rate_display_overview == \"interaction rate\", \"Avg. IR\", \"Avg. VR\"), \"Ignore!\")), height = \"15%\", top = \"85%\", labels = list(format = \"{value} %\"))\n        ) %>%\n        \n        hc_add_series(AvgDailyVideoReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0, color = \"#D73027\", type = \"area\") %>%\n        hc_add_series(AvgDailyVideoVariable, id = \"Daily Video Views\", yAxis = 1, name = ifelse(input$bh_video_variable_display_overview == \"video views\", \"Video Views\", \"Interactions\"), color = \"#F46D43\", type = \"area\") %>%\n        hc_add_series(AvgDailyVideoRate, id = \"Daily IR\", yAxis = 2, name = ifelse(input$bh_video_rate_display_overview == \"interaction rate\", \"IR\", \"VR\"), type = \"column\", color = \"#2580B9\", tooltip = list(valueSuffix = \" %\")) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$bh_chart_time_video_overview == \"month\", 5, 4)) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = \"none\", dataGrouping = list(approximation = input$bh_avg_total_video_overview, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input$bh_chart_time_video_overview, list(1)))))) %>%\n        hc_tooltip(valueDecimals = ifelse(input$bh_avg_total_video_overview == \"average\", 2, 0)) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  output$BHPlotOverview121 <- renderHighchart({\n    \n    input$bh_plot_video_overview1\n    isolate({ \n      \n      dates <- data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 0),]$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$repost == 1),\"created_time\"], num = rep(1,nrow(DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$repost == 1),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 1),\"created_time\"], num = rep(1,nrow(DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 1),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$bh_chart_type_overview2) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$bh_chart_type_overview2) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$bh_chart_time_overview2 == \"day\", 0, 2)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$bh_chart_type_overview2 == \"area\" || input$bh_chart_type_overview2 == \"column\"){if(input$bh_chart_stack_overview2 != \"none\"){input$bh_chart_stack_overview2}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$bh_chart_time_overview2, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$BHPlotOverview13 <- renderHighchart({\n    \n    input$bh_plot_videomeme_overview\n    isolate({  \n      \n      AvgDailyVideoReach <- as.xts(DataVideosBH[which(DataVideosBH$video_meme == 1),]$post_reach, order.by = DataVideosBH[which(DataVideosBH$video_meme == 1),]$created_time)\n      \n      if(input$bh_videomeme_variable_display_overview == \"video views\"){\n        AvgDailyVideoVariable <- as.xts(DataVideosBH[which(DataVideosBH$video_meme == 1),]$post_video_views, order.by = DataVideosBH[which(DataVideosBH$video_meme == 1),]$created_time)\n      } else {\n        AvgDailyVideoVariable <- as.xts(DataVideosBH[which(DataVideosBH$video_meme == 1),]$total_comments+DataVideosBH[which(DataVideosBH$video_meme == 1),]$total_likes+DataVideosBH[which(DataVideosBH$video_meme == 1),]$total_shares , order.by = DataVideosBH[which(DataVideosBH$video_meme == 1),]$created_time)\n      }\n      \n      if(input$bh_videomeme_rate_display_overview == \"interaction rate\"){\n        AvgDailyVideoRate <- as.xts(as.numeric(formatC(DataVideosBH[which(DataVideosBH$video_meme == 1),]$interaction_rate*100, format = \"f\", digits = 2)), order.by = DataVideosBH[which(DataVideosBH$video_meme == 1),]$created_time)\n      } else {\n        AvgDailyVideoRate <- as.xts(as.numeric(formatC((DataVideosBH[which(DataVideosBH$video_meme == 1),]$post_video_views/DataVideosBH[which(DataVideosBH$video_meme == 1),]$post_reach)*100, format = \"f\", digits = 2)), order.by = DataVideosBH[which(DataVideosBH$video_meme == 1),]$created_time)\n      }\n      \n      sufix <- ifelse(input$bh_avg_total_videomeme_overview == \"average\", \"Avg.\", \"Total\")\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_yAxis_multiples(\n          list(offset = 30, title = list(text = paste(sufix,\"Reach\", sep = \" \")), height = \"45%\", top = \"0%\"),\n          list(offset = 30, title = list(text = paste(sufix, ifelse(input$bh_videomeme_variable_display_overview == \"video views\", \"Video Views\", \"Interactions\"), sep = \" \")), height = \"35%\", top = \"47.5%\"),\n          list(offset = 30, title = list(text = ifelse(input$bh_avg_total_videomeme_overview == \"average\", ifelse(input$bh_videomeme_rate_display_overview == \"interaction rate\", \"Avg. IR\", \"Avg. VR\"), \"Ignore!\")), height = \"15%\", top = \"85%\", labels = list(format = \"{value} %\"))\n        ) %>%\n        hc_add_series(AvgDailyVideoReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0, color = \"#D73027\", type = \"area\") %>%\n        hc_add_series(AvgDailyVideoVariable, id = \"Daily Video Views\", yAxis = 1, name = ifelse(input$bh_videomeme_variable_display_overview == \"video views\", \"Video Views\", \"Interactions\"), color = \"#F46D43\", type = \"area\") %>%\n        hc_add_series(AvgDailyVideoRate, id = \"Daily IR\", yAxis = 2, name = ifelse(input$bh_videomeme_rate_display_overview == \"interaction rate\", \"Interaction Rate\", \"Views Rate\"), type = \"column\", color = \"#2580B9\", tooltip = list(valueSuffix = \" %\")) %>%\n        \n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$bh_chart_time_videomeme_overview == \"month\", 5, 4)) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = \"none\", dataGrouping = list(approximation = input$bh_avg_total_videomeme_overview, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input$bh_chart_time_videomeme_overview, list(1)))))) %>%\n        hc_tooltip(valueDecimals = ifelse(input$bh_avg_total_videomeme_overview == \"average\", 2, 0)) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  output$BHPlotOverview131 <- renderHighchart({\n    \n    input$bh_plot_videomeme_overview1\n    isolate({ \n      \n      dates <- data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 1),]$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$repost == 1),\"created_time\"], num = rep(1,nrow(DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$repost == 1),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 1),\"created_time\"], num = rep(1,nrow(DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 1),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$bh_chart_type_overview3) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$bh_chart_type_overview3) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$bh_chart_time_overview3 == \"day\", 0, 2)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$bh_chart_type_overview3 == \"area\" || input$bh_chart_type_overview3 == \"column\"){if(input$bh_chart_stack_overview2 != \"none\"){input$bh_chart_stack_overview3}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$bh_chart_time_overview3, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$BHPlotOverview14 <- renderHighchart({\n    \n    input$bh_plot_meme_overview\n    isolate({  \n      \n      AvgDailyPhotoReach <- as.xts(DataPhotosBH$post_reach, order.by = DataPhotosBH$created_time)\n      AvgDailyPhotoFanReach <- as.xts(DataPhotosBH$post_reach_fan_unique, order.by = DataPhotosBH$created_time)\n      AvgDailyPhotoIR <- as.xts(as.numeric(formatC(DataPhotosBH$interaction_rate*100, format = \"f\", digits = 2)), order.by = DataPhotosBH$created_time)\n      \n      if(input$bh_meme_variable_display_overview == \"fan reach\"){\n        AvgDailyPhotoVariable <- as.xts(DataPhotosBH$post_reach_fan_unique, order.by = DataPhotosBH$created_time)\n      } else {\n        AvgDailyPhotoVariable <- as.xts(DataPhotosBH$post_reach_viral_unique, order.by = DataPhotosBH$created_time)\n      }\n      \n      if(input$bh_meme_rate_display_overview == \"interaction rate\"){\n        AvgDailyPhotoRate <- as.xts(as.numeric(formatC(DataPhotosBH$interaction_rate*100, format = \"f\", digits = 2)), order.by = DataPhotosBH$created_time)\n      } else {\n        AvgDailyPhotoRate <- as.xts(as.numeric(formatC((DataPhotosBH$total_shares/(DataPhotosBH$total_comments+DataPhotosBH$total_likes+DataPhotosBH$total_shares))*100, format = \"f\", digits = 2)), order.by = DataPhotosBH$created_time)\n      }\n      \n      sufix <- ifelse(input$bh_avg_total_meme_overview == \"average\", \"Avg.\", \"Total\")\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_yAxis_multiples(\n          list(offset = 30, title = list(text = paste(sufix,\"Reach\", sep = \" \")), height = \"45%\", top = \"0%\"),\n          list(offset = 30, title = list(text = paste(sufix, ifelse(input$bh_meme_variable_display_overview == \"fan reach\", \"Fan Reach\", \"Viral Reach\"), sep = \" \")), height = \"35%\", top = \"47.5%\"),\n          list(offset = 30, title = list(text = ifelse(input$bh_avg_total_videomeme_overview == \"average\", ifelse(input$bh_meme_rate_display_overview == \"interaction rate\", \"Avg. IR\", \"Avg. Share Rate\"), \"Ignore!\")), height = \"15%\", top = \"85%\", labels = list(format = \"{value} %\"))\n        ) %>%\n        \n        hc_add_series(AvgDailyPhotoReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0, color = \"#D73027\", type = \"area\") %>%\n        hc_add_series(AvgDailyPhotoVariable, id = \"Daily Fan Reach\", yAxis = 1, name = ifelse(input$bh_meme_variable_display_overview == \"fan reach\", \"Fan Reach\", \"Viral Reach\"), color = \"#F46D43\", type = \"area\") %>%\n        hc_add_series(AvgDailyPhotoRate, id = \"Daily IR\", yAxis = 2, name = ifelse(input$bh_meme_rate_display_overview == \"interaction rate\", \"Interaction Rate\", \"Share Rate\"), type = \"column\", color = \"#2580B9\", tooltip = list(valueSuffix = \" %\")) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$bh_chart_time_meme_overview == \"month\", 5, 4)) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = \"none\", dataGrouping = list(approximation = input$bh_avg_total_meme_overview, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input$bh_chart_time_meme_overview, list(1)))))) %>%\n        hc_tooltip(valueDecimals = ifelse(input$bh_avg_total_meme_overview == \"average\", 2, 0)) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  output$BHPlotOverview141 <- renderHighchart({\n    \n    input$bh_plot_meme_overview1\n    isolate({ \n      \n      dates <- data.frame(created_time = DataPhotosBH$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = DataPhotosBH[which(DataPhotosBH$repost == 1),\"created_time\"], num = rep(1,nrow(DataPhotosBH[which(DataPhotosBH$repost == 1),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = DataPhotosBH[which(DataPhotosBH$original == 1),\"created_time\"], num = rep(1,nrow(DataPhotosBH[which(DataPhotosBH$original == 1),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$bh_chart_type_overview4) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$bh_chart_type_overview4) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$bh_chart_time_overview3 == \"day\", 0, 2)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$bh_chart_type_overview4 == \"area\" || input$bh_chart_type_overview4 == \"column\"){if(input$bh_chart_stack_overview2 != \"none\"){input$bh_chart_stack_overview4}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$bh_chart_time_overview4, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  \n  output$BHPlotOverviewPageReach <- renderHighchart({\n    \n    input$bh_plot_overview_page_reach\n    isolate({ \n      \n      dates <- data.frame(created_time = BHPageData$date)\n      \n      page_reach <- merge(dates, data.frame(created_time = BHPageData$date, reach = BHPageData$page_reach), by = \"created_time\", all = TRUE)\n      \n      page_reach_us <- merge(dates, data.frame(created_time = BHPageData$date, reach_us = BHPageData$page_reach_US), by = \"created_time\", all = TRUE)\n      \n      page_reach_viral <- merge(dates, data.frame(created_time = BHPageData$date, viral_reach = BHPageData$page_reach_viral), by = \"created_time\", all = TRUE)\n      \n      page_reach_organic <- merge(dates, data.frame(created_time = BHPageData$date, organic_reach = BHPageData$page_reach_organic), by = \"created_time\", all = TRUE)\n      \n      page_reach <- as.xts(page_reach[,\"reach\"], order.by = page_reach[,\"created_time\"])\n      \n      page_reach_us <- as.xts(page_reach_us[,\"reach_us\"], order.by = page_reach_us[,\"created_time\"])\n      \n      viral_page_reach <- as.xts(page_reach_viral[,\"viral_reach\"], order.by = page_reach_viral[,\"created_time\"])\n      \n      organic_page_reach <- as.xts(page_reach_organic[,\"organic_reach\"], order.by = page_reach_organic[,\"created_time\"])\n      \n      # input$bh_chart_type_overview_page_reach\n      \n      hc <-highchart(type = \"stock\") %>%\n        # hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>% \n        hc_add_series(viral_page_reach, name = \"Viral Reach\", type = \"column\") %>%\n        hc_add_series(organic_page_reach, name = \"Organic Reach\", type = \"column\") %>%\n        hc_add_series(page_reach, name = \"Reach\", type = \"line\", stacking = NULL) %>%\n        hc_add_series(page_reach_us, name = \"US Reach\", type = \"line\", stacking = NULL) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$bh_chart_time_overview_page_reach == \"day\", 0, 2)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\",  stacking = \"normal\", dataGrouping = list(approximation = input$bh_avg_total_overview_page_reach, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input$bh_chart_time_overview_page_reach, list(1)))))) %>%\n        hc_tooltip(valueDecimals = ifelse(input$bh_avg_total_overview_page_reach == \"average\", 2, 0)) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$BHPlotOverviewPageReachDemo <- renderHighchart({\n    \n    input$bh_plot_overview_page_reach_demo\n    isolate({ \n      \n      dates <- data.frame(created_time = BHPageData$date)\n      \n      page_reach_fem <- merge(dates, data.frame(created_time = BHPageData$date, reach_fem = BHPageData$page_reach_F_13_17 + BHPageData$page_reach_F_18_24 + BHPageData$page_reach_F_25_34 + BHPageData$page_reach_F_35_44 + BHPageData$page_reach_F_45_54 + BHPageData$page_reach_F_55_64 + BHPageData$page_reach_F_65), by = \"created_time\", all = TRUE)\n      \n      page_reach_male <- merge(dates, data.frame(created_time = BHPageData$date, reach_male = BHPageData$page_reach_M_13_17 + BHPageData$page_reach_M_18_24 + BHPageData$page_reach_M_25_34 + BHPageData$page_reach_M_35_44 + BHPageData$page_reach_M_45_54 + BHPageData$page_reach_M_55_64 + BHPageData$page_reach_M_65), by = \"created_time\", all = TRUE)\n      \n      page_reach_fem <- as.xts(page_reach_fem[,\"reach_fem\"], order.by = page_reach_fem[,\"created_time\"])\n      \n      page_reach_male <- as.xts(page_reach_male[,\"reach_male\"], order.by = page_reach_male[,\"created_time\"])\n      \n      hc <-highchart(type = \"stock\") %>%\n        # hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>% \n        hc_add_series(page_reach_fem, name = \"Female\", type = \"column\") %>%\n        hc_add_series(page_reach_male, name = \"Male\", type = \"column\") %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$bh_chart_time_overview_page_reach_demo == \"day\", 0, 2)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\",  stacking = \"normal\", dataGrouping = list(approximation = input$bh_avg_total_overview_page_reach_demo, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input$bh_chart_time_overview_page_reach_demo, list(1)))))) %>%\n        hc_tooltip(valueDecimals = ifelse(input$bh_avg_total_overview_page_reach_demo == \"average\", 2, 0), pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>') %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$BHPlotOverviewPageReachDemoAge <- renderHighchart({\n    \n    input$bh_plot_overview_page_reach_demo_age\n    isolate({ \n      \n      dates <- data.frame(created_time = BHPageData$date)\n      \n      page_reach_13_17 <- merge(dates, data.frame(created_time = BHPageData$date, reach = BHPageData$page_reach_F_13_17 + BHPageData$page_reach_M_13_17), by = \"created_time\", all = TRUE)\n      \n      page_reach_18_24 <- merge(dates, data.frame(created_time = BHPageData$date, reach = BHPageData$page_reach_F_18_24 + BHPageData$page_reach_M_18_24), by = \"created_time\", all = TRUE)\n      \n      page_reach_25_34 <- merge(dates, data.frame(created_time = BHPageData$date, reach = BHPageData$page_reach_F_25_34 + BHPageData$page_reach_M_25_34), by = \"created_time\", all = TRUE)\n      \n      page_reach_35_44 <- merge(dates, data.frame(created_time = BHPageData$date, reach = BHPageData$page_reach_F_35_44 + BHPageData$page_reach_M_35_44), by = \"created_time\", all = TRUE)\n      \n      page_reach_45_54 <- merge(dates, data.frame(created_time = BHPageData$date, reach = BHPageData$page_reach_F_45_54 + BHPageData$page_reach_M_45_54), by = \"created_time\", all = TRUE)\n      \n      page_reach_55_64 <- merge(dates, data.frame(created_time = BHPageData$date, reach = BHPageData$page_reach_F_55_64 + BHPageData$page_reach_M_55_64), by = \"created_time\", all = TRUE)\n      \n      page_reach_65 <- merge(dates, data.frame(created_time = BHPageData$date, reach = BHPageData$page_reach_F_65 + BHPageData$page_reach_M_65), by = \"created_time\", all = TRUE)\n      \n      page_reach_13_17 <- as.xts(page_reach_13_17[,\"reach\"], order.by = page_reach_13_17[,\"created_time\"])\n      page_reach_18_24 <- as.xts(page_reach_18_24[,\"reach\"], order.by = page_reach_18_24[,\"created_time\"])\n      page_reach_25_34 <- as.xts(page_reach_25_34[,\"reach\"], order.by = page_reach_25_34[,\"created_time\"])\n      page_reach_35_44 <- as.xts(page_reach_35_44[,\"reach\"], order.by = page_reach_35_44[,\"created_time\"])\n      page_reach_45_54 <- as.xts(page_reach_45_54[,\"reach\"], order.by = page_reach_45_54[,\"created_time\"])\n      page_reach_55_64 <- as.xts(page_reach_55_64[,\"reach\"], order.by = page_reach_55_64[,\"created_time\"])\n      page_reach_65 <- as.xts(page_reach_65[,\"reach\"], order.by = page_reach_65[,\"created_time\"])\n      \n      hc <-highchart(type = \"stock\") %>%\n        # hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>% \n        hc_add_series(page_reach_13_17, name = \"13 - 17\", type = \"column\") %>%\n        hc_add_series(page_reach_18_24, name = \"18 - 24\", type = \"column\") %>%\n        hc_add_series(page_reach_25_34, name = \"25 - 34\", type = \"column\") %>%\n        hc_add_series(page_reach_35_44, name = \"35 - 44\", type = \"column\") %>%\n        hc_add_series(page_reach_45_54, name = \"45 - 54\", type = \"column\") %>%\n        hc_add_series(page_reach_55_64, name = \"55 - 64\", type = \"column\") %>%\n        hc_add_series(page_reach_65, name = \"65+\", type = \"column\") %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$bh_chart_time_overview_page_reach_demo_age == \"day\", 0, 2)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\",  stacking = \"normal\", dataGrouping = list(approximation = input$bh_avg_total_overview_page_reach_demo_age, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input$bh_chart_time_overview_page_reach_demo_age, list(1)))))) %>%\n        hc_tooltip(valueDecimals = ifelse(input$bh_avg_total_overview_page_reach_demo_age == \"average\", 2, 0), pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>') %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  # 2.2. Overview - Fierce -------------------------------------------------------------------------------------------------------------------\n  \n  output$FCPlotOverview11 <- renderHighchart({\n    \n    input$fc_plot_article_overview\n    isolate({   \n      \n      AvgDailyArticleReach <- as.xts(DataArticlesFC$post_reach, order.by = DataArticlesFC$created_time)\n      AvgDailyArticleLC <- as.xts(DataArticlesFC$link_clicks, order.by = DataArticlesFC$created_time)\n      \n      if(input$fc_variable_display_overview == \"link clicks\"){\n        AvgDailyArticleVariable <- as.xts(DataArticlesFC$link_clicks, order.by = DataArticlesFC$created_time)\n      } else {\n        AvgDailyArticleVariable <- as.xts(DataArticlesFC$total_comments+DataArticlesFC$total_likes+DataArticles$total_shares, order.by = DataArticlesFC$created_time)\n      }\n      \n      if(input$fc_rate_display_overview == \"ctr\"){\n        AvgDailyArticleRate <- as.xts(as.numeric(formatC(DataArticlesFC$ctr*100, format = \"f\", digits = 2)), order.by = DataArticlesFC$created_time)\n      } else {\n        AvgDailyArticleRate <- as.xts(as.numeric(formatC(DataArticlesFC$interaction_rate*100, format = \"f\", digits = 2)), order.by = DataArticlesFC$created_time)\n      }\n      \n      sufix <- ifelse(input$fc_avg_total_article_overview == \"average\", \"Avg.\", \"Total\")\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_yAxis_multiples(\n          list(offset = 30, title = list(text = paste(sufix,\"Reach\", sep = \" \")), height = \"45%\", top = \"0%\"),\n          list(offset = 30, title = list(text = paste(sufix, ifelse(input$fc_variable_display_overview == \"link clicks\", \"Link Clicks\", \"Interactions\"), sep = \" \")), height = \"35%\", top = \"47.5%\"),\n          list(offset = 30, title = list(text = ifelse(input$fc_avg_total_article_overview == \"average\", ifelse(input$fc_rate_display_overview == \"ctr\", \"Avg. CTR\", \"Avg. IR\"), \"Ignore!\")), height = \"15%\", top = \"85%\", labels = list(format = \"{value} %\"))) %>% \n        \n        hc_add_series(AvgDailyArticleReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0, color = \"#D73027\", type = \"area\") %>%\n        hc_add_series(AvgDailyArticleVariable, id = \"Daily LC\", yAxis = 1, name = ifelse(input$fc_variable_display_overview == \"link clicks\", \"Link Clicks\", \"Interactions\"), color = \"#F46D43\", type = \"area\") %>%\n        hc_add_series(AvgDailyArticleRate, id = \"Daily CTR\", yAxis = 2, name = ifelse(input$fc_rate_display_overview == \"ctr\", \"CTR\", \"IR\"), type = \"column\", color = \"#2580B9\", tooltip = list(valueSuffix = \" %\")) %>% \n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$fc_chart_time_article_overview == \"month\", 5, 4)) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = \"none\", dataGrouping = list(approximation = input$fc_avg_total_article_overview, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input$fc_chart_time_article_overview, list(1)))))) %>%\n        hc_tooltip(valueDecimals = ifelse(input$fc_avg_total_article_overview == \"average\", 2, 0)) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  output$FCPlotOverview111 <- renderHighchart({\n    \n    input$fc_plot_article_overview1\n    isolate({ \n      \n      dates <- data.frame(created_time = DataArticlesFC$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = DataArticlesFC[which(DataArticlesFC$repost == 1),\"created_time\"], num = rep(1,nrow(DataArticlesFC[which(DataArticlesFC$repost == 1),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = DataArticlesFC[which(DataArticlesFC$original == 1),\"created_time\"], num = rep(1,nrow(DataArticlesFC[which(DataArticlesFC$original == 1),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$fc_chart_type_overview1) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$fc_chart_type_overview1) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$fc_chart_time_overview1 == \"day\", 0, 2)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$fc_chart_type_overview1 == \"area\" || input$fc_chart_type_overview1 == \"column\"){if(input$fc_chart_stack_overview1 != \"none\"){input$fc_chart_stack_overview1}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$fc_chart_time_overview1, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$FCPlotOverview12 <- renderHighchart({\n    \n    input$fc_plot_video_overview\n    isolate({  \n      \n      AvgDailyVideoReach <- as.xts(DataVideosFC[which(DataVideosFC$video_meme == 0),]$post_reach, order.by = DataVideosFC[which(DataVideosFC$video_meme == 0),]$created_time)\n      \n      if(input$fc_video_variable_display_overview == \"video views\"){\n        AvgDailyVideoVariable <- as.xts(DataVideosFC[which(DataVideosFC$video_meme == 0),]$post_video_views, order.by = DataVideosFC[which(DataVideosFC$video_meme == 0),]$created_time)\n      } else {\n        AvgDailyVideoVariable <- as.xts(DataVideosFC[which(DataVideosFC$video_meme == 0),]$total_comments+DataVideosFC[which(DataVideosFC$video_meme == 0),]$total_likes+DataVideosFC[which(DataVideosFC$video_meme == 0),]$total_shares , order.by = DataVideosFC[which(DataVideosFC$video_meme == 0),]$created_time)\n      }\n      \n      if(input$fc_video_rate_display_overview == \"interaction rate\"){\n        AvgDailyVideoRate <- as.xts(as.numeric(formatC(DataVideosFC[which(DataVideosFC$video_meme == 0),]$interaction_rate*100, format = \"f\", digits = 2)), order.by = DataVideosFC[which(DataVideosFC$video_meme == 0),]$created_time)\n      } else {\n        AvgDailyVideoRate <- as.xts(as.numeric(formatC((DataVideosFC[which(DataVideosFC$video_meme == 0),]$post_video_views/DataVideosFC[which(DataVideosFC$video_meme == 0),]$post_reach)*100, format = \"f\", digits = 2)), order.by = DataVideosFC[which(DataVideosFC$video_meme == 0),]$created_time)\n      }\n      \n      sufix <- ifelse(input$fc_avg_total_video_overview == \"average\", \"Avg.\", \"Total\")\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_yAxis_multiples(\n          list(offset = 30, title = list(text = paste(sufix,\"Reach\", sep = \" \")), height = \"45%\", top = \"0%\"),\n          list(offset = 30, title = list(text = paste(sufix, ifelse(input$fc_video_variable_display_overview == \"video views\", \"Video Views\", \"Interactions\"), sep = \" \")), height = \"35%\", top = \"47.5%\"),\n          list(offset = 30, title = list(text = ifelse(input$fc_avg_total_video_overview == \"average\", ifelse(input$fc_video_rate_display_overview == \"interaction rate\", \"Avg. IR\", \"Avg. VR\"), \"Ignore!\")), height = \"15%\", top = \"85%\", labels = list(format = \"{value} %\"))\n        ) %>%\n        \n        hc_add_series(AvgDailyVideoReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0, color = \"#D73027\", type = \"area\") %>%\n        hc_add_series(AvgDailyVideoVariable, id = \"Daily Video Views\", yAxis = 1, name = ifelse(input$fc_video_variable_display_overview == \"video views\", \"Video Views\", \"Interactions\"), color = \"#F46D43\", type = \"area\") %>%\n        hc_add_series(AvgDailyVideoRate, id = \"Daily IR\", yAxis = 2, name = ifelse(input$fc_video_rate_display_overview == \"interaction rate\", \"IR\", \"VR\"), type = \"column\", color = \"#2580B9\", tooltip = list(valueSuffix = \" %\")) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$fc_chart_time_video_overview == \"month\", 5, 4)) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = \"none\", dataGrouping = list(approximation = input$fc_avg_total_video_overview, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input$fc_chart_time_video_overview, list(1)))))) %>%\n        hc_tooltip(valueDecimals = ifelse(input$fc_avg_total_video_overview == \"average\", 2, 0)) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  output$FCPlotOverview121 <- renderHighchart({\n    \n    input$fc_plot_video_overview1\n    isolate({ \n      \n      dates <- data.frame(created_time = DataVideosFC[which(DataVideosFC$video_meme == 0),]$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = DataVideosFC[which(DataVideosFC$video_meme == 0 & DataVideosFC$repost == 1),\"created_time\"], num = rep(1,nrow(DataVideosFC[which(DataVideosFC$video_meme == 0 & DataVideosFC$repost == 1),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = DataVideosFC[which(DataVideosFC$video_meme == 0 & DataVideosFC$original == 1),\"created_time\"], num = rep(1,nrow(DataVideosFC[which(DataVideosFC$video_meme == 0 & DataVideosFC$original == 1),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$fc_chart_type_overview2) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$fc_chart_type_overview2) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$fc_chart_time_overview2 == \"day\", 0, 2)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$fc_chart_type_overview2 == \"area\" || input$fc_chart_type_overview2 == \"column\"){if(input$fc_chart_stack_overview2 != \"none\"){input$fc_chart_stack_overview2}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$fc_chart_time_overview2, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$FCPlotOverview13 <- renderHighchart({\n    \n    input$fc_plot_videomeme_overview\n    isolate({  \n      \n      AvgDailyVideoReach <- as.xts(DataVideosFC[which(DataVideosFC$video_meme == 1),]$post_reach, order.by = DataVideosFC[which(DataVideosFC$video_meme == 1),]$created_time)\n      \n      if(input$fc_videomeme_variable_display_overview == \"video views\"){\n        AvgDailyVideoVariable <- as.xts(DataVideosFC[which(DataVideosFC$video_meme == 1),]$post_video_views, order.by = DataVideosFC[which(DataVideosFC$video_meme == 1),]$created_time)\n      } else {\n        AvgDailyVideoVariable <- as.xts(DataVideosFC[which(DataVideosFC$video_meme == 1),]$total_comments+DataVideosFC[which(DataVideosFC$video_meme == 1),]$total_likes+DataVideosFC[which(DataVideosFC$video_meme == 1),]$total_shares , order.by = DataVideosFC[which(DataVideosFC$video_meme == 1),]$created_time)\n      }\n      \n      if(input$fc_videomeme_rate_display_overview == \"interaction rate\"){\n        AvgDailyVideoRate <- as.xts(as.numeric(formatC(DataVideosFC[which(DataVideosFC$video_meme == 1),]$interaction_rate*100, format = \"f\", digits = 2)), order.by = DataVideosFC[which(DataVideosFC$video_meme == 1),]$created_time)\n      } else {\n        AvgDailyVideoRate <- as.xts(as.numeric(formatC((DataVideosFC[which(DataVideosFC$video_meme == 1),]$post_video_views/DataVideosFC[which(DataVideosFC$video_meme == 1),]$post_reach)*100, format = \"f\", digits = 2)), order.by = DataVideosFC[which(DataVideosFC$video_meme == 1),]$created_time)\n      }\n      \n      sufix <- ifelse(input$fc_avg_total_videomeme_overview == \"average\", \"Avg.\", \"Total\")\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_yAxis_multiples(\n          list(offset = 30, title = list(text = paste(sufix,\"Reach\", sep = \" \")), height = \"45%\", top = \"0%\"),\n          list(offset = 30, title = list(text = paste(sufix, ifelse(input$fc_videomeme_variable_display_overview == \"video views\", \"Video Views\", \"Interactions\"), sep = \" \")), height = \"35%\", top = \"47.5%\"),\n          list(offset = 30, title = list(text = ifelse(input$fc_avg_total_videomeme_overview == \"average\", ifelse(input$fc_videomeme_rate_display_overview == \"interaction rate\", \"Avg. IR\", \"Avg. VR\"), \"Ignore!\")), height = \"15%\", top = \"85%\", labels = list(format = \"{value} %\"))\n        ) %>%\n        hc_add_series(AvgDailyVideoReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0, color = \"#D73027\", type = \"area\") %>%\n        hc_add_series(AvgDailyVideoVariable, id = \"Daily Video Views\", yAxis = 1, name = ifelse(input$fc_videomeme_variable_display_overview == \"video views\", \"Video Views\", \"Interactions\"), color = \"#F46D43\", type = \"area\") %>%\n        hc_add_series(AvgDailyVideoRate, id = \"Daily IR\", yAxis = 2, name = ifelse(input$fc_videomeme_rate_display_overview == \"interaction rate\", \"Interaction Rate\", \"Views Rate\"), type = \"column\", color = \"#2580B9\", tooltip = list(valueSuffix = \" %\")) %>%\n        \n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$fc_chart_time_videomeme_overview == \"month\", 5, 4)) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = \"none\", dataGrouping = list(approximation = input$fc_avg_total_videomeme_overview, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input$fc_chart_time_videomeme_overview, list(1)))))) %>%\n        hc_tooltip(valueDecimals = ifelse(input$fc_avg_total_videomeme_overview == \"average\", 2, 0)) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  output$FCPlotOverview131 <- renderHighchart({\n    \n    input$fc_plot_videomeme_overview1\n    isolate({ \n      \n      dates <- data.frame(created_time = DataVideosFC[which(DataVideosFC$video_meme == 1),]$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = DataVideosFC[which(DataVideosFC$video_meme == 1 & DataVideosFC$repost == 1),\"created_time\"], num = rep(1,nrow(DataVideosFC[which(DataVideosFC$video_meme == 1 & DataVideosFC$repost == 1),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = DataVideosFC[which(DataVideosFC$video_meme == 1 & DataVideosFC$original == 1),\"created_time\"], num = rep(1,nrow(DataVideosFC[which(DataVideosFC$video_meme == 1 & DataVideosFC$original == 1),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$fc_chart_type_overview3) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$fc_chart_type_overview3) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$fc_chart_time_overview3 == \"day\", 0, 2)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$fc_chart_type_overview3 == \"area\" || input$fc_chart_type_overview3 == \"column\"){if(input$fc_chart_stack_overview2 != \"none\"){input$fc_chart_stack_overview3}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$fc_chart_time_overview3, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$FCPlotOverview14 <- renderHighchart({\n    \n    input$fc_plot_meme_overview\n    isolate({  \n      \n      AvgDailyPhotoReach <- as.xts(DataPhotosFC$post_reach, order.by = DataPhotosFC$created_time)\n      AvgDailyPhotoFanReach <- as.xts(DataPhotosFC$post_reach_fan_unique, order.by = DataPhotosFC$created_time)\n      AvgDailyPhotoIR <- as.xts(as.numeric(formatC(DataPhotosFC$interaction_rate*100, format = \"f\", digits = 2)), order.by = DataPhotosFC$created_time)\n      \n      if(input$fc_meme_variable_display_overview == \"fan reach\"){\n        AvgDailyPhotoVariable <- as.xts(DataPhotosFC$post_reach_fan_unique, order.by = DataPhotosFC$created_time)\n      } else {\n        AvgDailyPhotoVariable <- as.xts(DataPhotosFC$post_reach_viral_unique, order.by = DataPhotosFC$created_time)\n      }\n      \n      if(input$fc_meme_rate_display_overview == \"interaction rate\"){\n        AvgDailyPhotoRate <- as.xts(as.numeric(formatC(DataPhotosFC$interaction_rate*100, format = \"f\", digits = 2)), order.by = DataPhotosFC$created_time)\n      } else {\n        AvgDailyPhotoRate <- as.xts(as.numeric(formatC((DataPhotosFC$total_shares/(DataPhotosFC$total_comments+DataPhotosFC$total_likes+DataPhotosFC$total_shares))*100, format = \"f\", digits = 2)), order.by = DataPhotosFC$created_time)\n      }\n      \n      sufix <- ifelse(input$fc_avg_total_meme_overview == \"average\", \"Avg.\", \"Total\")\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_yAxis_multiples(\n          list(offset = 30, title = list(text = paste(sufix,\"Reach\", sep = \" \")), height = \"45%\", top = \"0%\"),\n          list(offset = 30, title = list(text = paste(sufix, ifelse(input$fc_meme_variable_display_overview == \"fan reach\", \"Fan Reach\", \"Viral Reach\"), sep = \" \")), height = \"35%\", top = \"47.5%\"),\n          list(offset = 30, title = list(text = ifelse(input$fc_avg_total_videomeme_overview == \"average\", ifelse(input$fc_meme_rate_display_overview == \"interaction rate\", \"Avg. IR\", \"Avg. Share Rate\"), \"Ignore!\")), height = \"15%\", top = \"85%\", labels = list(format = \"{value} %\"))\n        ) %>%\n        \n        hc_add_series(AvgDailyPhotoReach, id = \"Daily Reach\", name = \"Reach\", yAxis = 0, color = \"#D73027\", type = \"area\") %>%\n        hc_add_series(AvgDailyPhotoVariable, id = \"Daily Fan Reach\", yAxis = 1, name = ifelse(input$fc_meme_variable_display_overview == \"fan reach\", \"Fan Reach\", \"Viral Reach\"), color = \"#F46D43\", type = \"area\") %>%\n        hc_add_series(AvgDailyPhotoRate, id = \"Daily IR\", yAxis = 2, name = ifelse(input$fc_meme_rate_display_overview == \"interaction rate\", \"Interaction Rate\", \"Share Rate\"), type = \"column\", color = \"#2580B9\", tooltip = list(valueSuffix = \" %\")) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$fc_chart_time_meme_overview == \"month\", 5, 4)) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = \"none\", dataGrouping = list(approximation = input$fc_avg_total_meme_overview, enabled = TRUE, forced = TRUE, groupPixelWidth = 1, smoothed = TRUE, units = list(list(input$fc_chart_time_meme_overview, list(1)))))) %>%\n        hc_tooltip(valueDecimals = ifelse(input$fc_avg_total_meme_overview == \"average\", 2, 0)) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  output$FCPlotOverview141 <- renderHighchart({\n    \n    input$fc_plot_meme_overview1\n    isolate({ \n      \n      dates <- data.frame(created_time = DataPhotosFC$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = DataPhotosFC[which(DataPhotosFC$repost == 1),\"created_time\"], num = rep(1,nrow(DataPhotosFC[which(DataPhotosFC$repost == 1),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = DataPhotosFC[which(DataPhotosFC$original == 1),\"created_time\"], num = rep(1,nrow(DataPhotosFC[which(DataPhotosFC$original == 1),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$fc_chart_type_overview4) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$fc_chart_type_overview4) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$fc_chart_time_overview3 == \"day\", 0, 2)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$fc_chart_type_overview4 == \"area\" || input$fc_chart_type_overview4 == \"column\"){if(input$fc_chart_stack_overview2 != \"none\"){input$fc_chart_stack_overview4}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$fc_chart_time_overview4, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  #----------------------------------------------------------------------------------------------------------------------\n  \n  # 3. KPIS --------------------------------------------------------------------------------------------------------------------\n  \n  # 3.1. KPIS - We Are MitÃº ---------------------------------------------------------------------------------------------------------------------------\n  \n  output$PlotKpis <- renderHighchart({\n\n    input$plot_kpis\n    isolate({\n\n      dates <- data.frame(date = Data$date)\n      dates$date <- as.POSIXct(dates$date)\n\n      articles_originals <- merge(dates, data.frame(date = DataArticles[which(DataArticles$original == 1),]$date, num = rep(1,nrow(DataArticles[which(DataArticles$original == 1),]))), by = \"date\", all = TRUE)\n      articles_originals <- as.xts(articles_originals[,\"num\"], order.by = articles_originals[,\"date\"])\n\n      videos_originals <- merge(dates, data.frame(date = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]$date, num = rep(1,nrow(DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]))), by = \"date\", all = TRUE)\n      videos_originals <- as.xts(videos_originals[,\"num\"], order.by = videos_originals[,\"date\"])\n\n      video_memes_originals <- merge(dates, data.frame(date = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]$date, num = rep(1,nrow(DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]))), by = \"date\", all = TRUE)\n      video_memes_originals <- as.xts(video_memes_originals[,\"num\"], order.by = video_memes_originals[,\"date\"])\n\n      memes_originals <- merge(dates, data.frame(date = DataPhotos[which(DataPhotos$original == 1),]$date, num = rep(1,nrow(DataPhotos[which(DataPhotos$original == 1),]))), by = \"date\", all = TRUE)\n      memes_originals <- as.xts(memes_originals[,\"num\"], order.by = memes_originals[,\"date\"])\n\n\n      articles_reposts <- merge(dates, data.frame(date = DataArticles[which(DataArticles$original == 0),]$date, num = rep(1,nrow(DataArticles[which(DataArticles$original == 0),]))), by = \"date\", all = TRUE)\n      articles_reposts <- as.xts(articles_reposts[,\"num\"], order.by = articles_reposts[,\"date\"])\n\n      videos_reposts <- merge(dates, data.frame(date = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]$date, num = rep(1,nrow(DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]))), by = \"date\", all = TRUE)\n      videos_reposts <- as.xts(videos_reposts[,\"num\"], order.by = videos_reposts[,\"date\"])\n\n      video_memes_reposts <- merge(dates, data.frame(date = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]$date, num = rep(1,nrow(DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]))), by = \"date\", all = TRUE)\n      video_memes_reposts <- as.xts(video_memes_reposts[,\"num\"], order.by = video_memes_reposts[,\"date\"])\n\n      memes_reposts <- merge(dates, data.frame(date = DataPhotos[which(DataPhotos$original == 0),]$date, num = rep(1,nrow(DataPhotos[which(DataPhotos$original == 0),]))), by = \"date\", all = TRUE)\n      memes_reposts <- as.xts(memes_reposts[,\"num\"], order.by = memes_reposts[,\"date\"])\n\n      colores<- c('#08415C', 'url(#custom-pattern)', '#CC2936', 'url(#custom-pattern-1)', '#EBBAB9', 'url(#custom-pattern-2)','#388697','url(#custom-pattern-3)')\n      # colores<- c('#08415C', '#08415C', '#CC2936', '#CC2936', '#EBBAB9', '#EBBAB9','#388697','#388697')\n\n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Content Output\")) %>%\n        hc_add_series(articles_originals, name = \"Article Originals\", type = input$chart_type_kpis) %>%\n        hc_add_series(articles_reposts, name = \"Article Reposts\", type = input$chart_type_kpis) %>%\n        hc_add_series(videos_originals, name = \"Video Originals\", type = input$chart_type_kpis) %>%\n        hc_add_series(videos_reposts, name = \"Video Reposts\", type = input$chart_type_kpis) %>%\n        hc_add_series(video_memes_originals, name = \"Video Meme Originals\", type = input$chart_type_kpis) %>%\n        hc_add_series(video_memes_reposts, name = \"Video Meme Reposts\", type = input$chart_type_kpis) %>%\n        hc_add_series(memes_originals, name = \"Meme Originals\", type = input$chart_type_kpis) %>%\n        hc_add_series(memes_reposts, name = \"Meme Reposts\", type = input$chart_type_kpis) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_kpis == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_kpis == \"area\" || input$chart_type_kpis == \"column\"){if(input$chart_stack_kpis != \"none\"){input$chart_stack_kpis}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_kpis, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())%>%\n        hc_defs(patterns = list(list(id = \"custom-pattern\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#08415C', strokeWidth = 2)), list(id = \"custom-pattern-1\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#CC2936', strokeWidth = 2)), list(id = \"custom-pattern-2\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#EBBAB9', strokeWidth = 2)), list(id = \"custom-pattern-3\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#388697', strokeWidth = 2))))\n      hc\n    })\n  })\n\n  output$PlotKpis1 <- renderHighchart({\n\n    input$plot_kpis1\n    isolate({\n\n      dates <- data.frame(created_time = Data$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n\n      articles_originals <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$original == 1),]$created_time, num = DataArticles[which(DataArticles$original == 1),]$link_clicks), by = \"created_time\", all = TRUE)\n      articles_originals <- as.xts(articles_originals[,\"num\"], order.by = articles_originals[,\"created_time\"])\n\n      videos_originals <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]$created_time, num = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]$post_video_views), by = \"created_time\", all = TRUE)\n      videos_originals <- as.xts(videos_originals[,\"num\"], order.by = videos_originals[,\"created_time\"])\n\n      video_memes_originals <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]$created_time, num = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]$post_video_views), by = \"created_time\", all = TRUE)\n      video_memes_originals <- as.xts(video_memes_originals[,\"num\"], order.by = video_memes_originals[,\"created_time\"])\n\n      memes_originals <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$original == 1),]$created_time, num = DataPhotos[which(DataPhotos$original == 1),]$post_reach), by = \"created_time\", all = TRUE)\n      memes_originals <- as.xts(memes_originals[,\"num\"], order.by = memes_originals[,\"created_time\"])\n\n\n      articles_reposts <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$original == 0),]$created_time, num = DataArticles[which(DataArticles$original == 0),]$link_clicks), by = \"created_time\", all = TRUE)\n      articles_reposts <- as.xts(articles_reposts[,\"num\"], order.by = articles_reposts[,\"created_time\"])\n\n      videos_reposts <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]$created_time, num = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]$post_video_views), by = \"created_time\", all = TRUE)\n      videos_reposts <- as.xts(videos_reposts[,\"num\"], order.by = videos_reposts[,\"created_time\"])\n\n      video_memes_reposts <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]$created_time, num = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]$post_video_views), by = \"created_time\", all = TRUE)\n      video_memes_reposts <- as.xts(video_memes_reposts[,\"num\"], order.by = video_memes_reposts[,\"created_time\"])\n\n      memes_reposts <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$original == 0),]$created_time, num = DataPhotos[which(DataPhotos$original == 0),]$post_reach), by = \"created_time\", all = TRUE)\n      memes_reposts <- as.xts(memes_reposts[,\"num\"], order.by = memes_reposts[,\"created_time\"])\n\n\n      colores<- c('#08415C', 'url(#custom-pattern)', '#CC2936', 'url(#custom-pattern-1)', '#EBBAB9', 'url(#custom-pattern-2)','#388697','url(#custom-pattern-3)')\n\n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Content Views\")) %>%\n        hc_add_series(articles_originals, name = \"Article Originals\", type = input$chart_type_kpis1) %>%\n        hc_add_series(articles_reposts, name = \"Article Reposts\", type = input$chart_type_kpis1) %>%\n        hc_add_series(videos_originals, name = \"Video Originals\", type = input$chart_type_kpis1) %>%\n        hc_add_series(videos_reposts, name = \"Video Reposts\", type = input$chart_type_kpis1) %>%\n        hc_add_series(video_memes_originals, name = \"Video Meme Originals\", type = input$chart_type_kpis1) %>%\n        hc_add_series(video_memes_reposts, name = \"Video Meme Reposts\", type = input$chart_type_kpis1) %>%\n        hc_add_series(memes_originals, name = \"Meme Originals\", type = input$chart_type_kpis1) %>%\n        hc_add_series(memes_reposts, name = \"Meme Reposts\", type = input$chart_type_kpis1) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_kpis1 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_kpis1 == \"area\" || input$chart_type_kpis1 == \"column\"){if(input$chart_stack_kpis1 != \"none\"){input$chart_stack_kpis1}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_kpis1, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())%>%\n        hc_defs(patterns = list(list(id = \"custom-pattern\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#08415C', strokeWidth = 2)), list(id = \"custom-pattern-1\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#CC2936', strokeWidth = 2)), list(id = \"custom-pattern-2\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#EBBAB9', strokeWidth = 2)), list(id = \"custom-pattern-3\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#388697', strokeWidth = 2))))\n\n      hc\n    })\n  })\n\n  output$PlotKpis2 <- renderHighchart({\n\n    input$plot_kpis2\n    isolate({\n\n      dates <- data.frame(created_time = Data$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n\n      articles_originals <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$original == 1),]$created_time, num = DataArticles[which(DataArticles$original == 1),]$total_interactions), by = \"created_time\", all = TRUE)\n      articles_originals <- as.xts(articles_originals[,\"num\"], order.by = articles_originals[,\"created_time\"])\n\n      videos_originals <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]$created_time, num = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]$total_interactions), by = \"created_time\", all = TRUE)\n      videos_originals <- as.xts(videos_originals[,\"num\"], order.by = videos_originals[,\"created_time\"])\n\n      video_memes_originals <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]$created_time, num = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]$total_interactions), by = \"created_time\", all = TRUE)\n      video_memes_originals <- as.xts(video_memes_originals[,\"num\"], order.by = video_memes_originals[,\"created_time\"])\n\n      memes_originals <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$original == 1),]$created_time, num = DataPhotos[which(DataPhotos$original == 1),]$total_interactions), by = \"created_time\", all = TRUE)\n      memes_originals <- as.xts(memes_originals[,\"num\"], order.by = memes_originals[,\"created_time\"])\n\n\n      articles_reposts <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$original == 0),]$created_time, num = DataArticles[which(DataArticles$original == 0),]$total_interactions), by = \"created_time\", all = TRUE)\n      articles_reposts <- as.xts(articles_reposts[,\"num\"], order.by = articles_reposts[,\"created_time\"])\n\n      videos_reposts <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]$created_time, num = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]$total_interactions), by = \"created_time\", all = TRUE)\n      videos_reposts <- as.xts(videos_reposts[,\"num\"], order.by = videos_reposts[,\"created_time\"])\n\n      video_memes_reposts <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]$created_time, num = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]$total_interactions), by = \"created_time\", all = TRUE)\n      video_memes_reposts <- as.xts(video_memes_reposts[,\"num\"], order.by = video_memes_reposts[,\"created_time\"])\n\n      memes_reposts <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$original == 0),]$created_time, num = DataPhotos[which(DataPhotos$original == 0),]$total_interactions), by = \"created_time\", all = TRUE)\n      memes_reposts <- as.xts(memes_reposts[,\"num\"], order.by = memes_reposts[,\"created_time\"])\n\n      colores<- c('#08415C', 'url(#custom-pattern)', '#CC2936', 'url(#custom-pattern-1)', '#EBBAB9', 'url(#custom-pattern-2)','#388697','url(#custom-pattern-3)')\n\n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Interactions\")) %>%\n        hc_add_series(articles_originals, name = \"Article Originals\", type = input$chart_type_kpis2) %>%\n        hc_add_series(articles_reposts, name = \"Article Reposts\", type = input$chart_type_kpis2) %>%\n        hc_add_series(videos_originals, name = \"Video Originals\", type = input$chart_type_kpis2) %>%\n        hc_add_series(videos_reposts, name = \"Video Reposts\", type = input$chart_type_kpis2) %>%\n        hc_add_series(video_memes_originals, name = \"Video Meme Originals\", type = input$chart_type_kpis2) %>%\n        hc_add_series(video_memes_reposts, name = \"Video Meme Reposts\", type = input$chart_type_kpis2) %>%\n        hc_add_series(memes_originals, name = \"Meme Originals\", type = input$chart_type_kpis2) %>%\n        hc_add_series(memes_reposts, name = \"Meme Reposts\", type = input$chart_type_kpis2) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_kpis2 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_kpis2 == \"area\" || input$chart_type_kpis2 == \"column\"){if(input$chart_stack_kpis2 != \"none\"){input$chart_stack_kpis2}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_kpis2, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())%>%\n        hc_defs(patterns = list(list(id = \"custom-pattern\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#08415C', strokeWidth = 2)), list(id = \"custom-pattern-1\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#CC2936', strokeWidth = 2)), list(id = \"custom-pattern-2\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#EBBAB9', strokeWidth = 2)), list(id = \"custom-pattern-3\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#388697', strokeWidth = 2))))%>%\n        hc_defs(patterns = list(list(id = \"custom-pattern\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#08415C', strokeWidth = 2)), list(id = \"custom-pattern-1\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#CC2936', strokeWidth = 2)), list(id = \"custom-pattern-2\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#EBBAB9', strokeWidth = 2)), list(id = \"custom-pattern-3\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#388697', strokeWidth = 2))))\n      hc\n    })\n  })\n\n  output$PlotKpis3 <- renderHighchart({\n\n    input$plot_kpis3\n    isolate({\n\n      dates <- data.frame(created_time = Data$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n\n      articles_originals <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$original == 1),]$created_time, num = DataArticles[which(DataArticles$original == 1),]$post_reach), by = \"created_time\", all = TRUE)\n      articles_originals <- as.xts(articles_originals[,\"num\"], order.by = articles_originals[,\"created_time\"])\n\n      videos_originals <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]$created_time, num = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]$post_reach), by = \"created_time\", all = TRUE)\n      videos_originals <- as.xts(videos_originals[,\"num\"], order.by = videos_originals[,\"created_time\"])\n\n      video_memes_originals <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]$created_time, num = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]$post_reach), by = \"created_time\", all = TRUE)\n      video_memes_originals <- as.xts(video_memes_originals[,\"num\"], order.by = video_memes_originals[,\"created_time\"])\n\n      memes_originals <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$original == 1),]$created_time, num = DataPhotos[which(DataPhotos$original == 1),]$post_reach), by = \"created_time\", all = TRUE)\n      memes_originals <- as.xts(memes_originals[,\"num\"], order.by = memes_originals[,\"created_time\"])\n\n\n      articles_reposts <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$original == 0),]$created_time, num = DataArticles[which(DataArticles$original == 0),]$post_reach), by = \"created_time\", all = TRUE)\n      articles_reposts <- as.xts(articles_reposts[,\"num\"], order.by = articles_reposts[,\"created_time\"])\n\n      videos_reposts <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]$created_time, num = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]$post_reach), by = \"created_time\", all = TRUE)\n      videos_reposts <- as.xts(videos_reposts[,\"num\"], order.by = videos_reposts[,\"created_time\"])\n\n      video_memes_reposts <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]$created_time, num = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]$post_reach), by = \"created_time\", all = TRUE)\n      video_memes_reposts <- as.xts(video_memes_reposts[,\"num\"], order.by = video_memes_reposts[,\"created_time\"])\n\n      memes_reposts <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$original == 0),]$created_time, num = DataPhotos[which(DataPhotos$original == 0),]$post_reach), by = \"created_time\", all = TRUE)\n      memes_reposts <- as.xts(memes_reposts[,\"num\"], order.by = memes_reposts[,\"created_time\"])\n\n      colores<- c('#08415C', 'url(#custom-pattern)', '#CC2936', 'url(#custom-pattern-1)', '#EBBAB9', 'url(#custom-pattern-2)','#388697','url(#custom-pattern-3)')\n\n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>%\n        hc_add_series(articles_originals, name = \"Article Originals\", type = input$chart_type_kpis3) %>%\n        hc_add_series(articles_reposts, name = \"Article Reposts\", type = input$chart_type_kpis3) %>%\n        hc_add_series(videos_originals, name = \"Video Originals\", type = input$chart_type_kpis3) %>%\n        hc_add_series(videos_reposts, name = \"Video Reposts\", type = input$chart_type_kpis3) %>%\n        hc_add_series(video_memes_originals, name = \"Video Meme Originals\", type = input$chart_type_kpis3) %>%\n        hc_add_series(video_memes_reposts, name = \"Video Meme Reposts\", type = input$chart_type_kpis3) %>%\n        hc_add_series(memes_originals, name = \"Meme Originals\", type = input$chart_type_kpis3) %>%\n        hc_add_series(memes_reposts, name = \"Meme Reposts\", type = input$chart_type_kpis3) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_kpis3 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_kpis3 == \"area\" || input$chart_type_kpis3 == \"column\"){if(input$chart_stack_kpis3 != \"none\"){input$chart_stack_kpis3}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_kpis3, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  \n  \n  output$PlotKpisContentOutputMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_content_output, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(Data[which(Data$date >= year_selected & Data$date < year_selected + years(1)),], .(date = format(Data[which(Data$date >= year_selected & Data$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_content_output <- cumsum(as.numeric(DataMonth$content_output))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$content_output))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_content_output)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$video_original_output + DataGoal[x,]$video_repost_output + DataGoal[x,]$video_meme_output + DataGoal[x,]$article_original_output + DataGoal[x,]$article_repost_output + DataGoal[x,]$meme_original_output + DataGoal[x,]$meme_repost_output)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Content Output - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Output\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Content Output Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds, name = \"Content Output\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Content Output\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisContentOutputTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(Data[which(Data$date >= \"2017-01-01\"),], .(date = format(Data[which(Data$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, page_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoals$content_output <- DataGoals$video_original_output + DataGoals$video_repost_output + DataGoals$video_meme_output + DataGoals$article_original_output + DataGoals$article_repost_output + DataGoals$meme_original_output + DataGoals$meme_repost_output\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"content_output\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$content_output-DataMonth$page_content_output)/DataMonth$content_output\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$page_content_output)),]\n    \n    # DataMonth$content_output <- format( DataMonth$content_output, big.mark = \",\")\n    # DataMonth$page_content_output <- format( DataMonth$page_content_output, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisContentOutputTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Content Output - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisContentOutput <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$kpis_month_content_output, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected),], \"date\", summarize, content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_content_output <- cumsum(DataMonth$content_output)\n    \n    slope <- lm(cumsum(content_output) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$content_output)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_content_output)\n    })\n    \n    DataGoals$total_content_output <- rowSums(cbind(DataGoals$video_original_output, DataGoals$video_repost_output, DataGoals$video_meme_output, DataGoals$article_original_output, DataGoals$article_repost_output, DataGoals$meme_original_output, DataGoals$meme_repost_output), na.rm = TRUE)\n    \n    goal <- as.numeric(ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$total_content_output, 0))\n\n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Content Output - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Output\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Content Output\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Content Output\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  output$PlotKpisArticleContentOutputMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_article_output, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataArticles[which(DataArticles$date >= year_selected & DataArticles$date < year_selected + years(1)),], .(date = format(DataArticles[which(DataArticles$date >= year_selected & DataArticles$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, article_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_article_content_output <- cumsum(as.numeric(DataMonth$article_content_output))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$article_content_output))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_article_content_output)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$article_original_output + DataGoal[x,]$article_repost_output)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Article Output - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Article Output Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds, name = \"Article Output\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Article Output\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisArticleContentOutputTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataArticles[which(DataArticles$date >= \"2017-01-01\"),], .(date = format(DataArticles[which(DataArticles$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, article_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoals$content_output <- DataGoals$article_original_output + DataGoals$article_repost_output\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"content_output\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$content_output-DataMonth$article_content_output)/DataMonth$content_output\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$article_content_output)),]\n    \n    # DataMonth$content_output <- format( DataMonth$content_output, big.mark = \",\")\n    # DataMonth$article_content_output <- format( DataMonth$article_content_output, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisArticleContentOutputTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Article Output - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisArticleContentOutput <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$kpis_month_article_content_output, \"01\"), \"%b %Y %d\")\n    \n    # date_selected <- as.Date(paste(\"abr. 2017\", \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected & Data$post_type == \"link\"),], \"date\", summarize, article_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_article_content_output <- cumsum(DataMonth$article_content_output)\n    \n    slope <- lm(cumsum(article_content_output) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$article_content_output)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_article_content_output)\n    })\n    \n    DataGoals$total_article_content_output <- DataGoals$article_original_output + DataGoals$article_repost_output\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$total_article_content_output, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Article Output - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Article Output\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Article Output\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  output$PlotKpisVideoContentOutputMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_video_output, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),], .(date = format(DataVideos[which(DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, video_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_video_content_output <- cumsum(as.numeric(DataMonth$video_content_output))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$video_content_output))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_video_content_output)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$video_original_output + DataGoal[x,]$video_repost_output)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Video Output - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Video Output Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds, name = \"Video Output\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Video Output\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisVideoContentOutputTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$date >= \"2017-01-01\"),], .(date = format(DataVideos[which(DataVideos$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, video_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoals$content_output <- DataGoals$video_original_output + DataGoals$video_repost_output\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"content_output\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$content_output-DataMonth$video_content_output)/DataMonth$content_output\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$video_content_output)),]\n    \n    # DataMonth$content_output <- format( DataMonth$content_output, big.mark = \",\")\n    # DataMonth$video_content_output <- format( DataMonth$video_content_output, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisVideoContentOutputTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Video Output - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisVideoContentOutput <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$kpis_month_video_content_output, \"01\"), \"%b %Y %d\")\n    \n    # date_selected <- as.Date(paste(\"abr. 2017\", \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected & Data$post_type == \"video\"),], \"date\", summarize, video_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_video_content_output <- cumsum(DataMonth$video_content_output)\n    \n    slope <- lm(cumsum(video_content_output) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$video_content_output)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_video_content_output)\n    })\n    \n    DataGoals$total_video_content_output <- DataGoals$video_original_output + DataGoals$video_repost_output\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$total_video_content_output, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Video Output - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Video Output\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Video Output\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  output$PlotKpisMemeContentOutputMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_meme_output, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataPhotos[which(DataPhotos$date >= year_selected & DataPhotos$date < year_selected + years(1)),], .(date = format(DataPhotos[which(DataPhotos$date >= year_selected & DataPhotos$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, meme_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_meme_content_output <- cumsum(as.numeric(DataMonth$meme_content_output))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$meme_content_output))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_meme_content_output)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$meme_original_output + DataGoal[x,]$meme_repost_output)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Meme Output - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Meme Output Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds, name = \"Meme Output\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Meme Output\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisMemeContentOutputTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataPhotos[which(DataPhotos$date >= \"2017-01-01\"),], .(date = format(DataPhotos[which(DataPhotos$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, meme_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoals$content_output <- DataGoals$meme_original_output + DataGoals$meme_repost_output\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"content_output\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$content_output-DataMonth$meme_content_output)/DataMonth$content_output\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$meme_content_output)),]\n    \n    # DataMonth$content_output <- format( DataMonth$content_output, big.mark = \",\")\n    # DataMonth$meme_content_output <- format( DataMonth$meme_content_output, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisMemeContentOutputTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Meme Output - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisMemeContentOutput <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$kpis_month_meme_content_output, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected & Data$post_type == \"photo\"),], \"date\", summarize, meme_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_meme_content_output <- cumsum(DataMonth$meme_content_output)\n    \n    slope <- lm(cumsum(meme_content_output) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$meme_content_output)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_meme_content_output)\n    })\n    \n    DataGoals$total_meme_content_output <- DataGoals$meme_original_output + DataGoals$meme_repost_output\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$total_meme_content_output, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Meme Output - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Meme Output\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Meme Output\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  \n  \n  output$PlotKpisTotalFollowers <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_total_followers, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(Data[which(Data$date >= year_selected & Data$date < year_selected + years(1)),], \"date\", summarize, page_followers = mean(page_total_likes), new_followers = mean(page_new_likes))\n    \n    DataMonth <- ddply(DataMonth, .(date = format(DataMonth$date, \"%Y-%m\")), summarize, page_followers = max(page_followers), new_followers = sum(new_followers))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n\n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$page_followers))\n    })\n \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$total_followers)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Total Followers\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Totla Followers\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Total Followers Goal\", pointPadding = 0) %>%\n      # hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Total Followers\", pointPadding = 0.2) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisTotalFollowersTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(Data[which(Data$date >= \"2017-01-01\"),], \"date\", summarize, page_followers = mean(page_total_likes), new_followers = mean(page_new_likes))\n    \n    DataMonth <- ddply(DataMonth, .(date = format(DataMonth$date, \"%Y-%m\")), summarize, page_followers = max(page_followers))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"total_followers\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$total_followers-DataMonth$page_followers)/DataMonth$total_followers\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$page_followers)),]\n    \n    DataMonth$total_followers <- format( DataMonth$total_followers, big.mark = \",\")\n    DataMonth$page_followers <- format( DataMonth$page_followers, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  \n  \n  output$PlotKpisNewFollowersMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_new_followers, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n   \n    DataMonth <- ddply(WamPageData[which(WamPageData$date >= year_selected & WamPageData$date < year_selected + years(1)),], .(date = format(WamPageData[which(WamPageData$date >= year_selected & WamPageData$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, new_followers = sum(page_fan_adds))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_new_followers <- cumsum(as.numeric(DataMonth$new_followers))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$new_followers))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_new_followers)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n      \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$new_followers)\n    })\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == format.Date(max(Data$date), \"%m\") & format.Date(Data$date, \"%Y\") == format.Date(max(Data$date), \"%Y\")),], \"date\", summarize, total_followers = mean(page_total_likes), new_followers = mean(page_new_likes))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(new_followers) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n   \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n\n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"New Followers - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"New Followers\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"New Followers Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"New Followers\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total New Followers\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisNewFollowersTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(WamPageData[which(WamPageData$date >= \"2017-01-01\"),], .(date = format(WamPageData[which(WamPageData$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, page_new_followers = sum(page_fan_adds))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"new_followers\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$new_followers-DataMonth$page_new_followers)/DataMonth$new_followers\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$page_new_followers)),]\n    \n    DataMonth$new_followers <- format( DataMonth$new_followers, big.mark = \",\")\n    DataMonth$page_new_followers <- format( DataMonth$page_new_followers, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisNewFollowers <- renderHighchart({\n   \n    date_selected <- as.Date(paste(input$kpis_month_new_followers, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    # DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected),], \"date\", summarize, total_followers = mean(page_total_likes), new_followers = mean(page_new_likes))\n    \n    DataMonth <- ddply(WamPageData[which(format.Date(WamPageData$date, \"%m\") == month_selected & format.Date(WamPageData$date, \"%Y\") == year_selected),], \"date\", summarize, new_followers = sum(page_fan_adds))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_new_followers <- cumsum(DataMonth$new_followers)\n    \n    slope <- lm(cumsum(new_followers) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n   \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$new_followers)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_new_followers)\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$new_followers, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text = \"New Followers - Daily\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"New Followers\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily New Followers\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total New Followers\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  \n  \n\n  output$PlotKpisReachMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_reach, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(WamPageData[which(WamPageData$date >= year_selected & WamPageData$date < year_selected + years(1)),], .(date = format(WamPageData[which(WamPageData$date >= year_selected & WamPageData$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, reach = sum(page_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_reach <- cumsum(as.numeric(DataMonth$reach))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$reach))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_reach)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$reach)\n    })\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == format.Date(max(Data$date), \"%m\") & format.Date(Data$date, \"%Y\") == format.Date(max(Data$date), \"%Y\")),], \"date\", summarize, reach = sum(post_reach))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Reach - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Reach\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Reach Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Reach\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Reach\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisReachTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Reach - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisReach <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$kpis_month_reach, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    # DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected),], \"date\", summarize, reach = sum(post_reach))\n    # \n    DataMonth <- ddply(WamPageData[which(format.Date(WamPageData$date, \"%m\") == month_selected & format.Date(WamPageData$date, \"%Y\") == year_selected),], \"date\", summarize, reach = sum(page_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_reach <- cumsum(DataMonth$reach)\n    \n    slope <- lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$reach)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_reach)\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$reach, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Reach - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Reach\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Reach\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Reach\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  \n  output$PlotKpisEngagementMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_engagement, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(Data[which(Data$date >= year_selected & Data$date < year_selected + years(1)),], .(date = format(Data[which(Data$date >= year_selected & Data$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, interactions = sum(total_interactions))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_interactions <- cumsum(as.numeric(DataMonth$interactions))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$interactions))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_interactions)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$engagement)\n    })\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == format.Date(max(Data$date), \"%m\") & format.Date(Data$date, \"%Y\") == format.Date(max(Data$date), \"%Y\")),], \"date\", summarize, interactions = sum(total_interactions))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Engagement - Monthly\", align = \"center\") %>%\n      hc_yAxis(title = list(text = \"Engagement - Monthly\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Engagement\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Engagement Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Engagement\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Engagement\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisEngagementTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Engagement - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisEngagement<- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$kpis_month_engagement, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected),], \"date\", summarize, interactions = sum(total_interactions))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    \n    slope <- lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$interactions)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_interactions)\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$engagement, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Engagement - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Engagement\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Engagement\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Engagement\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  \n  output$PlotKpisContentViewsMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_content_views, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(Data[which(Data$date >= year_selected & Data$date < year_selected + years(1)),], .(date = format(Data[which(Data$date >= year_selected & Data$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, content_views = sum(post_reach[post_type == \"photo\"]) + sum(link_clicks[post_type == \"link\"]))\n    \n    DataMonthVideo <- ddply(WamPageData[which(WamPageData$date >= year_selected & WamPageData$date < year_selected + years(1) & WamPageData$date %in% Data$date),], .(date = format(WamPageData[which(WamPageData$date >= year_selected & WamPageData$date < year_selected + years(1) & WamPageData$date %in% Data$date),]$date, \"%Y-%m\")), summarize, content_views_video = sum(page_video_views))\n    \n    DataMonth$content_views <- DataMonth$content_views + DataMonthVideo$content_views_video\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_content_views <- cumsum(as.numeric(DataMonth$content_views))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$content_views)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_content_views)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$content_views)\n    })\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == format.Date(max(Data$date), \"%m\") & format.Date(Data$date, \"%Y\") == format.Date(max(Data$date), \"%Y\")),], \"date\", summarize, photo_views = sum(post_reach[post_type == \"photo\"]), article_views = sum(link_clicks[post_type == \"link\"]), video_views = sum(post_video_views[post_type == \"video\"]), content_views = photo_views + article_views + video_views)\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(content_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Content Views - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Content Views Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Content Views\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Content Views\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisContentViewsTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(Data[which(Data$date >= \"2017-01-01\"),], .(date = format(Data[which(Data$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, page_content_views = sum(post_reach[post_type == \"photo\"]) + sum(link_clicks[post_type == \"link\"]))\n    \n    DataMonthVideo <- ddply(WamPageData[which(WamPageData$date >= \"2017-01-01\" & WamPageData$date %in% Data$date),], .(date = format(WamPageData[which(WamPageData$date >= \"2017-01-01\" & WamPageData$date %in% Data$date),]$date, \"%Y-%m\")), summarize, content_views_video = sum(page_video_views))\n    \n    DataMonth$page_content_views <- DataMonth$page_content_views + DataMonthVideo$content_views_video\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"content_views\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$content_views-DataMonth$page_content_views)/DataMonth$content_views\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$page_content_views)),]\n    \n    DataMonth$content_views <- format( DataMonth$content_views, big.mark = \",\")\n    DataMonth$page_content_views <- format( DataMonth$page_content_views, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisContentViews <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$kpis_month_content_views, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected),], \"date\", summarize, photo_views = sum(post_reach[post_type == \"photo\"]), article_views = sum(link_clicks[post_type == \"link\"]), content_views = photo_views + article_views)\n    \n    DataMonthVideo <- ddply(WamPageData[which(format.Date(WamPageData$date, \"%m\") == month_selected & format.Date(WamPageData$date, \"%Y\") == year_selected),], \"date\", summarize, video_views = sum(page_video_views))\n    \n    DataMonth$content_views <- DataMonth$content_views + DataMonthVideo[which(DataMonthVideo$date %in% DataMonth$date),]$video_views\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_content_views <- cumsum(DataMonth$content_views)\n    \n    slope <- lm(cumsum(content_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$content_views)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_content_views)\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$content_views, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text = \"Content Views - Daily\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Content Views\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Content Views\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    \n    hc\n    \n  })\n\n  \n  \n  output$PlotKpisArticlesMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_articles, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataArticles[which(DataArticles$date >= year_selected & DataArticles$date < year_selected + years(1)),], .(date = format(DataArticles[which(DataArticles$date >= year_selected & DataArticles$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, link_clicks = sum(link_clicks))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_link_clicks <- cumsum(as.numeric(DataMonth$link_clicks))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$link_clicks))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_link_clicks)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n     \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$article_content_views)\n    })\n     \n    DataMonth <- ddply(DataArticles[which(format.Date(DataArticles$date, \"%m\") == format.Date(max(DataArticles$date), \"%m\") & format.Date(DataArticles$date, \"%Y\") == format.Date(max(DataArticles$date), \"%Y\")),], \"date\", summarize, link_clicks = sum(link_clicks))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(link_clicks) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n\n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Articles CV - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Articles CV Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Articles CV\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Articles CV\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisArticlesTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataArticles[which(DataArticles$date >= \"2017-01-01\"),], .(date = format(DataArticles[which(DataArticles$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, link_clicks = sum(link_clicks))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"article_content_views\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$article_content_views-DataMonth$link_clicks)/DataMonth$article_content_views\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$link_clicks)),]\n    \n    DataMonth$article_content_views <- format( DataMonth$article_content_views, big.mark = \",\")\n    DataMonth$link_clicks <- format( DataMonth$link_clicks, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisArticles <- renderHighchart({\n    \n    if(input$articles_kpi_select_repost == \"Originals\"){\n      \n      DataArticles <- DataArticles[which(DataArticles$original == 1),]\n      \n    }\n    \n    else if (input$articles_kpi_select_repost == \"Reposts\"){\n      \n      DataArticles <- DataArticles[which(DataArticles$original == 0),]\n    }\n    \n    date_selected <- as.Date(paste(input$kpis_month_articles, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataArticles[which(format.Date(DataArticles$date, \"%m\") == month_selected & format.Date(DataArticles$date, \"%Y\") == year_selected),], \"date\", summarize, link_clicks = sum(link_clicks), interactions = sum(total_interactions), reach = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_link_clicks <- cumsum(DataMonth$link_clicks)\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    DataMonth$total_reach <- cumsum(DataMonth$reach)\n    \n    slope <- ifelse(input$articles_kpi_select_variable == \"Content Views\",lm(cumsum(link_clicks) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], ifelse(input$articles_kpi_select_variable == \"Interactions\", lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$articles_kpi_select_variable == \"Content Views\", DataMonth[x,]$link_clicks, ifelse(input$articles_kpi_select_variable == \"Interactions\", DataMonth[x,]$interactions, DataMonth[x,]$reach)))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$articles_kpi_select_variable == \"Content Views\", DataMonth[x,]$total_link_clicks, ifelse(input$articles_kpi_select_variable == \"Interactions\", DataMonth[x,]$total_interactions, DataMonth[x,]$total_reach)))\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$article_content_views, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text = \"Articles CV - Daily\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = input$articles_kpi_select_variable)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = paste(\"Daily\", input$articles_kpi_select_variable, sep = \" \"), type = \"column\") %>%\n      hc_add_series(data = ds_total, name = paste(\"Total\", input$articles_kpi_select_variable, sep = \" \"), type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  \n  output$PlotKpisAllVideosMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_all_videos, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),], .(date = format(DataVideos[which(DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, video_views = sum(post_video_views))\n\n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_video_views <- cumsum(as.numeric(DataMonth$video_views))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$video_views))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_video_views)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$all_video_content_views)\n    })\n    \n    DataMonth <- ddply(DataVideos[which(format.Date(DataVideos$date, \"%m\") == format.Date(max(DataVideos$date), \"%m\") & format.Date(DataVideos$date, \"%Y\") == format.Date(max(DataVideos$date), \"%Y\")),], \"date\", summarize, video_views = sum(post_video_views))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(video_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"All Videos CV - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"All Videos CV Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"All Videos CV\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total All Videos CV\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisAllVideosTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$date >= \"2017-01-01\"),], .(date = format(DataVideos[which(DataVideos$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, video_views = sum(post_video_views))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"all_video_content_views\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$all_video_content_views-DataMonth$video_views)/DataMonth$all_video_content_views\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$video_views)),]\n    \n    DataMonth$all_video_content_views <- format( DataMonth$all_video_content_views, big.mark = \",\")\n    DataMonth$video_views <- format( DataMonth$video_views, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisAllVideos <- renderHighchart({\n    \n    if(input$all_videos_kpi_select_repost == \"Originals\"){\n      \n      DataVideos <- DataVideos[which(DataVideos$original == 1),]\n      \n    }\n    \n    else if (input$all_videos_kpi_select_repost == \"Reposts\"){\n      \n      DataVideos <- DataVideos[which(DataVideos$original == 0),]\n    }\n    \n    date_selected <- as.Date(paste(input$kpis_month_all_videos, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n\n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n\n    DataMonth <- ddply(DataVideos[which(format.Date(DataVideos$date, \"%m\") == month_selected & format.Date(DataVideos$date, \"%Y\") == year_selected),], \"date\", summarize, video_views = sum(post_video_views), interactions = sum(total_interactions), reach = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_video_views <- cumsum(DataMonth$video_views)\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    DataMonth$total_reach <- cumsum(DataMonth$reach)\n    \n    slope <- ifelse(input$all_videos_kpi_select_variable == \"Content Views\",lm(cumsum(video_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], ifelse(input$all_videos_kpi_select_variable == \"Interactions\", lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]))\n\n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$all_videos_kpi_select_variable == \"Content Views\", DataMonth[x,]$video_views, ifelse(input$all_videos_kpi_select_variable == \"Interactions\", DataMonth[x,]$interactions, DataMonth[x,]$reach)))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$all_videos_kpi_select_variable == \"Content Views\", DataMonth[x,]$total_video_views, ifelse(input$all_videos_kpi_select_variable == \"Interactions\", DataMonth[x,]$total_interactions, DataMonth[x,]$total_reach)))\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$all_video_content_views, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n\n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text = \"All Videos CV - Daily\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = input$all_videos_kpi_select_variable)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = paste(\"Daily\", input$all_videos_kpi_select_variable, sep = \" \"), type = \"column\") %>%\n      hc_add_series(data = ds_total, name = paste(\"Total\", input$all_videos_kpi_select_variable, sep = \" \"), type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  \n  output$PlotKpisVideosMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_videos, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 0 & DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),], .(date = format(DataVideos[which(DataVideos$video_meme == 0 & DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, video_views = sum(post_video_views))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_video_views <- cumsum(as.numeric(DataMonth$video_views))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$video_views))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_video_views)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$video_content_views)\n    })\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 0 & format.Date(DataVideos$date, \"%m\") == format.Date(max(DataVideos$date), \"%m\") & format.Date(DataVideos$date, \"%Y\") == format.Date(max(DataVideos$date), \"%Y\")),], \"date\", summarize, video_views = sum(post_video_views))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(video_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Videos CV - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Videos CV Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Videos CV\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Videos CV\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisVideosTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 0 & DataVideos$date >= \"2017-01-01\"),], .(date = format(DataVideos[which(DataVideos$video_meme == 0 & DataVideos$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, video_views = sum(post_video_views))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"video_content_views\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$video_content_views-DataMonth$video_views)/DataMonth$video_content_views\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$video_views)),]\n    \n    DataMonth$video_content_views <- format( DataMonth$video_content_views, big.mark = \",\")\n    DataMonth$video_views <- format( DataMonth$video_views, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisVideos <- renderHighchart({\n    \n    if(input$videos_kpi_select_repost == \"Originals\"){\n      \n      DataVideos <- DataVideos[which(DataVideos$original == 1),]\n      \n    }\n    \n    else if (input$videos_kpi_select_repost == \"Reposts\"){\n      \n      DataVideos <- DataVideos[which(DataVideos$original == 0),]\n    }\n    \n    date_selected <- as.Date(paste(input$kpis_month_videos, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 0 & format.Date(DataVideos$date, \"%m\") == month_selected & format.Date(DataVideos$date, \"%Y\") == year_selected),], \"date\", summarize, video_views = sum(post_video_views), interactions = sum(total_interactions), reach = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_video_views <- cumsum(DataMonth$video_views)\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    DataMonth$total_reach <- cumsum(DataMonth$reach)\n    \n    slope <- ifelse(input$videos_kpi_select_variable == \"Content Views\",lm(cumsum(video_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], ifelse(input$videos_kpi_select_variable == \"Interactions\", lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]))\n   \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$videos_kpi_select_variable == \"Content Views\", DataMonth[x,]$video_views, ifelse(input$videos_kpi_select_variable == \"Interactions\", DataMonth[x,]$interactions, DataMonth[x,]$reach)))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$videos_kpi_select_variable == \"Content Views\", DataMonth[x,]$total_video_views, ifelse(input$videos_kpi_select_variable == \"Interactions\", DataMonth[x,]$total_interactions, DataMonth[x,]$total_reach)))\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$video_content_views, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text = \"Videos CV - Daily\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = input$videos_kpi_select_variable)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = paste(\"Daily\", input$videos_kpi_select_variable, sep = \" \"), type = \"column\") %>%\n      hc_add_series(data = ds_total, name = paste(\"Total\", input$videos_kpi_select_variable, sep = \" \"), type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  \n  output$PlotKpisVideoMemesMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_video_memes, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 1 & DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),], .(date = format(DataVideos[which(DataVideos$video_meme == 1 & DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, video_views = sum(post_video_views))\n    \n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_video_views <- cumsum(as.numeric(DataMonth$video_views))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$video_views))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_video_views)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$video_meme_content_views)\n    })\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 1 & format.Date(DataVideos$date, \"%m\") == format.Date(max(DataVideos$date), \"%m\") & format.Date(DataVideos$date, \"%Y\") == format.Date(max(DataVideos$date), \"%Y\")),], \"date\", summarize, video_views = sum(post_video_views))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(video_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Video Memes CV - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Video Memes CV Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Video Memes CV\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Video Memes CV\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisVideoMemesTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 1 & DataVideos$date >= \"2017-01-01\"),], .(date = format(DataVideos[which(DataVideos$video_meme == 1 & DataVideos$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, video_views = sum(post_video_views))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"video_meme_content_views\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$video_meme_content_views-DataMonth$video_views)/DataMonth$video_meme_content_views\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$video_views)),]\n    \n    DataMonth$video_meme_content_views <- format( DataMonth$video_meme_content_views, big.mark = \",\")\n    DataMonth$video_views <- format( DataMonth$video_views, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisVideoMemes <- renderHighchart({\n    \n    if(input$video_memes_kpi_select_repost == \"Originals\"){\n      \n      DataVideos <- DataVideos[which(DataVideos$original == 1),]\n      \n    }\n    \n    else if (input$video_memes_kpi_select_repost == \"Reposts\"){\n      \n      DataVideos <- DataVideos[which(DataVideos$original == 0),]\n    }\n    \n    date_selected <- as.Date(paste(input$kpis_month_video_memes, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 1 & format.Date(DataVideos$date, \"%m\") == month_selected & format.Date(DataVideos$date, \"%Y\") == year_selected),], \"date\", summarize, video_views = sum(post_video_views), interactions = sum(total_interactions), reach = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_video_views <- cumsum(DataMonth$video_views)\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    DataMonth$total_reach <- cumsum(DataMonth$reach)\n    \n    slope <- ifelse(input$video_memes_kpi_select_variable == \"Content Views\",lm(cumsum(video_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], ifelse(input$video_memes_kpi_select_variable == \"Interactions\", lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]))\n\n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$video_memes_kpi_select_variable == \"Content Views\", DataMonth[x,]$video_views, ifelse(input$video_memes_kpi_select_variable == \"Interactions\", DataMonth[x,]$interactions, DataMonth[x,]$reach)))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$video_memes_kpi_select_variable == \"Content Views\", DataMonth[x,]$total_video_views, ifelse(input$video_memes_kpi_select_variable == \"Interactions\", DataMonth[x,]$total_interactions, DataMonth[x,]$total_reach)))\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$video_meme_content_views, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n\n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text = \"Video Memes CV - Daily\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = input$video_memes_kpi_select_variable)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = paste(\"Daily\", input$video_memes_kpi_select_variable, sep = \" \"), type = \"column\") %>%\n      hc_add_series(data = ds_total, name = paste(\"Total\", input$video_memes_kpi_select_variable, sep = \" \"), type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n\n  \n  \n  output$PlotKpisMemesMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_memes, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataPhotos[which(DataPhotos$date >= year_selected & DataPhotos$date < year_selected + years(1)),], .(date = format(DataPhotos[which(DataPhotos$date >= year_selected & DataPhotos$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, photo_views = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_photo_views <- cumsum(as.numeric(DataMonth$photo_views))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$photo_views))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_photo_views)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$meme_content_views)\n    })\n    \n    DataMonth <- ddply(DataPhotos[which(format.Date(DataPhotos$date, \"%m\") == format.Date(max(DataPhotos$date), \"%m\") & format.Date(DataPhotos$date, \"%Y\") == format.Date(max(DataPhotos$date), \"%Y\")),], \"date\", summarize, photo_views = sum(post_reach))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(photo_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Memes CV - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Memes CV Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Memes CV\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Memes CV\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisMemesTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataPhotos[which(DataPhotos$date >= \"2017-01-01\"),], .(date = format(DataPhotos[which(DataPhotos$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, photo_views = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"meme_content_views\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$meme_content_views-DataMonth$photo_views)/DataMonth$meme_content_views\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$photo_views)),]\n    \n    DataMonth$meme_content_views <- format( DataMonth$meme_content_views, big.mark = \",\")\n    DataMonth$photo_views <- format( DataMonth$photo_views, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisMemes <- renderHighchart({\n    \n    if(input$memes_kpi_select_repost == \"Originals\"){\n      \n      DataPhotos <- DataPhotos[which(DataPhotos$original == 1),]\n      \n    }\n    \n    else if (input$memes_kpi_select_repost == \"Reposts\"){\n      \n      DataPhotos <- DataPhotos[which(DataPhotos$original == 0),]\n    }\n    \n    date_selected <- as.Date(paste(input$kpis_month_memes, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n\n    DataMonth <- ddply(DataPhotos[which(format.Date(DataPhotos$date, \"%m\") == month_selected & format.Date(DataPhotos$date, \"%Y\") == year_selected),], \"date\", summarize, photo_views = sum(post_reach), interactions = sum(total_interactions))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_photo_views <- cumsum(DataMonth$photo_views)\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    \n    slope <- ifelse(input$memes_kpi_select_variable == \"Content Views\", lm(cumsum(photo_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])\n\n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$photo_views)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_photo_views)\n    })\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$memes_kpi_select_variable == \"Content Views\", DataMonth[x,]$photo_views, DataMonth[x,]$interactions))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$memes_kpi_select_variable == \"Content Views\", DataMonth[x,]$total_photo_views, DataMonth[x,]$total_interactions))\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$meme_content_views, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n\n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text = \"Memes CV - Daily\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = input$memes_kpi_select_variable)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = paste(\"Daily\", input$memes_kpi_select_variable, sep = \" \"), type = \"column\") %>%\n      hc_add_series(data = ds_total, name = paste(\"Total\", input$memes_kpi_select_variable, sep = \" \"), type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n\n  })\n  \n  # 3.2. KPIS - Bad Hombres ---------------------------------------------------------------------------------------------------------------------------\n  \n  output$BHPlotKpis <- renderHighchart({\n    \n    input$bh_plot_kpis\n    isolate({\n      \n      dates <- data.frame(date = DataBH$date)\n      dates$date <- as.POSIXct(dates$date)\n      \n      articles_originals <- merge(dates, data.frame(date = DataArticlesBH[which(DataArticlesBH$original == 1),]$date, num = rep(1,nrow(DataArticlesBH[which(DataArticlesBH$original == 1),]))), by = \"date\", all = TRUE)\n      articles_originals <- as.xts(articles_originals[,\"num\"], order.by = articles_originals[,\"date\"])\n      \n      videos_originals <- merge(dates, data.frame(date = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 1),]$date, num = rep(1,nrow(DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 1),]))), by = \"date\", all = TRUE)\n      videos_originals <- as.xts(videos_originals[,\"num\"], order.by = videos_originals[,\"date\"])\n      \n      video_memes_originals <- merge(dates, data.frame(date = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 1),]$date, num = rep(1,nrow(DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 1),]))), by = \"date\", all = TRUE)\n      video_memes_originals <- as.xts(video_memes_originals[,\"num\"], order.by = video_memes_originals[,\"date\"])\n      \n      memes_originals <- merge(dates, data.frame(date = DataPhotosBH[which(DataPhotosBH$original == 1),]$date, num = rep(1,nrow(DataPhotosBH[which(DataPhotosBH$original == 1),]))), by = \"date\", all = TRUE)\n      memes_originals <- as.xts(memes_originals[,\"num\"], order.by = memes_originals[,\"date\"])\n      \n      \n      articles_reposts <- merge(dates, data.frame(date = DataArticlesBH[which(DataArticlesBH$original == 0),]$date, num = rep(1,nrow(DataArticlesBH[which(DataArticlesBH$original == 0),]))), by = \"date\", all = TRUE)\n      articles_reposts <- as.xts(articles_reposts[,\"num\"], order.by = articles_reposts[,\"date\"])\n      \n      videos_reposts <- merge(dates, data.frame(date = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 0),]$date, num = rep(1,nrow(DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 0),]))), by = \"date\", all = TRUE)\n      videos_reposts <- as.xts(videos_reposts[,\"num\"], order.by = videos_reposts[,\"date\"])\n      \n      video_memes_reposts <- merge(dates, data.frame(date = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 0),]$date, num = rep(1,nrow(DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 0),]))), by = \"date\", all = TRUE)\n      video_memes_reposts <- as.xts(video_memes_reposts[,\"num\"], order.by = video_memes_reposts[,\"date\"])\n      \n      memes_reposts <- merge(dates, data.frame(date = DataPhotosBH[which(DataPhotosBH$original == 0),]$date, num = rep(1,nrow(DataPhotosBH[which(DataPhotosBH$original == 0),]))), by = \"date\", all = TRUE)\n      memes_reposts <- as.xts(memes_reposts[,\"num\"], order.by = memes_reposts[,\"date\"])\n      \n      colores<- c('#08415C', 'url(#custom-pattern)', '#CC2936', 'url(#custom-pattern-1)', '#EBBAB9', 'url(#custom-pattern-2)','#388697','url(#custom-pattern-3)')\n      # colores<- c('#08415C', '#08415C', '#CC2936', '#CC2936', '#EBBAB9', '#EBBAB9','#388697','#388697')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Content Output\")) %>%\n        hc_add_series(articles_originals, name = \"Article Originals\", type = input$bh_chart_type_kpis) %>%\n        hc_add_series(articles_reposts, name = \"Article Reposts\", type = input$bh_chart_type_kpis) %>%\n        hc_add_series(videos_originals, name = \"Video Originals\", type = input$bh_chart_type_kpis) %>%\n        hc_add_series(videos_reposts, name = \"Video Reposts\", type = input$bh_chart_type_kpis) %>%\n        hc_add_series(video_memes_originals, name = \"Video Meme Originals\", type = input$bh_chart_type_kpis) %>%\n        hc_add_series(video_memes_reposts, name = \"Video Meme Reposts\", type = input$bh_chart_type_kpis) %>%\n        hc_add_series(memes_originals, name = \"Meme Originals\", type = input$bh_chart_type_kpis) %>%\n        hc_add_series(memes_reposts, name = \"Meme Reposts\", type = input$bh_chart_type_kpis) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$bh_chart_time_kpis == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$bh_chart_type_kpis == \"area\" || input$bh_chart_type_kpis == \"column\"){if(input$bh_chart_stack_kpis != \"none\"){input$bh_chart_stack_kpis}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$bh_chart_time_kpis, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())%>%\n        hc_defs(patterns = list(list(id = \"custom-pattern\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#08415C', strokeWidth = 2)), list(id = \"custom-pattern-1\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#CC2936', strokeWidth = 2)), list(id = \"custom-pattern-2\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#EBBAB9', strokeWidth = 2)), list(id = \"custom-pattern-3\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#388697', strokeWidth = 2))))\n      hc\n    })\n  })\n  \n  output$BHPlotKpis1 <- renderHighchart({\n    \n    input$bh_plot_kpis1\n    isolate({\n      \n      dates <- data.frame(created_time = DataBH$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      articles_originals <- merge(dates, data.frame(created_time = DataArticlesBH[which(DataArticlesBH$original == 1),]$created_time, num = DataArticlesBH[which(DataArticlesBH$original == 1),]$link_clicks), by = \"created_time\", all = TRUE)\n      articles_originals <- as.xts(articles_originals[,\"num\"], order.by = articles_originals[,\"created_time\"])\n      \n      videos_originals <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 1),]$created_time, num = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 1),]$post_video_views), by = \"created_time\", all = TRUE)\n      videos_originals <- as.xts(videos_originals[,\"num\"], order.by = videos_originals[,\"created_time\"])\n      \n      video_memes_originals <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 1),]$created_time, num = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 1),]$post_video_views), by = \"created_time\", all = TRUE)\n      video_memes_originals <- as.xts(video_memes_originals[,\"num\"], order.by = video_memes_originals[,\"created_time\"])\n      \n      memes_originals <- merge(dates, data.frame(created_time = DataPhotosBH[which(DataPhotosBH$original == 1),]$created_time, num = DataPhotosBH[which(DataPhotosBH$original == 1),]$post_reach), by = \"created_time\", all = TRUE)\n      memes_originals <- as.xts(memes_originals[,\"num\"], order.by = memes_originals[,\"created_time\"])\n      \n      \n      articles_reposts <- merge(dates, data.frame(created_time = DataArticlesBH[which(DataArticlesBH$original == 0),]$created_time, num = DataArticlesBH[which(DataArticlesBH$original == 0),]$link_clicks), by = \"created_time\", all = TRUE)\n      articles_reposts <- as.xts(articles_reposts[,\"num\"], order.by = articles_reposts[,\"created_time\"])\n      \n      videos_reposts <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 0),]$created_time, num = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 0),]$post_video_views), by = \"created_time\", all = TRUE)\n      videos_reposts <- as.xts(videos_reposts[,\"num\"], order.by = videos_reposts[,\"created_time\"])\n      \n      video_memes_reposts <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 0),]$created_time, num = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 0),]$post_video_views), by = \"created_time\", all = TRUE)\n      video_memes_reposts <- as.xts(video_memes_reposts[,\"num\"], order.by = video_memes_reposts[,\"created_time\"])\n      \n      memes_reposts <- merge(dates, data.frame(created_time = DataPhotosBH[which(DataPhotosBH$original == 0),]$created_time, num = DataPhotosBH[which(DataPhotosBH$original == 0),]$post_reach), by = \"created_time\", all = TRUE)\n      memes_reposts <- as.xts(memes_reposts[,\"num\"], order.by = memes_reposts[,\"created_time\"])\n      \n      \n      colores<- c('#08415C', 'url(#custom-pattern)', '#CC2936', 'url(#custom-pattern-1)', '#EBBAB9', 'url(#custom-pattern-2)','#388697','url(#custom-pattern-3)')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Content Views\")) %>%\n        hc_add_series(articles_originals, name = \"Article Originals\", type = input$bh_chart_type_kpis1) %>%\n        hc_add_series(articles_reposts, name = \"Article Reposts\", type = input$bh_chart_type_kpis1) %>%\n        hc_add_series(videos_originals, name = \"Video Originals\", type = input$bh_chart_type_kpis1) %>%\n        hc_add_series(videos_reposts, name = \"Video Reposts\", type = input$bh_chart_type_kpis1) %>%\n        hc_add_series(video_memes_originals, name = \"Video Meme Originals\", type = input$bh_chart_type_kpis1) %>%\n        hc_add_series(video_memes_reposts, name = \"Video Meme Reposts\", type = input$bh_chart_type_kpis1) %>%\n        hc_add_series(memes_originals, name = \"Meme Originals\", type = input$bh_chart_type_kpis1) %>%\n        hc_add_series(memes_reposts, name = \"Meme Reposts\", type = input$bh_chart_type_kpis1) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$bh_chart_time_kpis1 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$bh_chart_type_kpis1 == \"area\" || input$bh_chart_type_kpis1 == \"column\"){if(input$bh_chart_stack_kpis1 != \"none\"){input$bh_chart_stack_kpis1}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$bh_chart_time_kpis1, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())%>%\n        hc_defs(patterns = list(list(id = \"custom-pattern\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#08415C', strokeWidth = 2)), list(id = \"custom-pattern-1\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#CC2936', strokeWidth = 2)), list(id = \"custom-pattern-2\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#EBBAB9', strokeWidth = 2)), list(id = \"custom-pattern-3\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#388697', strokeWidth = 2))))\n      \n      hc\n    })\n  })\n  \n  output$BHPlotKpis2 <- renderHighchart({\n    \n    input$bh_plot_kpis2\n    isolate({\n      \n      dates <- data.frame(created_time = DataBH$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      articles_originals <- merge(dates, data.frame(created_time = DataArticlesBH[which(DataArticlesBH$original == 1),]$created_time, num = DataArticlesBH[which(DataArticlesBH$original == 1),]$total_interactions), by = \"created_time\", all = TRUE)\n      articles_originals <- as.xts(articles_originals[,\"num\"], order.by = articles_originals[,\"created_time\"])\n      \n      videos_originals <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 1),]$created_time, num = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 1),]$total_interactions), by = \"created_time\", all = TRUE)\n      videos_originals <- as.xts(videos_originals[,\"num\"], order.by = videos_originals[,\"created_time\"])\n      \n      video_memes_originals <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 1),]$created_time, num = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 1),]$total_interactions), by = \"created_time\", all = TRUE)\n      video_memes_originals <- as.xts(video_memes_originals[,\"num\"], order.by = video_memes_originals[,\"created_time\"])\n      \n      memes_originals <- merge(dates, data.frame(created_time = DataPhotosBH[which(DataPhotosBH$original == 1),]$created_time, num = DataPhotosBH[which(DataPhotosBH$original == 1),]$total_interactions), by = \"created_time\", all = TRUE)\n      memes_originals <- as.xts(memes_originals[,\"num\"], order.by = memes_originals[,\"created_time\"])\n      \n      \n      articles_reposts <- merge(dates, data.frame(created_time = DataArticlesBH[which(DataArticlesBH$original == 0),]$created_time, num = DataArticlesBH[which(DataArticlesBH$original == 0),]$total_interactions), by = \"created_time\", all = TRUE)\n      articles_reposts <- as.xts(articles_reposts[,\"num\"], order.by = articles_reposts[,\"created_time\"])\n      \n      videos_reposts <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 0),]$created_time, num = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 0),]$total_interactions), by = \"created_time\", all = TRUE)\n      videos_reposts <- as.xts(videos_reposts[,\"num\"], order.by = videos_reposts[,\"created_time\"])\n      \n      video_memes_reposts <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 0),]$created_time, num = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 0),]$total_interactions), by = \"created_time\", all = TRUE)\n      video_memes_reposts <- as.xts(video_memes_reposts[,\"num\"], order.by = video_memes_reposts[,\"created_time\"])\n      \n      memes_reposts <- merge(dates, data.frame(created_time = DataPhotosBH[which(DataPhotosBH$original == 0),]$created_time, num = DataPhotosBH[which(DataPhotosBH$original == 0),]$total_interactions), by = \"created_time\", all = TRUE)\n      memes_reposts <- as.xts(memes_reposts[,\"num\"], order.by = memes_reposts[,\"created_time\"])\n      \n      colores<- c('#08415C', 'url(#custom-pattern)', '#CC2936', 'url(#custom-pattern-1)', '#EBBAB9', 'url(#custom-pattern-2)','#388697','url(#custom-pattern-3)')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Interactions\")) %>%\n        hc_add_series(articles_originals, name = \"Article Originals\", type = input$bh_chart_type_kpis2) %>%\n        hc_add_series(articles_reposts, name = \"Article Reposts\", type = input$bh_chart_type_kpis2) %>%\n        hc_add_series(videos_originals, name = \"Video Originals\", type = input$bh_chart_type_kpis2) %>%\n        hc_add_series(videos_reposts, name = \"Video Reposts\", type = input$bh_chart_type_kpis2) %>%\n        hc_add_series(video_memes_originals, name = \"Video Meme Originals\", type = input$bh_chart_type_kpis2) %>%\n        hc_add_series(video_memes_reposts, name = \"Video Meme Reposts\", type = input$bh_chart_type_kpis2) %>%\n        hc_add_series(memes_originals, name = \"Meme Originals\", type = input$bh_chart_type_kpis2) %>%\n        hc_add_series(memes_reposts, name = \"Meme Reposts\", type = input$bh_chart_type_kpis2) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$bh_chart_time_kpis2 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$bh_chart_type_kpis2 == \"area\" || input$bh_chart_type_kpis2 == \"column\"){if(input$bh_chart_stack_kpis2 != \"none\"){input$bh_chart_stack_kpis2}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$bh_chart_time_kpis2, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())%>%\n        hc_defs(patterns = list(list(id = \"custom-pattern\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#08415C', strokeWidth = 2)), list(id = \"custom-pattern-1\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#CC2936', strokeWidth = 2)), list(id = \"custom-pattern-2\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#EBBAB9', strokeWidth = 2)), list(id = \"custom-pattern-3\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#388697', strokeWidth = 2))))%>%\n        hc_defs(patterns = list(list(id = \"custom-pattern\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#08415C', strokeWidth = 2)), list(id = \"custom-pattern-1\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#CC2936', strokeWidth = 2)), list(id = \"custom-pattern-2\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#EBBAB9', strokeWidth = 2)), list(id = \"custom-pattern-3\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#388697', strokeWidth = 2))))\n      hc\n    })\n  })\n  \n  output$BHPlotKpis3 <- renderHighchart({\n    \n    input$bh_plot_kpis3\n    isolate({\n      \n      dates <- data.frame(created_time = DataBH$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      articles_originals <- merge(dates, data.frame(created_time = DataArticlesBH[which(DataArticlesBH$original == 1),]$created_time, num = DataArticlesBH[which(DataArticlesBH$original == 1),]$post_reach), by = \"created_time\", all = TRUE)\n      articles_originals <- as.xts(articles_originals[,\"num\"], order.by = articles_originals[,\"created_time\"])\n      \n      videos_originals <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 1),]$created_time, num = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 1),]$post_reach), by = \"created_time\", all = TRUE)\n      videos_originals <- as.xts(videos_originals[,\"num\"], order.by = videos_originals[,\"created_time\"])\n      \n      video_memes_originals <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 1),]$created_time, num = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 1),]$post_reach), by = \"created_time\", all = TRUE)\n      video_memes_originals <- as.xts(video_memes_originals[,\"num\"], order.by = video_memes_originals[,\"created_time\"])\n      \n      memes_originals <- merge(dates, data.frame(created_time = DataPhotosBH[which(DataPhotosBH$original == 1),]$created_time, num = DataPhotosBH[which(DataPhotosBH$original == 1),]$post_reach), by = \"created_time\", all = TRUE)\n      memes_originals <- as.xts(memes_originals[,\"num\"], order.by = memes_originals[,\"created_time\"])\n      \n      \n      articles_reposts <- merge(dates, data.frame(created_time = DataArticlesBH[which(DataArticlesBH$original == 0),]$created_time, num = DataArticlesBH[which(DataArticlesBH$original == 0),]$post_reach), by = \"created_time\", all = TRUE)\n      articles_reposts <- as.xts(articles_reposts[,\"num\"], order.by = articles_reposts[,\"created_time\"])\n      \n      videos_reposts <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 0),]$created_time, num = DataVideosBH[which(DataVideosBH$video_meme == 0 & DataVideosBH$original == 0),]$post_reach), by = \"created_time\", all = TRUE)\n      videos_reposts <- as.xts(videos_reposts[,\"num\"], order.by = videos_reposts[,\"created_time\"])\n      \n      video_memes_reposts <- merge(dates, data.frame(created_time = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 0),]$created_time, num = DataVideosBH[which(DataVideosBH$video_meme == 1 & DataVideosBH$original == 0),]$post_reach), by = \"created_time\", all = TRUE)\n      video_memes_reposts <- as.xts(video_memes_reposts[,\"num\"], order.by = video_memes_reposts[,\"created_time\"])\n      \n      memes_reposts <- merge(dates, data.frame(created_time = DataPhotosBH[which(DataPhotosBH$original == 0),]$created_time, num = DataPhotosBH[which(DataPhotosBH$original == 0),]$post_reach), by = \"created_time\", all = TRUE)\n      memes_reposts <- as.xts(memes_reposts[,\"num\"], order.by = memes_reposts[,\"created_time\"])\n      \n      colores<- c('#08415C', 'url(#custom-pattern)', '#CC2936', 'url(#custom-pattern-1)', '#EBBAB9', 'url(#custom-pattern-2)','#388697','url(#custom-pattern-3)')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>%\n        hc_add_series(articles_originals, name = \"Article Originals\", type = input$bh_chart_type_kpis3) %>%\n        hc_add_series(articles_reposts, name = \"Article Reposts\", type = input$bh_chart_type_kpis3) %>%\n        hc_add_series(videos_originals, name = \"Video Originals\", type = input$bh_chart_type_kpis3) %>%\n        hc_add_series(videos_reposts, name = \"Video Reposts\", type = input$bh_chart_type_kpis3) %>%\n        hc_add_series(video_memes_originals, name = \"Video Meme Originals\", type = input$bh_chart_type_kpis3) %>%\n        hc_add_series(video_memes_reposts, name = \"Video Meme Reposts\", type = input$bh_chart_type_kpis3) %>%\n        hc_add_series(memes_originals, name = \"Meme Originals\", type = input$bh_chart_type_kpis3) %>%\n        hc_add_series(memes_reposts, name = \"Meme Reposts\", type = input$bh_chart_type_kpis3) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$bh_chart_time_kpis3 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$bh_chart_type_kpis3 == \"area\" || input$bh_chart_type_kpis3 == \"column\"){if(input$bh_chart_stack_kpis3 != \"none\"){input$bh_chart_stack_kpis3}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$bh_chart_time_kpis3, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$BHPlotKpisContentOutputMonth <- renderHighchart({\n    \n    dates <- data.frame(date = format(DataGoalsBH$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataBH[which(DataBH$date >= \"2017-01-01\"),], .(date = format(DataBH[which(DataBH$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_content_output <- cumsum(as.numeric(DataMonth$content_output))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$content_output))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_content_output)\n    })\n    \n    DataGoalsBH$date <- format(DataGoalsBH$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoalsBH, by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = sum(DataGoal[x,]$video_original_output, DataGoal[x,]$video_repost_output, DataGoal[x,]$video_meme_output, DataGoal[x,]$article_original_output, DataGoal[x,]$article_repost_output, DataGoal[x,]$meme_original_output, DataGoal[x,]$meme_repost_output, na.rm = TRUE))\n    })\n    \n    # DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == format.Date(max(DataBH$date), \"%m\") & format.Date(DataBH$date, \"%Y\") == format.Date(max(DataBH$date), \"%Y\")),], \"date\", summarize, reach = sum(post_reach))\n    # \n    # DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(DataBH$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(DataBH$date), \"%Y-%m-01\"))))*(lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    # \n    # DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    # \n    # ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n    #   list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    # })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Content Output - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Reach\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Content Output Goal\", pointPadding = 0) %>%\n      # hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Content Output\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Content Output\", type = \"spline\") %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisContentOutputTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Content Output - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisContentOutput <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$bh_kpis_month_content_output, \"01\"), \"%b %Y %d\")\n    \n    # date_selected <- as.Date(paste(\"abr. 2017\", \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == month_selected & format.Date(DataBH$date, \"%Y\") == year_selected),], \"date\", summarize, content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(DataBH$date)] <- 0\n    DataMonth$total_content_output <- cumsum(DataMonth$content_output)\n    \n    slope <- lm(cumsum(content_output) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$content_output)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_content_output)\n    })\n    \n    DataGoalsBH$total_content_output <- rowSums(cbind(DataGoalsBH$video_original_output, DataGoalsBH$video_repost_output, DataGoalsBH$video_meme_output, DataGoalsBH$article_original_output, DataGoalsBH$article_repost_output, DataGoalsBH$meme_original_output, DataGoalsBH$meme_repost_output), na.rm = TRUE)\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m-%d\") %in% DataGoalsBH$date, DataGoalsBH[which(DataGoalsBH$date == format(date_selected, \"%Y-%m-%d\")),]$total_content_output, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Content Output - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Output\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Content Output\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Content Output\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisArticleContentOutputMonth <- renderHighchart({\n    \n    dates <- data.frame(date = format(DataGoalsBH$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataBH[which(DataBH$date >= \"2017-01-01\" & DataBH$post_type == \"link\"),], .(date = format(DataBH[which(DataBH$date >= \"2017-01-01\" & DataBH$post_type == \"link\"),]$date, \"%Y-%m\")), summarize, article_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_article_content_output <- cumsum(as.numeric(DataMonth$article_content_output))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$article_content_output))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_article_content_output)\n    })\n    \n    DataGoalsBH$date <- format(DataGoalsBH$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoalsBH, by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = sum(DataGoal[x,]$article_original_output, DataGoal[x,]$article_repost_output, na.rm = TRUE))\n    })\n    \n    # DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == format.Date(max(DataBH$date), \"%m\") & format.Date(DataBH$date, \"%Y\") == format.Date(max(DataBH$date), \"%Y\")),], \"date\", summarize, reach = sum(post_reach))\n    # \n    # DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(DataBH$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(DataBH$date), \"%Y-%m-01\"))))*(lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    # \n    # DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    # \n    # ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n    #   list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    # })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Article Output - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Article Output Goal\", pointPadding = 0) %>%\n      # hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Article Output\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Article Output\", type = \"spline\") %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisArticleContentOutputTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Article Output - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisArticleContentOutput <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$bh_kpis_month_article_content_output, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == month_selected & format.Date(DataBH$date, \"%Y\") == year_selected & DataBH$post_type == \"link\"),], \"date\", summarize, article_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(DataBH$date)] <- 0\n    DataMonth$total_article_content_output <- NA\n    DataMonth[!is.na(DataMonth$article_content_output),]$total_article_content_output <- cumsum(DataMonth[!is.na(DataMonth$article_content_output),]$article_content_output)\n    \n    slope <- lm(cumsum(article_content_output) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$article_content_output)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_article_content_output)\n    })\n    \n    DataGoalsBH$total_article_content_output <- rowSums(cbind(DataGoalsBH$article_original_output, DataGoalsBH$article_repost_output), na.rm = TRUE)\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m-%d\") %in% DataGoalsBH$date, DataGoalsBH[which(DataGoalsBH$date == format(date_selected, \"%Y-%m-%d\")),]$total_article_content_output, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n\n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Article Output - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Article Output\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Article Output\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisVideoContentOutputMonth <- renderHighchart({\n    \n    dates <- data.frame(date = format(DataGoalsBH$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataBH[which(DataBH$date >= \"2017-01-01\" & DataBH$post_type == \"video\"),], .(date = format(DataBH[which(DataBH$date >= \"2017-01-01\" & DataBH$post_type == \"video\"),]$date, \"%Y-%m\")), summarize, video_content_output = ifelse(is.na(length(post_reach)), 0, length(post_reach)))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_video_content_output <- NA\n    DataMonth[!is.na(DataMonth$video_content_output),]$total_video_content_output <- cumsum(as.numeric(DataMonth[!is.na(DataMonth$video_content_output),]$video_content_output))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$video_content_output))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_video_content_output)\n    })\n    \n    DataGoalsBH$date <- format(DataGoalsBH$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoalsBH, by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = sum(DataGoal[x,]$video_original_output, DataGoal[x,]$video_repost_output, na.rm = TRUE))\n    })\n    \n    # DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == format.Date(max(DataBH$date), \"%m\") & format.Date(DataBH$date, \"%Y\") == format.Date(max(DataBH$date), \"%Y\")),], \"date\", summarize, reach = sum(post_reach))\n    # \n    # DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(DataBH$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(DataBH$date), \"%Y-%m-01\"))))*(lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    # \n    # DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    # \n    # ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n    #   list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    # })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Video Output - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Video Output Goal\", pointPadding = 0) %>%\n      # hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Video Output\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Video Output\", type = \"spline\") %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisVideoContentOutputTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Video Output - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisVideoContentOutput <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$bh_kpis_month_video_content_output, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == month_selected & format.Date(DataBH$date, \"%Y\") == year_selected & DataBH$post_type == \"video\"),], \"date\", summarize, video_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(DataBH$date)] <- 0\n    DataMonth$total_video_content_output <- cumsum(DataMonth$video_content_output)\n    \n    slope <- lm(cumsum(video_content_output) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$video_content_output)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_video_content_output)\n    })\n    \n    DataGoalsBH$total_video_content_output <- rowSums(cbind(DataGoalsBH$video_original_output, DataGoalsBH$video_repost_output), na.rm = TRUE)\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m-%d\") %in% DataGoalsBH$date, DataGoalsBH[which(DataGoalsBH$date == format(date_selected, \"%Y-%m-%d\")),]$total_video_content_output, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Video Output - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Video Output\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Video Output\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisMemeContentOutputMonth <- renderHighchart({\n    \n    dates <- data.frame(date = format(DataGoalsBH$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataBH[which(DataBH$date >= \"2017-01-01\" & DataBH$post_type == \"photo\"),], .(date = format(DataBH[which(DataBH$date >= \"2017-01-01\" & DataBH$post_type == \"photo\"),]$date, \"%Y-%m\")), summarize, meme_content_output = ifelse(is.na(length(post_reach)), 0, length(post_reach)))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_meme_content_output <- cumsum(as.numeric(DataMonth$meme_content_output))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$meme_content_output))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_meme_content_output)\n    })\n    \n    DataGoalsBH$date <- format(DataGoalsBH$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoalsBH, by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = sum(DataGoal[x,]$meme_original_output, DataGoal[x,]$meme_repost_output, na.rm = TRUE))\n    })\n    \n    # DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == format.Date(max(DataBH$date), \"%m\") & format.Date(DataBH$date, \"%Y\") == format.Date(max(DataBH$date), \"%Y\")),], \"date\", summarize, reach = sum(post_reach))\n    # \n    # DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(DataBH$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(DataBH$date), \"%Y-%m-01\"))))*(lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    # \n    # DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    # \n    # ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n    #   list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    # })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Meme Output - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Meme Output Goal\", pointPadding = 0) %>%\n      # hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Meme Output\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Meme Output\", type = \"spline\") %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisMemeContentOutputTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Meme Output - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisMemeContentOutput <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$bh_kpis_month_meme_content_output, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == month_selected & format.Date(DataBH$date, \"%Y\") == year_selected & DataBH$post_type == \"photo\"),], \"date\", summarize, meme_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(DataBH$date)] <- 0\n    DataMonth$total_meme_content_output <- cumsum(DataMonth$meme_content_output)\n    \n    slope <- lm(cumsum(meme_content_output) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$meme_content_output)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_meme_content_output)\n    })\n    \n    DataGoalsBH$total_meme_content_output <- rowSums(cbind(DataGoalsBH$meme_original_output, DataGoalsBH$meme_repost_output), na.rm = TRUE)\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m-%d\") %in% DataGoalsBH$date, DataGoalsBH[which(DataGoalsBH$date == format(date_selected, \"%Y-%m-%d\")),]$total_meme_content_output, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Meme Output - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Meme Output\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Meme Output\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisTotalFollowers <- renderHighchart({\n    \n    dates <- data.frame(date = format(DataGoalsBH$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataBH[which(DataBH$date >= \"2017-01-01\"),], \"date\", summarize, page_followers = mean(page_total_likes), new_followers = mean(page_new_likes))\n    \n    DataMonth <- ddply(DataMonth, .(date = format(DataMonth$date, \"%Y-%m\")), summarize, page_followers = max(page_followers), new_followers = sum(new_followers))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$page_followers))\n    })\n    \n    DataGoalsBH$date <- format(DataGoalsBH$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoalsBH, by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$total_followers)\n    })\n    \n    # DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == format.Date(max(DataBH$date), \"%m\") & format.Date(DataBH$date, \"%Y\") == format.Date(max(DataBH$date), \"%Y\")),], \"date\", summarize, total_followers = mean(page_total_likes), new_followers = mean(page_new_likes))\n    # \n    # DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(DataBH$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(DataBH$date), \"%Y-%m-01\"))))*(lm(cumsum(new_followers) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    # \n    # DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    # \n    # ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n    #   list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    # })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Total Followers\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Totla Followers\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Total Followers Goal\", pointPadding = 0) %>%\n      # hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Total Followers\", pointPadding = 0.2) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisNewFollowersMonth16 <- renderHighchart({\n    \n    dates <- data.frame(date = format(seq(min(DataBH[which(DataBH$date >= \"2016-01-01\"),]$date), max(DataBH[which(DataBH$date < \"2017-01-01\"),]$date), by = \"month\"), \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataBH[which(DataBH$date >= \"2016-01-01\" & DataBH$date < \"2017-01-01\"),], \"date\", summarize, total_followers = mean(page_total_likes), new_followers = mean(page_new_likes))\n    \n    DataMonth <- ddply(DataMonth, .(date = format(DataMonth$date, \"%Y-%m\")), summarize, total_followers = sum(total_followers), new_followers = sum(new_followers))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_new_followers <- cumsum(as.numeric(DataMonth$new_followers))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$new_followers))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_new_followers)\n    })\n    \n    # DataGoalsBH$date <- format(DataGoalsBH$date, \"%Y-%m\")\n    # \n    # DataGoal <- merge(dates, DataGoalsBH, by = \"date\", all = TRUE)\n    # \n    # ds_goal <- lapply(1:nrow(DataGoal), function(x){\n    #   list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$new_followers)\n    # })\n    # \n    # DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == format.Date(max(DataBH$date), \"%m\") & format.Date(DataBH$date, \"%Y\") == format.Date(max(DataBH$date), \"%Y\")),], \"date\", summarize, total_followers = mean(page_total_likes), new_followers = mean(page_new_likes))\n    # \n    # DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(DataBH$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(DataBH$date), \"%Y-%m-01\"))))*(lm(cumsum(new_followers) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    # \n    # DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    # \n    # ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n    #   list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    # })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"New Followers\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      # hc_add_series(data = ds_goal, name = \"New Followers Goal\", pointPadding = 0) %>%\n      # hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"New Followers\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total New Followers\", type = \"spline\") %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisNewFollowersMonth <- renderHighchart({\n    \n    # dates <- data.frame(date = format(seq(min(DataBH[which(DataBH$date >= \"2017-01-01\"),]$date), max(DataBH[which(DataBH$date >= \"2017-01-01\"),]$date), by = \"month\"), \"%Y-%m\"))\n    # \n    dates <- data.frame(date = format(DataGoalsBH$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataBH[which(DataBH$date >= \"2017-01-01\"),], \"date\", summarize, total_followers = mean(page_total_likes), new_followers = mean(page_new_likes))\n    \n    DataMonth <- ddply(DataMonth, .(date = format(DataMonth$date, \"%Y-%m\")), summarize, total_followers = sum(total_followers), new_followers = sum(new_followers))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_new_followers <- cumsum(as.numeric(DataMonth$new_followers))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$new_followers))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_new_followers)\n    })\n    \n    DataGoalsBH$date <- format(DataGoalsBH$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoalsBH, by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$new_followers)\n    })\n    \n    DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == format.Date(max(DataBH$date), \"%m\") & format.Date(DataBH$date, \"%Y\") == format.Date(max(DataBH$date), \"%Y\")),], \"date\", summarize, total_followers = mean(page_total_likes), new_followers = mean(page_new_likes))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(DataBH$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(DataBH$date), \"%Y-%m-01\"))))*(lm(cumsum(new_followers) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"New Followers - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"New Followers\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"New Followers Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"New Followers\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total New Followers\", type = \"spline\") %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisNewFollowersTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"New Followers - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisNewFollowers <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$bh_kpis_month_new_followers, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == month_selected & format.Date(DataBH$date, \"%Y\") == year_selected),], \"date\", summarize, total_followers = mean(page_total_likes), new_followers = mean(page_new_likes))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(DataBH$date)] <- 0\n    DataMonth$total_new_followers <- cumsum(DataMonth$new_followers)\n    \n    slope <- lm(cumsum(new_followers) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$new_followers)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_new_followers)\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m-%d\") %in% DataGoalsBH$date, DataGoalsBH[which(DataGoalsBH$date == format(date_selected, \"%Y-%m-%d\")),]$new_followers, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"New Followers\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily New Followers\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total New Followers\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisReachMonth16 <- renderHighchart({\n    \n    dates <- data.frame(date = format(seq(min(DataBH[which(DataBH$date >= \"2016-01-01\"),]$date), max(DataBH[which(DataBH$date < \"2017-01-01\"),]$date), by = \"month\"), \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataBH[which(DataBH$date >= \"2016-01-01\" & DataBH$date < \"2017-01-01\"),], .(date = format(DataBH[which(DataBH$date >= \"2016-01-01\" & DataBH$date < \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, reach = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_reach <- cumsum(as.numeric(DataMonth$reach))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$reach))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_reach)\n    })\n    \n    # DataGoalsBH$date <- format(DataGoalsBH$date, \"%Y-%m\")\n    # \n    # DataGoal <- merge(dates, DataGoalsBH, by = \"date\", all = TRUE)\n    # \n    # ds_goal <- lapply(1:nrow(DataGoal), function(x){\n    #   list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$reach)\n    # })\n    # \n    # DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == format.Date(max(DataBH$date), \"%m\") & format.Date(DataBH$date, \"%Y\") == format.Date(max(DataBH$date), \"%Y\")),], \"date\", summarize, reach = sum(post_reach))\n    # \n    # DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(DataBH$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(DataBH$date), \"%Y-%m-01\"))))*(lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    # \n    # DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    # \n    # ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n    #   list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    # })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Reach\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      # hc_add_series(data = ds_goal, name = \"Reach Goal\", pointPadding = 0) %>%\n      # hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Reach\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Reach\", type = \"spline\") %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisReachMonth <- renderHighchart({\n    \n    # dates <- data.frame(date = format(seq(min(DataBH[which(DataBH$date >= \"2017-01-01\"),]$date), max(DataBH[which(DataBH$date >= \"2017-01-01\"),]$date), by = \"month\"), \"%Y-%m\"))\n    \n    dates <- data.frame(date = format(DataGoalsBH$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataBH[which(DataBH$date >= \"2017-01-01\"),], .(date = format(DataBH[which(DataBH$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, reach = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_reach <- cumsum(as.numeric(DataMonth$reach))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$reach))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_reach)\n    })\n    \n    DataGoalsBH$date <- format(DataGoalsBH$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoalsBH, by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$reach)\n    })\n    \n    DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == format.Date(max(DataBH$date), \"%m\") & format.Date(DataBH$date, \"%Y\") == format.Date(max(DataBH$date), \"%Y\")),], \"date\", summarize, reach = sum(post_reach))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(DataBH$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(DataBH$date), \"%Y-%m-01\"))))*(lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Reach - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Reach\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Reach Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Reach\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Reach\", type = \"spline\") %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisReachTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Reach - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisReach <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$bh_kpis_month_reach, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == month_selected & format.Date(DataBH$date, \"%Y\") == year_selected),], \"date\", summarize, reach = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(DataBH$date)] <- 0\n    DataMonth$total_reach <- cumsum(DataMonth$reach)\n    \n    slope <- lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$reach)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_reach)\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m-%d\") %in% DataGoalsBH$date, DataGoalsBH[which(DataGoalsBH$date == format(date_selected, \"%Y-%m-%d\")),]$reach, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Reach - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Reach\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Reach\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Reach\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisEngagementMonth <- renderHighchart({\n    \n    # dates <- data.frame(date = format(seq(min(DataBH[which(DataBH$date >= \"2017-01-01\"),]$date), max(DataBH[which(DataBH$date >= \"2017-01-01\"),]$date), by = \"month\"), \"%Y-%m\"))\n    \n    dates <- data.frame(date = format(DataGoalsBH$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataBH[which(DataBH$date >= \"2017-01-01\"),], .(date = format(DataBH[which(DataBH$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, interactions = sum(total_interactions))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_interactions <- cumsum(as.numeric(DataMonth$interactions))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$interactions))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_interactions)\n    })\n    \n    DataGoalsBH$date <- format(DataGoalsBH$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoalsBH, by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$engagement)\n    })\n    \n    DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == format.Date(max(DataBH$date), \"%m\") & format.Date(DataBH$date, \"%Y\") == format.Date(max(DataBH$date), \"%Y\")),], \"date\", summarize, interactions = sum(total_interactions))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(DataBH$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(DataBH$date), \"%Y-%m-01\"))))*(lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Engagement - Monthly\", align = \"center\") %>%\n      hc_yAxis(title = list(text = \"Engagement - Monthly\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Engagement\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Engagement Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Engagement\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Engagement\", type = \"spline\") %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisEngagementTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Engagement - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisEngagement<- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$bh_kpis_month_engagement, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == month_selected & format.Date(DataBH$date, \"%Y\") == year_selected),], \"date\", summarize, interactions = sum(total_interactions))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(DataBH$date)] <- 0\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    \n    slope <- lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$interactions)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_interactions)\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m-%d\") %in% DataGoalsBH$date, DataGoalsBH[which(DataGoalsBH$date == format(date_selected, \"%Y-%m-%d\")),]$engagement, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Engagement - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Engagement\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Engagement\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Engagement\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisContentViewsMonth <- renderHighchart({\n    \n    dates <- data.frame(date = format(DataGoalsBH$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataBH[which(DataBH$date >= \"2017-01-01\"),], .(date = format(DataBH[which(DataBH$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, content_views = sum(post_reach[post_type == \"photo\"]) + sum(link_clicks[post_type == \"link\"]) + sum(post_video_views[post_type == \"video\"]))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_content_views <- cumsum(as.numeric(DataMonth$content_views))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$content_views)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_content_views)\n    })\n    \n    DataGoalsBH$date <- format(DataGoalsBH$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoalsBH, by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$content_views)\n    })\n    \n    DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == format.Date(max(DataBH$date), \"%m\") & format.Date(DataBH$date, \"%Y\") == format.Date(max(DataBH$date), \"%Y\")),], \"date\", summarize, photo_views = sum(post_reach[post_type == \"photo\"]), article_views = sum(link_clicks[post_type == \"link\"]), video_views = sum(post_video_views[post_type == \"video\"]), content_views = photo_views + article_views + video_views)\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(DataBH$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(DataBH$date), \"%Y-%m-01\"))))*(lm(cumsum(content_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Content Views - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Content Views Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Content Views\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Content Views\", type = \"spline\") %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisContentViewsTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Content Views - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisContentViews <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$bh_kpis_month_content_views, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataBH[which(format.Date(DataBH$date, \"%m\") == month_selected & format.Date(DataBH$date, \"%Y\") == year_selected),], \"date\", summarize, photo_views = sum(post_reach[post_type == \"photo\"]), article_views = sum(link_clicks[post_type == \"link\"]), video_views = sum(post_video_views[post_type == \"video\"]), content_views = photo_views + article_views + video_views)\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(DataBH$date)] <- 0\n    DataMonth$total_content_views <- cumsum(DataMonth$content_views)\n    \n    slope <- lm(cumsum(content_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$content_views)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_content_views)\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m-%d\") %in% DataGoalsBH$date, DataGoalsBH[which(DataGoalsBH$date == format(date_selected, \"%Y-%m-%d\")),]$content_views, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Content Views\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Content Views\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    \n    hc\n    \n  })\n  \n  output$BHPlotKpisArticles <- renderHighchart({\n    \n    if(input$bh_articles_kpi_select_repost == \"Originals\"){\n      \n      DataArticlesBH <- DataArticlesBH[which(DataArticlesBH$original == 1),]\n      \n    }\n    \n    else if (input$bh_articles_kpi_select_repost == \"Reposts\"){\n      \n      DataArticlesBH <- DataArticlesBH[which(DataArticlesBH$original == 0),]\n    }\n    \n    date_selected <- as.Date(paste(input$bh_kpis_month_articles, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataArticlesBH[which(format.Date(DataArticlesBH$date, \"%m\") == month_selected & format.Date(DataArticlesBH$date, \"%Y\") == year_selected),], \"date\", summarize, link_clicks = sum(link_clicks), interactions = sum(total_interactions), reach = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(DataBH$date)] <- 0\n    DataMonth$total_link_clicks <- cumsum(DataMonth$link_clicks)\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    DataMonth$total_reach <- cumsum(DataMonth$reach)\n    \n    slope <- ifelse(input$bh_articles_kpi_select_variable == \"Content Views\",lm(cumsum(link_clicks) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], ifelse(input$bh_articles_kpi_select_variable == \"Interactions\", lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$bh_articles_kpi_select_variable == \"Content Views\", DataMonth[x,]$link_clicks, ifelse(input$bh_articles_kpi_select_variable == \"Interactions\", DataMonth[x,]$interactions, DataMonth[x,]$reach)))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$bh_articles_kpi_select_variable == \"Content Views\", DataMonth[x,]$total_link_clicks, ifelse(input$bh_articles_kpi_select_variable == \"Interactions\", DataMonth[x,]$total_interactions, DataMonth[x,]$total_reach)))\n    })\n    \n    goal <- 2000\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = input$bh_articles_kpi_select_variable)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = paste(\"Daily\", input$bh_articles_kpi_select_variable, sep = \" \"), type = \"column\") %>%\n      hc_add_series(data = ds_total, name = paste(\"Total\", input$bh_articles_kpi_select_variable, sep = \" \"), type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisAllVideos <- renderHighchart({\n    \n    if(input$bh_all_videos_kpi_select_repost == \"Originals\"){\n      \n      DataVideosBH <- DataVideosBH[which(DataVideosBH$original == 1),]\n      \n    }\n    \n    else if (input$bh_all_videos_kpi_select_repost == \"Reposts\"){\n      \n      DataVideosBH <- DataVideosBH[which(DataVideosBH$original == 0),]\n    }\n    \n    date_selected <- as.Date(paste(input$bh_kpis_month_all_videos, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataVideosBH[which(format.Date(DataVideosBH$date, \"%m\") == month_selected & format.Date(DataVideosBH$date, \"%Y\") == year_selected),], \"date\", summarize, video_views = sum(post_video_views), interactions = sum(total_interactions), reach = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(DataBH$date)] <- 0\n    DataMonth$total_video_views <- cumsum(DataMonth$video_views)\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    DataMonth$total_reach <- cumsum(DataMonth$reach)\n    \n    slope <- ifelse(input$bh_all_videos_kpi_select_variable == \"Content Views\",lm(cumsum(video_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], ifelse(input$bh_all_videos_kpi_select_variable == \"Interactions\", lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$bh_all_videos_kpi_select_variable == \"Content Views\", DataMonth[x,]$video_views, ifelse(input$bh_all_videos_kpi_select_variable == \"Interactions\", DataMonth[x,]$interactions, DataMonth[x,]$reach)))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$bh_all_videos_kpi_select_variable == \"Content Views\", DataMonth[x,]$total_video_views, ifelse(input$bh_all_videos_kpi_select_variable == \"Interactions\", DataMonth[x,]$total_interactions, DataMonth[x,]$total_reach)))\n    })\n    \n    goal <- 5000000\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = input$bh_all_videos_kpi_select_variable)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = paste(\"Daily\", input$bh_all_videos_kpi_select_variable, sep = \" \"), type = \"column\") %>%\n      hc_add_series(data = ds_total, name = paste(\"Total\", input$bh_all_videos_kpi_select_variable, sep = \" \"), type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisVideos <- renderHighchart({\n    \n    if(input$bh_videos_kpi_select_repost == \"Originals\"){\n      \n      DataVideosBH <- DataVideosBH[which(DataVideosBH$original == 1),]\n      \n    }\n    \n    else if (input$bh_videos_kpi_select_repost == \"Reposts\"){\n      \n      DataVideosBH <- DataVideosBH[which(DataVideosBH$original == 0),]\n    }\n    \n    date_selected <- as.Date(paste(input$bh_kpis_month_videos, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataVideosBH[which(DataVideosBH$video_meme == 0 & format.Date(DataVideosBH$date, \"%m\") == month_selected & format.Date(DataVideosBH$date, \"%Y\") == year_selected),], \"date\", summarize, video_views = sum(post_video_views), interactions = sum(total_interactions), reach = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(DataBH$date)] <- 0\n    DataMonth$total_video_views <- cumsum(DataMonth$video_views)\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    DataMonth$total_reach <- cumsum(DataMonth$reach)\n    \n    slope <- ifelse(input$bh_videos_kpi_select_variable == \"Content Views\",lm(cumsum(video_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], ifelse(input$bh_videos_kpi_select_variable == \"Interactions\", lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$bh_videos_kpi_select_variable == \"Content Views\", DataMonth[x,]$video_views, ifelse(input$bh_videos_kpi_select_variable == \"Interactions\", DataMonth[x,]$interactions, DataMonth[x,]$reach)))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$bh_videos_kpi_select_variable == \"Content Views\", DataMonth[x,]$total_video_views, ifelse(input$bh_videos_kpi_select_variable == \"Interactions\", DataMonth[x,]$total_interactions, DataMonth[x,]$total_reach)))\n    })\n    \n    goal <- 2500000\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = input$bh_videos_kpi_select_variable)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = paste(\"Daily\", input$bh_videos_kpi_select_variable, sep = \" \"), type = \"column\") %>%\n      hc_add_series(data = ds_total, name = paste(\"Total\", input$bh_videos_kpi_select_variable, sep = \" \"), type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisVideoMemes <- renderHighchart({\n    \n    if(input$bh_video_memes_kpi_select_repost == \"Originals\"){\n      \n      DataVideosBH <- DataVideosBH[which(DataVideosBH$original == 1),]\n      \n    }\n    \n    else if (input$bh_video_memes_kpi_select_repost == \"Reposts\"){\n      \n      DataVideosBH <- DataVideosBH[which(DataVideosBH$original == 0),]\n    }\n    \n    date_selected <- as.Date(paste(input$bh_kpis_month_video_memes, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataVideosBH[which(DataVideosBH$video_meme == 1 & format.Date(DataVideosBH$date, \"%m\") == month_selected & format.Date(DataVideosBH$date, \"%Y\") == year_selected),], \"date\", summarize, video_views = sum(post_video_views), interactions = sum(total_interactions), reach = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(DataBH$date)] <- 0\n    DataMonth$total_video_views <- cumsum(DataMonth$video_views)\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    DataMonth$total_reach <- cumsum(DataMonth$reach)\n    \n    slope <- ifelse(input$bh_video_memes_kpi_select_variable == \"Content Views\",lm(cumsum(video_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], ifelse(input$bh_video_memes_kpi_select_variable == \"Interactions\", lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$bh_video_memes_kpi_select_variable == \"Content Views\", DataMonth[x,]$video_views, ifelse(input$bh_video_memes_kpi_select_variable == \"Interactions\", DataMonth[x,]$interactions, DataMonth[x,]$reach)))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$bh_video_memes_kpi_select_variable == \"Content Views\", DataMonth[x,]$total_video_views, ifelse(input$bh_video_memes_kpi_select_variable == \"Interactions\", DataMonth[x,]$total_interactions, DataMonth[x,]$total_reach)))\n    })\n    \n    goal <- 2500000\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = input$bh_video_memes_kpi_select_variable)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = paste(\"Daily\", input$bh_video_memes_kpi_select_variable, sep = \" \"), type = \"column\") %>%\n      hc_add_series(data = ds_total, name = paste(\"Total\", input$bh_video_memes_kpi_select_variable, sep = \" \"), type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BHPlotKpisMemes <- renderHighchart({\n    \n    if(input$bh_memes_kpi_select_repost == \"Originals\"){\n      \n      DataPhotosBH <- DataPhotosBH[which(DataPhotosBH$original == 1),]\n      \n    }\n    \n    else if (input$bh_memes_kpi_select_repost == \"Reposts\"){\n      \n      DataPhotosBH <- DataPhotosBH[which(DataPhotosBH$original == 0),]\n    }\n    \n    date_selected <- as.Date(paste(input$bh_kpis_month_memes, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataPhotosBH[which(format.Date(DataPhotosBH$date, \"%m\") == month_selected & format.Date(DataPhotosBH$date, \"%Y\") == year_selected),], \"date\", summarize, photo_views = sum(post_reach), interactions = sum(total_interactions))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(DataBH$date)] <- 0\n    DataMonth$total_photo_views <- cumsum(DataMonth$photo_views)\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    \n    slope <- ifelse(input$bh_memes_kpi_select_variable == \"Content Views\", lm(cumsum(photo_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$photo_views)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_photo_views)\n    })\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$bh_memes_kpi_select_variable == \"Content Views\", DataMonth[x,]$photo_views, DataMonth[x,]$interactions))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$bh_memes_kpi_select_variable == \"Content Views\", DataMonth[x,]$total_photo_views, DataMonth[x,]$total_interactions))\n    })\n    \n    goal <- 800000\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = input$bh_memes_kpi_select_variable)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = paste(\"Daily\", input$bh_memes_kpi_select_variable, sep = \" \"), type = \"column\") %>%\n      hc_add_series(data = ds_total, name = paste(\"Total\", input$bh_memes_kpi_select_variable, sep = \" \"), type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  #----------------------------------------------------------------------------------------------------------------------\n  \n  Plot_Top_Bottom_Function <- function (ds, input_categories, input_plot_var, fntltp) {\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), bar = list(borderColor = \"black\")) %>% \n      hc_xAxis(categories = input_categories) %>% \n      hc_yAxis(title = list(text = input_plot_var))%>% \n      hc_add_series(data = ds)%>% \n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = FALSE)%>% \n      hc_tooltip(useHTML = TRUE, formatter = fntltp, pointFormat = '{point.y:,.0f}')%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n    \n  }\n  \n  Plot_Article_Rates_Function <- function (ds_ctr, ds_ir, input_categories){\n    \n    hc <- highchart() %>%\n      hc_chart(type = \"bar\") %>% \n      hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), bar = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>% \n      hc_xAxis(categories = input_categories) %>% \n      hc_yAxis(title = \"\",labels = list(format = \"{value} %\")) %>% \n      hc_add_series(data = ds_ctr, name = \"CTR\") %>% \n      hc_add_series(data = ds_ir, name = \"IR\") %>%\n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = TRUE) %>%\n      hc_tooltip(valueSuffix = \" %\") %>%\n      hc_add_theme(hc_theme_smpl()) \n    hc\n    \n  }\n  \n  Plot_Article_Reaction_Rates_Function <- function (ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories){\n    \n    hc <- highchart() %>%\n      hc_chart(type = \"bar\") %>% \n      hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), bar = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>% \n      hc_xAxis(categories = input_categories) %>% \n      hc_yAxis(title = \"\",labels = list(format = \"{value} %\"), max = 100) %>% \n      hc_add_series(data = ds_feed_likes_rate, name = \"Likes\") %>% \n      hc_add_series(data = ds_love, name = \"Love\") %>%\n      hc_add_series(data = ds_wow, name = \"Wow\") %>%\n      hc_add_series(data = ds_haha, name = \"Haha\") %>%\n      hc_add_series(data = ds_sad, name = \"Sad\") %>%\n      hc_add_series(data = ds_angry, name = \"Angry\") %>%\n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = TRUE) %>%\n      hc_tooltip(valueSuffix = \" %\") %>%\n      hc_add_theme(hc_theme_smpl()) \n    hc\n    \n  }\n  \n  Plot_Fan_Viral_Function <- function (ds_fan, ds_viral, input_categories){\n    \n    hc <- highchart() %>%\n      hc_chart(type = \"bar\") %>% \n      hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), bar = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>% \n      hc_xAxis(categories = input_categories, lineWidth = 0, minorGridLineWidth = 0, lineColor = \"transparent\", labels = list(enabled = FALSE), minorTickLength = 0, tickLength = 0) %>% \n      hc_yAxis(title = \"\",labels = list(format = \"{value} %\"), max = 100) %>% \n      hc_add_series(data = ds_fan, name = \"Fan\") %>% \n      hc_add_series(data = ds_viral, name = \"Viral\") %>%\n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = TRUE) %>%\n      hc_tooltip(valueSuffix = \" %\") %>%\n      hc_add_theme(hc_theme_smpl()) \n    hc\n    \n  }\n  \n  Plot_Video_Drop_Off_Function <- function (ds){\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"spline\") %>%\n      hc_plotOptions(series = list(marker = list(enabled = FALSE))) %>% \n      hc_add_series_list(ds) %>% \n      hc_add_theme(hc_theme_smpl()) %>% \n      hc_legend(align = \"right\", verticalAlign = \"top\", layout = \"vertical\", floating = TRUE, y = 1) %>%  \n      hc_xAxis(title = list(text = \"Seconds Viewed\")) %>%\n      hc_tooltip(shared = TRUE)\n    hc\n    \n  }\n  \n  # 4. Top & Bottom Post --------------------------------------------------------------------------------------------------------------------\n  \n  # 4.1. Top & Bottom Posts - We Are MitÃº ---------------------------------------------------------------------------------------------------------------------------\n  \n  # 4.1.1. Articles  ------------------------------------------------------------------------------------------------------\n  \n  # 4.1.1.1. Top ------------------------------------------------------------------------------------------------------------------------\n  \n  output$Table1 = DT::renderDataTable({\n    \n    WeekLinksTop <- WeekLinksTop()\n    \n    WeekLinksTop$post_reach <- format( WeekLinksTop$post_reach, big.mark = \",\")\n    WeekLinksTop$link_clicks <- format( WeekLinksTop$link_clicks, big.mark = \",\")\n    WeekLinksTop$headline <- paste0(\"<a href='\", WeekLinksTop$permalink,\"' target='_blank'>\", WeekLinksTop$headline,\"</a>\")\n    WeekLinksTop$ctr <- paste0(formatC(100 * WeekLinksTop$ctr, format = \"f\", digits = 2), \"%\")\n    WeekLinksTop$interaction_rate <- paste0(formatC(100 * WeekLinksTop$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekLinksTop[, input$show_vars1, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$Plot1_Title <- renderHighchart({\n    \n    DateRangeArticles <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    \n    if(input$article_select_original_repost_top == \"Originals\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n    }\n    \n    else if (input$article_select_original_repost_top == \"Reposts\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$article_select_categories_top),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    plot_subtitle <- paste(as.character(max(number_article_top$n-9, 1)), \" - \", as.character(min(nrow(DateRangeArticles), number_article_top$n)), \" of \", as.character(nrow(DateRangeArticles)))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$Plot1 <- renderHighchart({\n    \n    WeekLinksTop <- WeekLinksTop()\n   \n    ds <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(name = ifelse(WeekLinksTop[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekLinksTop[x,]$permalink, color = ifelse(WeekLinksTop[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekLinksTop[x,]$full_picture, share_text = WeekLinksTop[x,]$sharetext, link_clicks = WeekLinksTop[x,]$link_clicks, rank_link_clicks = WeekLinksTop[x,]$rank_link_clicks, general_rank_link_clicks = WeekLinksTop[x,]$general_rank_link_clicks, rank_reach = WeekLinksTop[x,]$rank_reach, general_rank_reach = WeekLinksTop[x,]$general_rank_reach,  rank_interactions = WeekLinksTop[x,]$rank_interactions,  general_rank_interactions = WeekLinksTop[x,]$general_rank_interactions, reach = WeekLinksTop[x,]$post_reach, interactions = WeekLinksTop[x,]$total_interactions, times_repo = ifelse(is.na(WeekLinksTop[x,]$times_repost), 0, WeekLinksTop[x,]$times_repost), post_category = WeekLinksTop[x,]$category, y = ifelse(input$article_select_plot_variable_top == \"Link Clicks\", WeekLinksTop[x,]$link_clicks, ifelse(input$article_select_plot_variable_top == \"Reach\", WeekLinksTop[x,]$post_reach, WeekLinksTop[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekLinksTop$headline, WeekLinksTop$link_clicks)\n    \n    input_plot_var <- input$article_select_plot_variable_top\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Link Clicks : <b>' + this.point.link_clicks + '</b>  | Rank: <b>' + this.point.rank_link_clicks + '</b> | Gen. Rank: <b>' + this.point.general_rank_link_clicks + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n  \n  })\n  \n  output$Plot2 <- renderHighchart({\n    \n    cols=c(\"steelblue3\",\"skyblue4\")\n    \n    WeekLinksTop <- WeekLinksTop()\n\n    WeekLinksTop$ctr <- as.numeric(format(WeekLinksTop$ctr*100, digits= 3))\n    WeekLinksTop$interaction_rate <- as.numeric(format(WeekLinksTop$interaction_rate*100, digits = 2))\n    \n    ds_ctr <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$ctr, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_ir <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$interaction_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksTop$headline, WeekLinksTop$link_clicks)\n    \n    Plot_Article_Rates_Function(ds_ctr, ds_ir, input_categories)\n    \n  })\n  \n  output$Plot21 <- renderHighchart({\n    \n    WeekLinksTop <- WeekLinksTop()\n    \n    WeekLinksTop$feed_likes_rate <- as.numeric(format(WeekLinksTop$feed_likes_rate*100, digits= 4))\n    WeekLinksTop$love_rate <- as.numeric(format(WeekLinksTop$love_rate*100, digits = 2))\n    WeekLinksTop$wow_rate <- as.numeric(format(WeekLinksTop$wow_rate*100, digits = 2))\n    WeekLinksTop$haha_rate <- as.numeric(format(WeekLinksTop$haha_rate*100, digits = 2))\n    WeekLinksTop$sad_rate <- as.numeric(format(WeekLinksTop$sad_rate*100, digits = 2))\n    WeekLinksTop$angry_rate <- as.numeric(format(WeekLinksTop$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$feed_likes_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$love_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$wow_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$haha_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$sad_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$angry_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksTop$headline, WeekLinksTop$link_clicks)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$Plot22 <- renderHighchart({\n    \n    WeekLinksTop <- WeekLinksTop()\n    \n    WeekLinksTop$fan_rate <- as.numeric(format(WeekLinksTop$fan_rate*100, digits = 4))\n    WeekLinksTop$viral_rate <- as.numeric(format(WeekLinksTop$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$fan_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$viral_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksTop$headline, WeekLinksTop$link_clicks)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.1.1.2. Bottom ---------------------------------------------------------------------------------------------------------------------\n  \n  output$Table2 = DT::renderDataTable({\n    \n    WeekLinksBottom <- WeekLinksBottom()\n    \n    WeekLinksBottom$post_reach <- format(WeekLinksBottom$post_reach, big.mark = \",\")\n    WeekLinksBottom$link_clicks <- format(WeekLinksBottom$link_clicks, big.mark = \",\")\n    WeekLinksBottom$headline <- paste0(\"<a href='\",WeekLinksBottom$permalink,\"' target='_blank'>\",WeekLinksBottom$headline,\"</a>\")\n    WeekLinksBottom$ctr <- paste0(formatC(100 * WeekLinksBottom$ctr, format = \"f\", digits = 2), \"%\")\n    WeekLinksBottom$interaction_rate <- paste0(formatC(100 * WeekLinksBottom$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekLinksBottom[, input$show_vars4, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$Plot3_Title <- renderHighchart({\n    \n    DateRangeArticles <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    \n    if(input$article_select_original_repost_bottom == \"Originals\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n    }\n    \n    else if (input$article_select_original_repost_bottom == \"Reposts\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$article_select_categories_bottom),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    \n    plot_subtitle <- paste(as.character(min(nrow(DateRangeArticles) + 10 - number_article_bottom$n, nrow(DateRangeArticles))), \" - \", as.character(max(nrow(DateRangeArticles) - number_article_bottom$n + 1, 1)), \" of \", as.character(nrow(DateRangeArticles)))\n                           \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$Plot3 <- renderHighchart({\n    \n    WeekLinksBottom <- WeekLinksBottom()\n    \n    ds <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(name = ifelse(WeekLinksBottom[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekLinksBottom[x,]$permalink, color = ifelse(WeekLinksBottom[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekLinksBottom[x,]$full_picture, share_text = WeekLinksBottom[x,]$sharetext, link_clicks = WeekLinksBottom[x,]$link_clicks, rank_link_clicks = WeekLinksBottom[x,]$rank_link_clicks, general_rank_link_clicks = WeekLinksBottom[x,]$general_rank_link_clicks, rank_reach = WeekLinksBottom[x,]$rank_reach, general_rank_reach = WeekLinksBottom[x,]$general_rank_reach,  rank_interactions = WeekLinksBottom[x,]$rank_interactions,  general_rank_interactions = WeekLinksBottom[x,]$general_rank_interactions, reach = WeekLinksBottom[x,]$post_reach, interactions = WeekLinksBottom[x,]$total_interactions, times_repo = ifelse(is.na(WeekLinksBottom[x,]$times_repost), 0, WeekLinksBottom[x,]$times_repost), post_category = WeekLinksBottom[x,]$category, y = ifelse(input$article_select_plot_variable_bottom == \"Link Clicks\", WeekLinksBottom[x,]$link_clicks, ifelse(input$article_select_plot_variable_bottom == \"Reach\", WeekLinksBottom[x,]$post_reach, WeekLinksBottom[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekLinksBottom$headline, WeekLinksBottom$link_clicks)\n    \n    input_plot_var <- input$article_select_plot_variable_bottom\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Link Clicks : <b>' + this.point.link_clicks + '</b>  | Rank: <b>' + this.point.rank_link_clicks + '</b> | Gen. Rank: <b>' + this.point.general_rank_link_clicks + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n    \n  })\n  \n  output$Plot4 <- renderHighchart({\n    \n    cols=c(\"steelblue3\",\"skyblue4\")\n    \n    WeekLinksBottom <- WeekLinksBottom()\n    \n    WeekLinksBottom$ctr <- as.numeric(format(WeekLinksBottom$ctr*100, digits= 2))\n    WeekLinksBottom$interaction_rate <- as.numeric(format(WeekLinksBottom$interaction_rate*100, digits = 2))\n    \n    ds_ctr <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$ctr, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_ir <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$interaction_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksBottom$headline, WeekLinksBottom$link_clicks)\n    \n    Plot_Article_Rates_Function(ds_ctr, ds_ir, input_categories)\n\n  })\n  \n  output$Plot41 <- renderHighchart({\n    \n    WeekLinksBottom <- WeekLinksBottom()\n    \n    WeekLinksBottom$feed_likes_rate <- as.numeric(format(WeekLinksBottom$feed_likes_rate*100, digits= 4))\n    WeekLinksBottom$love_rate <- as.numeric(format(WeekLinksBottom$love_rate*100, digits = 2))\n    WeekLinksBottom$wow_rate <- as.numeric(format(WeekLinksBottom$wow_rate*100, digits = 2))\n    WeekLinksBottom$haha_rate <- as.numeric(format(WeekLinksBottom$haha_rate*100, digits = 2))\n    WeekLinksBottom$sad_rate <- as.numeric(format(WeekLinksBottom$sad_rate*100, digits = 2))\n    WeekLinksBottom$angry_rate <- as.numeric(format(WeekLinksBottom$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$feed_likes_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$love_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$wow_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$haha_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$sad_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$angry_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksBottom$headline, WeekLinksBottom$link_clicks)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$Plot42 <- renderHighchart({\n    \n    WeekLinksBottom <- WeekLinksBottom()\n    \n    WeekLinksBottom$fan_rate <- as.numeric(format(WeekLinksBottom$fan_rate*100, digits = 4))\n    WeekLinksBottom$viral_rate <- as.numeric(format(WeekLinksBottom$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$fan_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$viral_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksBottom$headline, WeekLinksBottom$link_clicks)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.1.2. Videos --------------------------------------------------------------------------------------------------------\n  \n  # 4.1.2.1. Top ------------------------------------------------------------------------------------------------------------------------\n  \n  output$Table3 = DT::renderDataTable({\n    \n    WeekVideosTop <- WeekVideosTop()\n    \n    WeekVideosTop$post_video_views <- format(WeekVideosTop$post_video_views, big.mark = \",\")\n    WeekVideosTop$post_reach <- format(WeekVideosTop$post_reach, big.mark = \",\")\n    WeekVideosTop$comment<- format(WeekVideosTop$comment, big.mark = \",\")\n    WeekVideosTop$like <- format(WeekVideosTop$like, big.mark = \",\")\n    WeekVideosTop$share <- format(WeekVideosTop$share, big.mark = \",\")\n    WeekVideosTop$sharetext <- paste0(\"<a href='\",WeekVideosTop$permalink,\"' target='_blank'>\",WeekVideosTop$sharetext,\"</a>\")\n    WeekVideosTop$ctr <- paste0(formatC(100 * WeekVideosTop$ctr, format = \"f\", digits = 2), \"%\")\n    WeekVideosTop$interaction_rate <- paste0(formatC(100 * WeekVideosTop$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekVideosTop[, input$show_vars2, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$Plot5_Title <- renderHighchart({\n    \n    DateRangeVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 0),]\n    \n    if(input$video_select_original_repost_top == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$video_select_original_repost_top == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$video_select_categories_top),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    plot_subtitle <- paste(as.character(max(number_video_top$n-4, 1)), \" - \", as.character(min(nrow(DateRangeVideos), number_video_top$n)), \" of \", as.character(nrow(DateRangeVideos)))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$Plot5 <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideosTop()\n    \n    ds <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(name = ifelse(WeekVideosTop[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekVideosTop[x,]$permalink, color = ifelse(WeekVideosTop[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekVideosTop[x,]$full_picture, share_text = WeekVideosTop[x,]$sharetext, video_views = WeekVideosTop[x,]$post_video_views, rank_video_views = WeekVideosTop[x,]$rank_video_views, general_rank_video_views = WeekVideosTop[x,]$general_rank_video_views, rank_reach = WeekVideosTop[x,]$rank_reach, general_rank_reach = WeekVideosTop[x,]$general_rank_reach,  rank_interactions = WeekVideosTop[x,]$rank_interactions,  general_rank_interactions = WeekVideosTop[x,]$general_rank_interactions, reach = WeekVideosTop[x,]$post_reach, interactions = WeekVideosTop[x,]$total_interactions, times_repo = ifelse(is.na(WeekVideosTop[x,]$times_repost), 0, WeekVideosTop[x,]$times_repost), post_category = WeekVideosTop[x,]$category, y = ifelse(input$video_select_plot_variable_top == \"Video Views\", WeekVideosTop[x,]$post_video_views, ifelse(input$video_select_plot_variable_top == \"Reach\", WeekVideosTop[x,]$post_reach, WeekVideosTop[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    input_plot_var <- input$video_select_plot_variable_top\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Video Views : <b>' + this.point.video_views + '</b>  | Rank: <b>' + this.point.rank_video_views + '</b> | Gen. Rank: <b>' + this.point.general_rank_video_views + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n    \n  })\n  \n  output$Plot52 <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideosTop()\n    \n    df <- WeekVideosTop[,c(4, grep(\"repost_order\", colnames(DataVideos)), grep(\"s0\", colnames(DataVideos)):grep(\"s40\", colnames(DataVideos)))]\n    df[duplicated(df$sharetext),]$sharetext <- paste(df[duplicated(df$sharetext),]$sharetext, df[duplicated(df$sharetext),]$repost_order)\n    df <- gather(df, \"seconds_viewed\", \"percentage_viewed\", 3:43)\n    df <- dlply(df,\"sharetext\", function (x){list(data = x$percentage_viewed, name = unique(x$sharetext))})\n    ds <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(data = df[[x]]$data, name = df[[x]]$name)\n    })\n    \n    Plot_Video_Drop_Off_Function(ds)\n   \n  })\n  \n  output$Plot53 <- renderHighchart({\n    \n    cols=c(\"steelblue3\",\"skyblue4\")\n    \n    WeekVideosTop <- WeekVideosTop()\n    \n    WeekVideosTop$feed_likes_rate <- as.numeric(format(WeekVideosTop$feed_likes_rate*100, digits= 4))\n    WeekVideosTop$love_rate <- as.numeric(format(WeekVideosTop$love_rate*100, digits = 2))\n    WeekVideosTop$wow_rate <- as.numeric(format(WeekVideosTop$wow_rate*100, digits = 2))\n    WeekVideosTop$haha_rate <- as.numeric(format(WeekVideosTop$haha_rate*100, digits = 2))\n    WeekVideosTop$sad_rate <- as.numeric(format(WeekVideosTop$sad_rate*100, digits = 2))\n    WeekVideosTop$angry_rate <- as.numeric(format(WeekVideosTop$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$feed_likes_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$love_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$wow_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$haha_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$sad_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$angry_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$Plot54 <- renderHighchart({\n\n    WeekVideosTop <- WeekVideosTop()\n    \n    WeekVideosTop$fan_rate <- as.numeric(format(WeekVideosTop$fan_rate*100, digits = 4))\n    WeekVideosTop$viral_rate <- as.numeric(format(WeekVideosTop$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$fan_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$viral_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.1.2.2. Bottom ---------------------------------------------------------------------------------------------------------------------\n  \n  output$Table4 = DT::renderDataTable({\n    \n    WeekVideosBottom <- WeekVideosBottom()\n    \n    WeekVideosBottom$post_video_views <- format(WeekVideosBottom$post_video_views, big.mark = \",\")\n    WeekVideosBottom$post_reach <- format(WeekVideosBottom$post_reach, big.mark = \",\")\n    WeekVideosBottom$comment<- format(WeekVideosBottom$comment, big.mark = \",\")\n    WeekVideosBottom$like <- format(WeekVideosBottom$like, big.mark = \",\")\n    WeekVideosBottom$share <- format(WeekVideosBottom$share, big.mark = \",\")\n    WeekVideosBottom$sharetext <- paste0(\"<a href='\",WeekVideosBottom$permalink,\"' target='_blank'>\",WeekVideosBottom$sharetext,\"</a>\")\n    \n    WeekVideosBottom$ctr <- paste0(formatC(100 * WeekVideosBottom$ctr, format = \"f\", digits = 2), \"%\")\n    WeekVideosBottom$interaction_rate <- paste0(formatC(100 * WeekVideosBottom$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekVideosBottom[, input$show_vars5, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$Plot6_Title <- renderHighchart({\n    \n    DateRangeVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 0),]\n    \n    if(input$video_select_original_repost_bottom == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$video_select_original_repost_bottom == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$video_select_categories_bottom),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    \n    plot_subtitle <- paste(as.character(min(nrow(DateRangeVideos) + 5 - number_video_bottom$n, nrow(DateRangeVideos))), \" - \", as.character(max(nrow(DateRangeVideos) - number_video_bottom$n + 1, 1)), \" of \", nrow(DateRangeVideos))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$Plot6 <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideosBottom()\n\n    ds <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(name = ifelse(WeekVideosBottom[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekVideosBottom[x,]$permalink, color = ifelse(WeekVideosBottom[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekVideosBottom[x,]$full_picture, share_text = WeekVideosBottom[x,]$sharetext, video_views = WeekVideosBottom[x,]$post_video_views, rank_video_views = WeekVideosBottom[x,]$rank_video_views, general_rank_video_views = WeekVideosBottom[x,]$general_rank_video_views, rank_reach = WeekVideosBottom[x,]$rank_reach, general_rank_reach = WeekVideosBottom[x,]$general_rank_reach,  rank_interactions = WeekVideosBottom[x,]$rank_interactions,  general_rank_interactions = WeekVideosBottom[x,]$general_rank_interactions, reach = WeekVideosBottom[x,]$post_reach, interactions = WeekVideosBottom[x,]$total_interactions, times_repo = ifelse(is.na(WeekVideosBottom[x,]$times_repost), 0, WeekVideosBottom[x,]$times_repost), post_category = WeekVideosBottom[x,]$category, y = ifelse(input$video_select_plot_variable_bottom == \"Video Views\", WeekVideosBottom[x,]$post_video_views, ifelse(input$video_select_plot_variable_bottom == \"Reach\", WeekVideosBottom[x,]$post_reach, WeekVideosBottom[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    input_plot_var <- input$video_select_plot_variable_bottom\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Video Views : <b>' + this.point.video_views + '</b>  | Rank: <b>' + this.point.rank_video_views + '</b> | Gen. Rank: <b>' + this.point.general_rank_video_views + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n    \n  })\n  \n  output$Plot62 <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideosBottom()\n    \n    df <- WeekVideosBottom[,c(4, grep(\"repost_order\", colnames(DataVideos)), grep(\"s0\", colnames(DataVideos)):grep(\"s40\", colnames(DataVideos)))]\n    df[duplicated(df$sharetext),]$sharetext <- paste(df[duplicated(df$sharetext),]$sharetext, df[duplicated(df$sharetext),]$repost_order)\n    df <- gather(df, \"seconds_viewed\", \"percentage_viewed\", 3:43)\n    df <- dlply(df,\"sharetext\", function (x){list(data = x$percentage_viewed, name = unique(x$sharetext))})\n    ds <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(data = df[[x]]$data, name = df[[x]]$name)\n    })\n    \n    Plot_Video_Drop_Off_Function(ds)\n    \n  })\n  \n  output$Plot63 <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideosBottom()\n    \n    WeekVideosBottom$feed_likes_rate <- as.numeric(format(WeekVideosBottom$feed_likes_rate*100, digits= 4))\n    WeekVideosBottom$love_rate <- as.numeric(format(WeekVideosBottom$love_rate*100, digits = 2))\n    WeekVideosBottom$wow_rate <- as.numeric(format(WeekVideosBottom$wow_rate*100, digits = 2))\n    WeekVideosBottom$haha_rate <- as.numeric(format(WeekVideosBottom$haha_rate*100, digits = 2))\n    WeekVideosBottom$sad_rate <- as.numeric(format(WeekVideosBottom$sad_rate*100, digits = 2))\n    WeekVideosBottom$angry_rate <- as.numeric(format(WeekVideosBottom$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$feed_likes_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$love_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$wow_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$haha_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$sad_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$angry_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$Plot64 <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideosBottom()\n    \n    WeekVideosBottom$fan_rate <- as.numeric(format(WeekVideosBottom$fan_rate*100, digits = 4))\n    WeekVideosBottom$viral_rate <- as.numeric(format(WeekVideosBottom$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$fan_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$viral_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.1.3. Video Memes ----------------------------------------------------------------------------------------------------\n  \n  # 4.1.3.1. Top ------------------------------------------------------------------------------------------------------------------------\n  \n  output$Table3b = DT::renderDataTable({\n    \n    WeekVideosTop <- WeekVideoMemesTop()\n    \n    WeekVideosTop$post_video_views <- format(WeekVideosTop$post_video_views, big.mark = \",\")\n    WeekVideosTop$post_reach <- format(WeekVideosTop$post_reach, big.mark = \",\")\n    WeekVideosTop$comment<- format(WeekVideosTop$comment, big.mark = \",\")\n    WeekVideosTop$like <- format(WeekVideosTop$like, big.mark = \",\")\n    WeekVideosTop$share <- format(WeekVideosTop$share, big.mark = \",\")\n    WeekVideosTop$sharetext <- paste0(\"<a href='\",WeekVideosTop$permalink,\"' target='_blank'>\",WeekVideosTop$sharetext,\"</a>\")\n    \n    WeekVideosTop$ctr <- paste0(formatC(100 * WeekVideosTop$ctr, format = \"f\", digits = 2), \"%\")\n    WeekVideosTop$interaction_rate <- paste0(formatC(100 * WeekVideosTop$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekVideosTop[, input$show_vars2b, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$Plot5b_Title <- renderHighchart({\n    \n    DateRangeVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 1),]\n    \n    if(input$video_meme_select_original_repost_top == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$video_meme_select_original_repost_top == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$video_meme_select_categories_top),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    plot_subtitle <- paste(as.character(max(number_video_meme_top$n-4, 1)), \" - \", as.character(min(nrow(DateRangeVideos), number_video_meme_top$n)), \" of \", as.character(nrow(DateRangeVideos)))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$Plot5b <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideoMemesTop()\n\n    ds <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(name = ifelse(WeekVideosTop[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekVideosTop[x,]$permalink, color = ifelse(WeekVideosTop[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekVideosTop[x,]$full_picture, share_text = WeekVideosTop[x,]$sharetext, video_views = WeekVideosTop[x,]$post_video_views, rank_video_views = WeekVideosTop[x,]$rank_video_views, general_rank_video_views = WeekVideosTop[x,]$general_rank_video_views, rank_reach = WeekVideosTop[x,]$rank_reach, general_rank_reach = WeekVideosTop[x,]$general_rank_reach,  rank_interactions = WeekVideosTop[x,]$rank_interactions,  general_rank_interactions = WeekVideosTop[x,]$general_rank_interactions, reach = WeekVideosTop[x,]$post_reach, interactions = WeekVideosTop[x,]$total_interactions, times_repo = ifelse(is.na(WeekVideosTop[x,]$times_repost), 0, WeekVideosTop[x,]$times_repost), post_category = WeekVideosTop[x,]$category, y = ifelse(input$video_meme_select_plot_variable_top == \"Video Views\", WeekVideosTop[x,]$post_video_views, ifelse(input$video_meme_select_plot_variable_top == \"Reach\", WeekVideosTop[x,]$post_reach, WeekVideosTop[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    input_plot_var <- input$video_meme_select_plot_variable_top\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Video Views : <b>' + this.point.video_views + '</b>  | Rank: <b>' + this.point.rank_video_views + '</b> | Gen. Rank: <b>' + this.point.general_rank_video_views + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n\n  })\n  \n  output$Plot52b <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideoMemesTop()\n    \n    df <- WeekVideosTop[,c(4, grep(\"repost_order\", colnames(DataVideos)),grep(\"s0\", colnames(DataVideos)):grep(\"s40\", colnames(DataVideos)))]\n    df[duplicated(df$sharetext),]$sharetext <- paste(df[duplicated(df$sharetext),]$sharetext, df[duplicated(df$sharetext),]$repost_order)\n    df <- gather(df, \"seconds_viewed\", \"percentage_viewed\", 3:43)\n    df <- dlply(df, \"sharetext\", function (x){list(data = x$percentage_viewed, name = unique(x$sharetext))})\n    ds <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(data = df[[x]]$data, name = df[[x]]$name)\n    })\n    \n    Plot_Video_Drop_Off_Function(ds)\n   \n  })\n  \n  output$Plot53b <- renderHighchart({\n\n    WeekVideosTop <- WeekVideoMemesTop()\n    \n    WeekVideosTop$feed_likes_rate <- as.numeric(format(WeekVideosTop$feed_likes_rate*100, digits= 4))\n    WeekVideosTop$love_rate <- as.numeric(format(WeekVideosTop$love_rate*100, digits = 2))\n    WeekVideosTop$wow_rate <- as.numeric(format(WeekVideosTop$wow_rate*100, digits = 2))\n    WeekVideosTop$haha_rate <- as.numeric(format(WeekVideosTop$haha_rate*100, digits = 2))\n    WeekVideosTop$sad_rate <- as.numeric(format(WeekVideosTop$sad_rate*100, digits = 2))\n    WeekVideosTop$angry_rate <- as.numeric(format(WeekVideosTop$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$feed_likes_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$love_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$wow_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$haha_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$sad_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$angry_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$Plot54b <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideoMemesTop()\n    \n    WeekVideosTop$fan_rate <- as.numeric(format(WeekVideosTop$fan_rate*100, digits = 4))\n    WeekVideosTop$viral_rate <- as.numeric(format(WeekVideosTop$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$fan_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$viral_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.1.3.2. Bottom ---------------------------------------------------------------------------------------------------------------------\n  \n  output$Table4b = DT::renderDataTable({\n    \n    WeekVideosBottom <- WeekVideoMemesBottom()\n    \n    WeekVideosBottom$post_video_views <- format(WeekVideosBottom$post_video_views, big.mark = \",\")\n    WeekVideosBottom$post_reach <- format(WeekVideosBottom$post_reach, big.mark = \",\")\n    WeekVideosBottom$comment<- format(WeekVideosBottom$comment, big.mark = \",\")\n    WeekVideosBottom$like <- format(WeekVideosBottom$like, big.mark = \",\")\n    WeekVideosBottom$share <- format(WeekVideosBottom$share, big.mark = \",\")\n    WeekVideosBottom$sharetext <- paste0(\"<a href='\",WeekVideosBottom$permalink,\"' target='_blank'>\",WeekVideosBottom$sharetext,\"</a>\")\n    \n    WeekVideosBottom$ctr <- paste0(formatC(100 * WeekVideosBottom$ctr, format = \"f\", digits = 2), \"%\")\n    WeekVideosBottom$interaction_rate <- paste0(formatC(100 * WeekVideosBottom$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekVideosBottom[, input$show_vars5b, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$Plot6b_Title <- renderHighchart({\n    \n    DateRangeVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 1),]\n    \n    if(input$video_meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$video_meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$video_meme_select_categories_bottom),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    \n    plot_subtitle <- paste(as.character(min(nrow(DateRangeVideos) + 5 - number_video_meme_bottom$n, nrow(DateRangeVideos))), \" - \", as.character(max(nrow(DateRangeVideos) - number_video_meme_bottom$n + 1, 1)), \" of \", nrow(DateRangeVideos))\n  \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$Plot6b <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideoMemesBottom()\n\n    ds <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(name = ifelse(WeekVideosBottom[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekVideosBottom[x,]$permalink, color = ifelse(WeekVideosBottom[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekVideosBottom[x,]$full_picture, share_text = WeekVideosBottom[x,]$sharetext, video_views = WeekVideosBottom[x,]$post_video_views, rank_video_views = WeekVideosBottom[x,]$rank_video_views, general_rank_video_views = WeekVideosBottom[x,]$general_rank_video_views, rank_reach = WeekVideosBottom[x,]$rank_reach, general_rank_reach = WeekVideosBottom[x,]$general_rank_reach,  rank_interactions = WeekVideosBottom[x,]$rank_interactions,  general_rank_interactions = WeekVideosBottom[x,]$general_rank_interactions, reach = WeekVideosBottom[x,]$post_reach, interactions = WeekVideosBottom[x,]$total_interactions, times_repo = ifelse(is.na(WeekVideosBottom[x,]$times_repost), 0, WeekVideosBottom[x,]$times_repost), post_category = WeekVideosBottom[x,]$category, y = ifelse(input$video_meme_select_plot_variable_bottom == \"Video Views\", WeekVideosBottom[x,]$post_video_views, ifelse(input$video_meme_select_plot_variable_bottom == \"Reach\", WeekVideosBottom[x,]$post_reach, WeekVideosBottom[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    input_plot_var <- input$video_meme_select_plot_variable_bottom\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Video Views : <b>' + this.point.video_views + '</b>  | Rank: <b>' + this.point.rank_video_views + '</b> | Gen. Rank: <b>' + this.point.general_rank_video_views + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n \n  })\n  \n  output$Plot62b <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideoMemesBottom()\n    \n    df <- WeekVideosBottom[,c(4, grep(\"repost_order\", colnames(DataVideos)), grep(\"s0\", colnames(DataVideos)):grep(\"s40\", colnames(DataVideos)))]\n    df[duplicated(df$sharetext),]$sharetext <- paste(df[duplicated(df$sharetext),]$sharetext, df[duplicated(df$sharetext),]$repost_order)\n    df <- gather(df, \"seconds_viewed\", \"percentage_viewed\", 3:43)\n    df <- dlply(df,\"sharetext\", function (x){list(data = x$percentage_viewed, name = unique(x$sharetext))})\n    ds <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(data = df[[x]]$data, name = df[[x]]$name)\n    })\n    \n    Plot_Video_Drop_Off_Function(ds)\n   \n  })\n  \n  output$Plot63b <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideoMemesBottom()\n    \n    WeekVideosBottom$feed_likes_rate <- as.numeric(format(WeekVideosBottom$feed_likes_rate*100, digits= 4))\n    WeekVideosBottom$love_rate <- as.numeric(format(WeekVideosBottom$love_rate*100, digits = 2))\n    WeekVideosBottom$wow_rate <- as.numeric(format(WeekVideosBottom$wow_rate*100, digits = 2))\n    WeekVideosBottom$haha_rate <- as.numeric(format(WeekVideosBottom$haha_rate*100, digits = 2))\n    WeekVideosBottom$sad_rate <- as.numeric(format(WeekVideosBottom$sad_rate*100, digits = 2))\n    WeekVideosBottom$angry_rate <- as.numeric(format(WeekVideosBottom$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$feed_likes_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$love_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$wow_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$haha_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$sad_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$angry_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$Plot64b <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideoMemesBottom()\n    \n    WeekVideosBottom$fan_rate <- as.numeric(format(WeekVideosBottom$fan_rate*100, digits = 4))\n    WeekVideosBottom$viral_rate <- as.numeric(format(WeekVideosBottom$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$fan_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$viral_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.1.4. Memes ----------------------------------------------------------------------------------------------------------\n  \n  # 4.1.4.1. Top ------------------------------------------------------------------------------------------------------------------------\n  \n  output$Table5 = DT::renderDataTable({\n    \n    WeekPhotosTop <- WeekPhotoTop()\n    \n    WeekPhotosTop$post_reach <- format(WeekPhotosTop$post_reach, big.mark = \",\")\n    WeekPhotosTop$comment<- format(WeekPhotosTop$comment, big.mark = \",\")\n    WeekPhotosTop$like <- format(WeekPhotosTop$like, big.mark = \",\")\n    WeekPhotosTop$share <- format(WeekPhotosTop$share, big.mark = \",\")\n    WeekPhotosTop$sharetext <- paste0(\"<a href='\",WeekPhotosTop$permalink,\"' target='_blank'>\",WeekPhotosTop$sharetext,\"</a>\")\n    \n    WeekPhotosTop$ctr <- paste0(formatC(100 * WeekPhotosTop$ctr, format = \"f\", digits = 2), \"%\")\n    WeekPhotosTop$interaction_rate <- paste0(formatC(100 * WeekPhotosTop$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekPhotosTop[, input$show_vars3, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:5))), dom = \"ft\"))\n  \n  output$Plot7_Title <- renderHighchart({\n    \n    DateRangeMemes <- DataPhotos[which(DataPhotos$date >= input$dateRange1[1] & DataPhotos$date <= input$dateRange1[2]),]\n    \n    if(input$meme_select_original_repost_top == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$meme_select_original_repost_top == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    plot_subtitle <- paste(as.character(max(number_meme_top$n-9, 1)), \" - \", as.character(min(nrow(DateRangeMemes), number_meme_top$n)), \" of \", as.character(nrow(DateRangeMemes)))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$Plot7 <- renderHighchart({\n    \n    WeekPhotosTop <- WeekPhotoTop()\n \n    ds <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(name = ifelse(WeekPhotosTop[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekPhotosTop[x,]$permalink, color = ifelse(WeekPhotosTop[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekPhotosTop[x,]$full_picture, share_text = WeekPhotosTop[x,]$sharetext, rank_reach = WeekPhotosTop[x,]$rank_reach, general_rank_reach = WeekPhotosTop[x,]$general_rank_reach,  rank_interactions = WeekPhotosTop[x,]$rank_interactions,  general_rank_interactions = WeekPhotosTop[x,]$general_rank_interactions, reach = WeekPhotosTop[x,]$post_reach, interactions = WeekPhotosTop[x,]$total_interactions, times_repo = ifelse(is.na(WeekPhotosTop[x,]$times_repost), 0, WeekPhotosTop[x,]$times_repost), y = ifelse(input$meme_select_plot_variable_top == \"Reach\", WeekPhotosTop[x,]$post_reach, WeekPhotosTop[x,]$total_interactions))\n    })\n    \n    input_categories <- reorder(WeekPhotosTop$sharetext, WeekPhotosTop$post_reach)\n    \n    input_plot_var <- input$meme_select_plot_variable_top\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n\n  })\n  \n  output$Plot71 <- renderHighchart({\n    \n    WeekPhotosTop <- WeekPhotoTop()\n    \n    WeekPhotosTop$feed_likes_rate <- as.numeric(format(WeekPhotosTop$feed_likes_rate*100, digits= 4))\n    WeekPhotosTop$love_rate <- as.numeric(format(WeekPhotosTop$love_rate*100, digits = 2))\n    WeekPhotosTop$wow_rate <- as.numeric(format(WeekPhotosTop$wow_rate*100, digits = 2))\n    WeekPhotosTop$haha_rate <- as.numeric(format(WeekPhotosTop$haha_rate*100, digits = 2))\n    WeekPhotosTop$sad_rate <- as.numeric(format(WeekPhotosTop$sad_rate*100, digits = 2))\n    WeekPhotosTop$angry_rate <- as.numeric(format(WeekPhotosTop$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$feed_likes_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$love_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$wow_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$haha_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$sad_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$angry_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekPhotosTop$sharetext, WeekPhotosTop$post_reach)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$Plot72 <- renderHighchart({\n    \n    WeekPhotosTop <- WeekPhotoTop()\n    \n    WeekPhotosTop$fan_rate <- as.numeric(format(WeekPhotosTop$fan_rate*100, digits = 4))\n    WeekPhotosTop$viral_rate <- as.numeric(format(WeekPhotosTop$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$fan_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$viral_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekPhotosTop$sharetext, WeekPhotosTop$post_reach)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.1.4.2. Bottom ---------------------------------------------------------------------------------------------------------------------\n  \n  output$Table6 = DT::renderDataTable({\n    \n    WeekPhotosBottom <- WeekPhotoBottom()\n    \n    WeekPhotosBottom$post_reach <- format(WeekPhotosBottom$post_reach, big.mark = \",\")\n    WeekPhotosBottom$comment<- format(WeekPhotosBottom$comment, big.mark = \",\")\n    WeekPhotosBottom$like <- format(WeekPhotosBottom$like, big.mark = \",\")\n    WeekPhotosBottom$share <- format(WeekPhotosBottom$share, big.mark = \",\")\n    WeekPhotosBottom$sharetext <- paste0(\"<a href='\",WeekPhotosBottom$permalink,\"' target='_blank'>\",WeekPhotosBottom$sharetext,\"</a>\")\n    \n    WeekPhotosBottom$ctr <- paste0(formatC(100 * WeekPhotosBottom$ctr, format = \"f\", digits = 2), \"%\")\n    WeekPhotosBottom$interaction_rate <- paste0(formatC(100 * WeekPhotosBottom$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekPhotosBottom[, input$show_vars6, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:5))), dom = \"ft\"))\n  \n  output$Plot8_Title <- renderHighchart({\n    \n    DateRangeMemes <- DataPhotos[which(DataPhotos$date >= input$dateRange1[1] & DataPhotos$date <= input$dateRange1[2]),]\n    \n    if(input$meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    \n    plot_subtitle <- paste(as.character(min(nrow(DateRangeMemes) + 10 - number_meme_bottom$n, nrow(DateRangeMemes))), \" - \", as.character(max(nrow(DateRangeMemes) - number_meme_bottom$n + 1, 1)), \" of \", nrow(DateRangeMemes))\n   \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$Plot8 <- renderHighchart({\n    \n    WeekPhotosBottom <- WeekPhotoBottom() \n\n    ds <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(name = ifelse(WeekPhotosBottom[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekPhotosBottom[x,]$permalink, color = ifelse(WeekPhotosBottom[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekPhotosBottom[x,]$full_picture, share_text = WeekPhotosBottom[x,]$sharetext, rank_reach = WeekPhotosBottom[x,]$rank_reach, general_rank_reach = WeekPhotosBottom[x,]$general_rank_reach,  rank_interactions = WeekPhotosBottom[x,]$rank_interactions,  general_rank_interactions = WeekPhotosBottom[x,]$general_rank_interactions, reach = WeekPhotosBottom[x,]$post_reach, interactions = WeekPhotosBottom[x,]$total_interactions, times_repo = ifelse(is.na(WeekPhotosBottom[x,]$times_repost), 0, WeekPhotosBottom[x,]$times_repost), y = ifelse(input$meme_select_plot_variable_bottom == \"Reach\", WeekPhotosBottom[x,]$post_reach, WeekPhotosBottom[x,]$total_interactions))\n    })\n    \n    input_categories <- reorder(WeekPhotosBottom$sharetext, WeekPhotosBottom$post_reach)\n    \n    input_plot_var <- input$meme_select_plot_variable_bottom\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n  \n  })\n  \n  output$Plot81 <- renderHighchart({\n    \n    WeekPhotosBottom <- WeekPhotoBottom() \n    \n    WeekPhotosBottom$feed_likes_rate <- as.numeric(format(WeekPhotosBottom$feed_likes_rate*100, digits= 4))\n    WeekPhotosBottom$love_rate <- as.numeric(format(WeekPhotosBottom$love_rate*100, digits = 2))\n    WeekPhotosBottom$wow_rate <- as.numeric(format(WeekPhotosBottom$wow_rate*100, digits = 2))\n    WeekPhotosBottom$haha_rate <- as.numeric(format(WeekPhotosBottom$haha_rate*100, digits = 2))\n    WeekPhotosBottom$sad_rate <- as.numeric(format(WeekPhotosBottom$sad_rate*100, digits = 2))\n    WeekPhotosBottom$angry_rate <- as.numeric(format(WeekPhotosBottom$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$feed_likes_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$love_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$wow_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$haha_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$sad_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$angry_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekPhotosBottom$sharetext, WeekPhotosBottom$post_reach)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$Plot82 <- renderHighchart({\n    \n    WeekPhotosBottom <- WeekPhotoBottom() \n    \n    WeekPhotosBottom$fan_rate <- as.numeric(format(WeekPhotosBottom$fan_rate*100, digits = 4))\n    WeekPhotosBottom$viral_rate <- as.numeric(format(WeekPhotosBottom$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$fan_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$viral_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekPhotosBottom$sharetext, WeekPhotosBottom$post_reach)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  \n  #---------------------------------------------------------------------------------------------------------------------\n  \n  # 4.2. Top & Bottom Posts - Bad Hombres ---------------------------------------------------------------------------------------------------------------------------\n  \n  # 4.2.1. Articles  ------------------------------------------------------------------------------------------------------\n  \n  # 4.2.1.1. Top ------------------------------------------------------------------------------------------------------------------------\n  \n  output$BH_Table1 = DT::renderDataTable({\n    \n    WeekLinksTop <- WeekLinksTopBH()\n    \n    WeekLinksTop$post_reach <- format( WeekLinksTop$post_reach, big.mark = \",\")\n    WeekLinksTop$link_clicks <- format( WeekLinksTop$link_clicks, big.mark = \",\")\n    WeekLinksTop$headline <- paste0(\"<a href='\", WeekLinksTop$permalink,\"' target='_blank'>\", WeekLinksTop$headline,\"</a>\")\n    WeekLinksTop$ctr <- paste0(formatC(100 * WeekLinksTop$ctr, format = \"f\", digits = 2), \"%\")\n    WeekLinksTop$interaction_rate <- paste0(formatC(100 * WeekLinksTop$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekLinksTop[, input$bh_show_vars1, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$BH_Plot1_Title <- renderHighchart({\n    \n    DateRangeArticles <- DataArticlesBH[which(DataArticlesBH$date >= input$dateRange1[1] & DataArticlesBH$date <= input$dateRange1[2]),]\n    \n    if(input$bh_article_select_original_repost_top == \"Originals\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n    }\n    \n    else if (input$bh_article_select_original_repost_top == \"Reposts\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$bh_article_select_categories_top),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    plot_subtitle <- paste(as.character(max(bh_number_article_top$n-9, 1)), \" - \", as.character(min(nrow(DateRangeArticles), bh_number_article_top$n)), \" of \", as.character(nrow(DateRangeArticles)))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BH_Plot1 <- renderHighchart({\n    \n    WeekLinksTop <- WeekLinksTopBH()\n    \n    ds <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(name = ifelse(WeekLinksTop[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekLinksTop[x,]$permalink, color = ifelse(WeekLinksTop[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekLinksTop[x,]$full_picture, share_text = WeekLinksTop[x,]$sharetext, link_clicks = WeekLinksTop[x,]$link_clicks, rank_link_clicks = WeekLinksTop[x,]$rank_link_clicks, general_rank_link_clicks = WeekLinksTop[x,]$general_rank_link_clicks, rank_reach = WeekLinksTop[x,]$rank_reach, general_rank_reach = WeekLinksTop[x,]$general_rank_reach,  rank_interactions = WeekLinksTop[x,]$rank_interactions,  general_rank_interactions = WeekLinksTop[x,]$general_rank_interactions, reach = WeekLinksTop[x,]$post_reach, interactions = WeekLinksTop[x,]$total_interactions, times_repo = ifelse(is.na(WeekLinksTop[x,]$times_repost), 0, WeekLinksTop[x,]$times_repost), post_category = WeekLinksTop[x,]$category, y = ifelse(input$bh_article_select_plot_variable_top == \"Link Clicks\", WeekLinksTop[x,]$link_clicks, ifelse(input$bh_article_select_plot_variable_top == \"Reach\", WeekLinksTop[x,]$post_reach, WeekLinksTop[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekLinksTop$headline, WeekLinksTop$link_clicks)\n    \n    input_plot_var <- input$bh_article_select_plot_variable_top\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Link Clicks : <b>' + this.point.link_clicks + '</b>  | Rank: <b>' + this.point.rank_link_clicks + '</b> | Gen. Rank: <b>' + this.point.general_rank_link_clicks + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n   \n  })\n  \n  output$BH_Plot2 <- renderHighchart({\n    \n    cols=c(\"steelblue3\",\"skyblue4\")\n    \n    WeekLinksTop <- WeekLinksTopBH()\n    \n    WeekLinksTop$ctr <- as.numeric(format(WeekLinksTop$ctr*100, digits= 3))\n    WeekLinksTop$interaction_rate <- as.numeric(format(WeekLinksTop$interaction_rate*100, digits = 2))\n    \n    ds_ctr <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$ctr, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_ir <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$interaction_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksTop$headline, WeekLinksTop$link_clicks)\n    \n    Plot_Article_Rates_Function(ds_ctr, ds_ir, input_categories)\n\n  })\n  \n  output$BH_Plot21 <- renderHighchart({\n    \n    WeekLinksTop <- WeekLinksTopBH()\n    \n    WeekLinksTop$feed_likes_rate <- as.numeric(format(WeekLinksTop$feed_likes_rate*100, digits= 4))\n    WeekLinksTop$love_rate <- as.numeric(format(WeekLinksTop$love_rate*100, digits = 2))\n    WeekLinksTop$wow_rate <- as.numeric(format(WeekLinksTop$wow_rate*100, digits = 2))\n    WeekLinksTop$haha_rate <- as.numeric(format(WeekLinksTop$haha_rate*100, digits = 2))\n    WeekLinksTop$sad_rate <- as.numeric(format(WeekLinksTop$sad_rate*100, digits = 2))\n    WeekLinksTop$angry_rate <- as.numeric(format(WeekLinksTop$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$feed_likes_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$love_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$wow_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$haha_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$sad_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$angry_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksTop$headline, WeekLinksTop$link_clicks)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$BH_Plot22 <- renderHighchart({\n    \n    WeekLinksTop <- WeekLinksTopBH()\n    \n    WeekLinksTop$fan_rate <- as.numeric(format(WeekLinksTop$fan_rate*100, digits = 4))\n    WeekLinksTop$viral_rate <- as.numeric(format(WeekLinksTop$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$fan_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$viral_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksTop$headline, WeekLinksTop$link_clicks)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.2.1.2. Bottom ---------------------------------------------------------------------------------------------------------------------\n  \n  output$BH_Table2 = DT::renderDataTable({\n    \n    WeekLinksBottom <- WeekLinksBottomBH()\n    \n    WeekLinksBottom$post_reach <- format(WeekLinksBottom$post_reach, big.mark = \",\")\n    WeekLinksBottom$link_clicks <- format(WeekLinksBottom$link_clicks, big.mark = \",\")\n    WeekLinksBottom$headline <- paste0(\"<a href='\",WeekLinksBottom$permalink,\"' target='_blank'>\",WeekLinksBottom$headline,\"</a>\")\n    WeekLinksBottom$ctr <- paste0(formatC(100 * WeekLinksBottom$ctr, format = \"f\", digits = 2), \"%\")\n    WeekLinksBottom$interaction_rate <- paste0(formatC(100 * WeekLinksBottom$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekLinksBottom[, input$bh_show_vars4, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$BH_Plot3_Title <- renderHighchart({\n    \n    DateRangeArticles <- DataArticlesBH[which(DataArticlesBH$date >= input$dateRange1[1] & DataArticlesBH$date <= input$dateRange1[2]),]\n    \n    if(input$bh_article_select_original_repost_bottom == \"Originals\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n    }\n    \n    else if (input$bh_article_select_original_repost_bottom == \"Reposts\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$bh_article_select_categories_bottom),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    \n    plot_subtitle <- paste(as.character(min(nrow(DateRangeArticles) + 10 - bh_number_article_bottom$n, nrow(DateRangeArticles))), \" - \", as.character(max(nrow(DateRangeArticles) - bh_number_article_bottom$n + 1, 1)), \" of \", as.character(nrow(DateRangeArticles)))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BH_Plot3 <- renderHighchart({\n    \n    WeekLinksBottom <- WeekLinksBottomBH()\n    \n    ds <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(name = ifelse(WeekLinksBottom[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekLinksBottom[x,]$permalink, color = ifelse(WeekLinksBottom[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekLinksBottom[x,]$full_picture, share_text = WeekLinksBottom[x,]$sharetext, link_clicks = WeekLinksBottom[x,]$link_clicks, rank_link_clicks = WeekLinksBottom[x,]$rank_link_clicks, general_rank_link_clicks = WeekLinksBottom[x,]$general_rank_link_clicks, rank_reach = WeekLinksBottom[x,]$rank_reach, general_rank_reach = WeekLinksBottom[x,]$general_rank_reach,  rank_interactions = WeekLinksBottom[x,]$rank_interactions,  general_rank_interactions = WeekLinksBottom[x,]$general_rank_interactions, reach = WeekLinksBottom[x,]$post_reach, interactions = WeekLinksBottom[x,]$total_interactions, times_repo = ifelse(is.na(WeekLinksBottom[x,]$times_repost), 0, WeekLinksBottom[x,]$times_repost), post_category = WeekLinksBottom[x,]$category, y = ifelse(input$bh_article_select_plot_variable_bottom == \"Link Clicks\", WeekLinksBottom[x,]$link_clicks, ifelse(input$bh_article_select_plot_variable_bottom == \"Reach\", WeekLinksBottom[x,]$post_reach, WeekLinksBottom[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekLinksBottom$headline, WeekLinksBottom$link_clicks)\n    \n    input_plot_var <- input$bh_article_select_plot_variable_bottom\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Link Clicks : <b>' + this.point.link_clicks + '</b>  | Rank: <b>' + this.point.rank_link_clicks + '</b> | Gen. Rank: <b>' + this.point.general_rank_link_clicks + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n    \n  })\n  \n  output$BH_Plot4 <- renderHighchart({\n    \n    cols=c(\"steelblue3\",\"skyblue4\")\n    \n    WeekLinksBottom <- WeekLinksBottomBH()\n    \n    WeekLinksBottom$ctr <- as.numeric(format(WeekLinksBottom$ctr*100, digits= 2))\n    WeekLinksBottom$interaction_rate <- as.numeric(format(WeekLinksBottom$interaction_rate*100, digits = 2))\n    \n    ds_ctr <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$ctr, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_ir <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$interaction_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksBottom$headline, WeekLinksBottom$link_clicks)\n    \n    Plot_Article_Rates_Function(ds_ctr, ds_ir, input_categories)\n  \n  })\n  \n  output$BH_Plot41 <- renderHighchart({\n    \n    WeekLinksBottom <- WeekLinksBottomBH()\n    \n    WeekLinksBottom$feed_likes_rate <- as.numeric(format(WeekLinksBottom$feed_likes_rate*100, digits= 4))\n    WeekLinksBottom$love_rate <- as.numeric(format(WeekLinksBottom$love_rate*100, digits = 2))\n    WeekLinksBottom$wow_rate <- as.numeric(format(WeekLinksBottom$wow_rate*100, digits = 2))\n    WeekLinksBottom$haha_rate <- as.numeric(format(WeekLinksBottom$haha_rate*100, digits = 2))\n    WeekLinksBottom$sad_rate <- as.numeric(format(WeekLinksBottom$sad_rate*100, digits = 2))\n    WeekLinksBottom$angry_rate <- as.numeric(format(WeekLinksBottom$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$feed_likes_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$love_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$wow_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$haha_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$sad_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$angry_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksBottom$headline, WeekLinksBottom$link_clicks)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$BH_Plot42 <- renderHighchart({\n    \n    WeekLinksBottom <- WeekLinksBottomBH()\n    \n    WeekLinksBottom$fan_rate <- as.numeric(format(WeekLinksBottom$fan_rate*100, digits = 4))\n    WeekLinksBottom$viral_rate <- as.numeric(format(WeekLinksBottom$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$fan_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$viral_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksBottom$headline, WeekLinksBottom$link_clicks)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.2.2. Videos  --------------------------------------------------------------------------------------------------------\n  \n  # 4.2.2.1. Top ------------------------------------------------------------------------------------------------------------------------\n  \n  output$BH_Table3 = DT::renderDataTable({\n    \n    WeekVideosTop <- WeekVideosTopBH()\n    \n    WeekVideosTop$post_video_views <- format(WeekVideosTop$post_video_views, big.mark = \",\")\n    WeekVideosTop$post_reach <- format(WeekVideosTop$post_reach, big.mark = \",\")\n    WeekVideosTop$comment<- format(WeekVideosTop$comment, big.mark = \",\")\n    WeekVideosTop$like <- format(WeekVideosTop$like, big.mark = \",\")\n    WeekVideosTop$share <- format(WeekVideosTop$share, big.mark = \",\")\n    WeekVideosTop$sharetext <- paste0(\"<a href='\",WeekVideosTop$permalink,\"' target='_blank'>\",WeekVideosTop$sharetext,\"</a>\")\n    WeekVideosTop$ctr <- paste0(formatC(100 * WeekVideosTop$ctr, format = \"f\", digits = 2), \"%\")\n    WeekVideosTop$interaction_rate <- paste0(formatC(100 * WeekVideosTop$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekVideosTop[, input$bh_show_vars2, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$BH_Plot5_Title <- renderHighchart({\n    \n    DateRangeVideos <- DataVideosBH[which(DataVideosBH$date >= input$dateRange1[1] & DataVideosBH$date <= input$dateRange1[2] & DataVideosBH$video_meme == 0),]\n    \n    if(input$bh_video_select_original_repost_top == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$bh_video_select_original_repost_top == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$bh_video_select_categories_top),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    plot_subtitle <- paste(as.character(max(bh_number_video_top$n-4, 1)), \" - \", as.character(min(nrow(DateRangeVideos), bh_number_video_top$n)), \" of \", as.character(nrow(DateRangeVideos)))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BH_Plot5 <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideosTopBH()\n    \n    ds <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(name = ifelse(WeekVideosTop[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekVideosTop[x,]$permalink, color = ifelse(WeekVideosTop[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekVideosTop[x,]$full_picture, share_text = WeekVideosTop[x,]$sharetext, video_views = WeekVideosTop[x,]$post_video_views, rank_video_views = WeekVideosTop[x,]$rank_video_views, general_rank_video_views = WeekVideosTop[x,]$general_rank_video_views, rank_reach = WeekVideosTop[x,]$rank_reach, general_rank_reach = WeekVideosTop[x,]$general_rank_reach,  rank_interactions = WeekVideosTop[x,]$rank_interactions,  general_rank_interactions = WeekVideosTop[x,]$general_rank_interactions, reach = WeekVideosTop[x,]$post_reach, interactions = WeekVideosTop[x,]$total_interactions, times_repo = ifelse(is.na(WeekVideosTop[x,]$times_repost), 0, WeekVideosTop[x,]$times_repost), post_category = WeekVideosTop[x,]$category, y = ifelse(input$bh_video_select_plot_variable_top == \"Video Views\", WeekVideosTop[x,]$post_video_views, ifelse(input$bh_video_select_plot_variable_top == \"Reach\", WeekVideosTop[x,]$post_reach, WeekVideosTop[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    input_plot_var <- input$bh_video_select_plot_variable_top\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Video Views : <b>' + this.point.video_views + '</b>  | Rank: <b>' + this.point.rank_video_views + '</b> | Gen. Rank: <b>' + this.point.general_rank_video_views + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n  \n  })\n  \n  output$BH_Plot52 <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideosTopBH()\n    \n    df <- WeekVideosTop[,c(4, grep(\"repost_order\", colnames(DataVideosBH)), grep(\"s0\", colnames(DataVideosBH)):grep(\"s40\", colnames(DataVideosBH)))]\n    df[duplicated(df$sharetext),]$sharetext <- paste(df[duplicated(df$sharetext),]$sharetext, df[duplicated(df$sharetext),]$repost_order)\n    df <- gather(df, \"seconds_viewed\", \"percentage_viewed\", 3:43)\n    df <- dlply(df,\"sharetext\", function (x){list(data = x$percentage_viewed, name = unique(x$sharetext))})\n    ds <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(data = df[[x]]$data, name = df[[x]]$name)\n    })\n    \n    Plot_Video_Drop_Off_Function(ds)\n    \n  })\n  \n  output$BH_Plot53 <- renderHighchart({\n    \n    cols=c(\"steelblue3\",\"skyblue4\")\n    \n    WeekVideosTop <- WeekVideosTopBH()\n    \n    WeekVideosTop$feed_likes_rate <- as.numeric(format(WeekVideosTop$feed_likes_rate*100, digits= 4))\n    WeekVideosTop$love_rate <- as.numeric(format(WeekVideosTop$love_rate*100, digits = 2))\n    WeekVideosTop$wow_rate <- as.numeric(format(WeekVideosTop$wow_rate*100, digits = 2))\n    WeekVideosTop$haha_rate <- as.numeric(format(WeekVideosTop$haha_rate*100, digits = 2))\n    WeekVideosTop$sad_rate <- as.numeric(format(WeekVideosTop$sad_rate*100, digits = 2))\n    WeekVideosTop$angry_rate <- as.numeric(format(WeekVideosTop$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$feed_likes_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$love_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$wow_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$haha_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$sad_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$angry_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$BH_Plot54 <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideosTopBH()\n    \n    WeekVideosTop$fan_rate <- as.numeric(format(WeekVideosTop$fan_rate*100, digits = 4))\n    WeekVideosTop$viral_rate <- as.numeric(format(WeekVideosTop$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$fan_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$viral_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.2.2.2. Bottom ---------------------------------------------------------------------------------------------------------------------\n  \n  output$BH_Table4 = DT::renderDataTable({\n    \n    WeekVideosBottom <- WeekVideosBottomBH()\n    \n    WeekVideosBottom$post_video_views <- format(WeekVideosBottom$post_video_views, big.mark = \",\")\n    WeekVideosBottom$post_reach <- format(WeekVideosBottom$post_reach, big.mark = \",\")\n    WeekVideosBottom$comment<- format(WeekVideosBottom$comment, big.mark = \",\")\n    WeekVideosBottom$like <- format(WeekVideosBottom$like, big.mark = \",\")\n    WeekVideosBottom$share <- format(WeekVideosBottom$share, big.mark = \",\")\n    WeekVideosBottom$sharetext <- paste0(\"<a href='\",WeekVideosBottom$permalink,\"' target='_blank'>\",WeekVideosBottom$sharetext,\"</a>\")\n    \n    WeekVideosBottom$ctr <- paste0(formatC(100 * WeekVideosBottom$ctr, format = \"f\", digits = 2), \"%\")\n    WeekVideosBottom$interaction_rate <- paste0(formatC(100 * WeekVideosBottom$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekVideosBottom[, input$bh_show_vars5, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$BH_Plot6_Title <- renderHighchart({\n    \n    DateRangeVideos <- DataVideosBH[which(DataVideosBH$date >= input$dateRange1[1] & DataVideosBH$date <= input$dateRange1[2] & DataVideosBH$video_meme == 0),]\n    \n    if(input$bh_video_select_original_repost_bottom == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$bh_video_select_original_repost_bottom == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$bh_video_select_categories_bottom),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    \n    plot_subtitle <- paste(as.character(min(nrow(DateRangeVideos) + 5 - bh_number_video_bottom$n, nrow(DateRangeVideos))), \" - \", as.character(max(nrow(DateRangeVideos) - bh_number_video_bottom$n + 1, 1)), \" of \", nrow(DateRangeVideos))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BH_Plot6 <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideosBottomBH()\n    \n    ds <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(name = ifelse(WeekVideosBottom[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekVideosBottom[x,]$permalink, color = ifelse(WeekVideosBottom[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekVideosBottom[x,]$full_picture, share_text = WeekVideosBottom[x,]$sharetext, video_views = WeekVideosBottom[x,]$post_video_views, rank_video_views = WeekVideosBottom[x,]$rank_video_views, general_rank_video_views = WeekVideosBottom[x,]$general_rank_video_views, rank_reach = WeekVideosBottom[x,]$rank_reach, general_rank_reach = WeekVideosBottom[x,]$general_rank_reach,  rank_interactions = WeekVideosBottom[x,]$rank_interactions,  general_rank_interactions = WeekVideosBottom[x,]$general_rank_interactions, reach = WeekVideosBottom[x,]$post_reach, interactions = WeekVideosBottom[x,]$total_interactions, times_repo = ifelse(is.na(WeekVideosBottom[x,]$times_repost), 0, WeekVideosBottom[x,]$times_repost), post_category = WeekVideosBottom[x,]$category, y = ifelse(input$bh_video_select_plot_variable_bottom == \"Video Views\", WeekVideosBottom[x,]$post_video_views, ifelse(input$bh_video_select_plot_variable_bottom == \"Reach\", WeekVideosBottom[x,]$post_reach, WeekVideosBottom[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    input_plot_var <- input$bh_video_select_plot_variable_bottom\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Video Views : <b>' + this.point.video_views + '</b>  | Rank: <b>' + this.point.rank_video_views + '</b> | Gen. Rank: <b>' + this.point.general_rank_video_views + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n    \n  })\n  \n  output$BH_Plot62 <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideosBottomBH()\n    \n    df <- WeekVideosBottom[,c(4, grep(\"repost_order\", colnames(DataVideosBH)), grep(\"s0\", colnames(DataVideosBH)):grep(\"s40\", colnames(DataVideosBH)))]\n    df[duplicated(df$sharetext),]$sharetext <- paste(df[duplicated(df$sharetext),]$sharetext, df[duplicated(df$sharetext),]$repost_order)\n    df <- gather(df, \"seconds_viewed\", \"percentage_viewed\", 3:43)\n    df <- dlply(df,\"sharetext\", function (x){list(data = x$percentage_viewed, name = unique(x$sharetext))})\n    ds <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(data = df[[x]]$data, name = df[[x]]$name)\n    })\n    \n    Plot_Video_Drop_Off_Function(ds)\n    \n  })\n  \n  output$BH_Plot63 <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideosBottomBH()\n    \n    WeekVideosBottom$feed_likes_rate <- as.numeric(format(WeekVideosBottom$feed_likes_rate*100, digits= 4))\n    WeekVideosBottom$love_rate <- as.numeric(format(WeekVideosBottom$love_rate*100, digits = 2))\n    WeekVideosBottom$wow_rate <- as.numeric(format(WeekVideosBottom$wow_rate*100, digits = 2))\n    WeekVideosBottom$haha_rate <- as.numeric(format(WeekVideosBottom$haha_rate*100, digits = 2))\n    WeekVideosBottom$sad_rate <- as.numeric(format(WeekVideosBottom$sad_rate*100, digits = 2))\n    WeekVideosBottom$angry_rate <- as.numeric(format(WeekVideosBottom$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$feed_likes_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$love_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$wow_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$haha_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$sad_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$angry_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$BH_Plot64 <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideosBottomBH()\n    \n    WeekVideosBottom$fan_rate <- as.numeric(format(WeekVideosBottom$fan_rate*100, digits = 4))\n    WeekVideosBottom$viral_rate <- as.numeric(format(WeekVideosBottom$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$fan_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$viral_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.2.3. Video Memes ----------------------------------------------------------------------------------------------------\n  \n  # 4.2.3.1. Top ------------------------------------------------------------------------------------------------------------------------\n  \n  output$BH_Table3b = DT::renderDataTable({\n    \n    WeekVideosTop <- WeekVideoMemesTopBH()\n    \n    WeekVideosTop$post_video_views <- format(WeekVideosTop$post_video_views, big.mark = \",\")\n    WeekVideosTop$post_reach <- format(WeekVideosTop$post_reach, big.mark = \",\")\n    WeekVideosTop$comment<- format(WeekVideosTop$comment, big.mark = \",\")\n    WeekVideosTop$like <- format(WeekVideosTop$like, big.mark = \",\")\n    WeekVideosTop$share <- format(WeekVideosTop$share, big.mark = \",\")\n    WeekVideosTop$sharetext <- paste0(\"<a href='\",WeekVideosTop$permalink,\"' target='_blank'>\",WeekVideosTop$sharetext,\"</a>\")\n    \n    WeekVideosTop$ctr <- paste0(formatC(100 * WeekVideosTop$ctr, format = \"f\", digits = 2), \"%\")\n    WeekVideosTop$interaction_rate <- paste0(formatC(100 * WeekVideosTop$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekVideosTop[, input$bh_show_vars2b, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$BH_Plot5b_Title <- renderHighchart({\n    \n    DateRangeVideos <- DataVideosBH[which(DataVideosBH$date >= input$dateRange1[1] & DataVideosBH$date <= input$dateRange1[2] & DataVideosBH$video_meme == 1),]\n    \n    if(input$bh_video_meme_select_original_repost_top == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$bh_video_meme_select_original_repost_top == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$bh_video_meme_select_categories_top),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    plot_subtitle <- paste(as.character(max(bh_number_video_meme_top$n-4, 1)), \" - \", as.character(min(nrow(DateRangeVideos), bh_number_video_meme_top$n)), \" of \", as.character(nrow(DateRangeVideos)))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BH_Plot5b <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideoMemesTopBH()\n    \n    ds <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(name = ifelse(WeekVideosTop[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekVideosTop[x,]$permalink, color = ifelse(WeekVideosTop[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekVideosTop[x,]$full_picture, share_text = WeekVideosTop[x,]$sharetext, video_views = WeekVideosTop[x,]$post_video_views, rank_video_views = WeekVideosTop[x,]$rank_video_views, general_rank_video_views = WeekVideosTop[x,]$general_rank_video_views, rank_reach = WeekVideosTop[x,]$rank_reach, general_rank_reach = WeekVideosTop[x,]$general_rank_reach,  rank_interactions = WeekVideosTop[x,]$rank_interactions,  general_rank_interactions = WeekVideosTop[x,]$general_rank_interactions, reach = WeekVideosTop[x,]$post_reach, interactions = WeekVideosTop[x,]$total_interactions, times_repo = ifelse(is.na(WeekVideosTop[x,]$times_repost), 0, WeekVideosTop[x,]$times_repost), post_category = WeekVideosTop[x,]$category, y = ifelse(input$bh_video_meme_select_plot_variable_top == \"Video Views\", WeekVideosTop[x,]$post_video_views, ifelse(input$bh_video_meme_select_plot_variable_top == \"Reach\", WeekVideosTop[x,]$post_reach, WeekVideosTop[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    input_plot_var <- input$bh_video_meme_select_plot_variable_top\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Video Views : <b>' + this.point.video_views + '</b>  | Rank: <b>' + this.point.rank_video_views + '</b> | Gen. Rank: <b>' + this.point.general_rank_video_views + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n    \n  })\n  \n  output$BH_Plot52b <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideoMemesTopBH()\n    \n    df <- WeekVideosTop[,c(4, grep(\"repost_order\", colnames(DataVideosBH)), grep(\"s0\", colnames(DataVideosBH)):grep(\"s40\", colnames(DataVideosBH)))]\n    df[duplicated(df$sharetext),]$sharetext <- paste(df[duplicated(df$sharetext),]$sharetext, df[duplicated(df$sharetext),]$repost_order)\n    df <- gather(df, \"seconds_viewed\", \"percentage_viewed\", 3:43)\n    df <- dlply(df,\"sharetext\", function (x){list(data = x$percentage_viewed, name = unique(x$sharetext))})\n    ds <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(data = df[[x]]$data, name = df[[x]]$name)\n    })\n    \n    Plot_Video_Drop_Off_Function(ds)\n    \n  })\n  \n  output$BH_Plot53b <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideoMemesTopBH()\n    \n    WeekVideosTop$feed_likes_rate <- as.numeric(format(WeekVideosTop$feed_likes_rate*100, digits= 4))\n    WeekVideosTop$love_rate <- as.numeric(format(WeekVideosTop$love_rate*100, digits = 2))\n    WeekVideosTop$wow_rate <- as.numeric(format(WeekVideosTop$wow_rate*100, digits = 2))\n    WeekVideosTop$haha_rate <- as.numeric(format(WeekVideosTop$haha_rate*100, digits = 2))\n    WeekVideosTop$sad_rate <- as.numeric(format(WeekVideosTop$sad_rate*100, digits = 2))\n    WeekVideosTop$angry_rate <- as.numeric(format(WeekVideosTop$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$feed_likes_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$love_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$wow_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$haha_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$sad_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$angry_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$BH_Plot54b <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideoMemesTopBH()\n    \n    WeekVideosTop$fan_rate <- as.numeric(format(WeekVideosTop$fan_rate*100, digits = 4))\n    WeekVideosTop$viral_rate <- as.numeric(format(WeekVideosTop$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$fan_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$viral_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.2.3.2. Bottom ---------------------------------------------------------------------------------------------------------------------\n  \n  output$BH_Table4b = DT::renderDataTable({\n    \n    WeekVideosBottom <- WeekVideoMemesBottomBH()\n    \n    WeekVideosBottom$post_video_views <- format(WeekVideosBottom$post_video_views, big.mark = \",\")\n    WeekVideosBottom$post_reach <- format(WeekVideosBottom$post_reach, big.mark = \",\")\n    WeekVideosBottom$comment<- format(WeekVideosBottom$comment, big.mark = \",\")\n    WeekVideosBottom$like <- format(WeekVideosBottom$like, big.mark = \",\")\n    WeekVideosBottom$share <- format(WeekVideosBottom$share, big.mark = \",\")\n    WeekVideosBottom$sharetext <- paste0(\"<a href='\",WeekVideosBottom$permalink,\"' target='_blank'>\",WeekVideosBottom$sharetext,\"</a>\")\n    \n    WeekVideosBottom$ctr <- paste0(formatC(100 * WeekVideosBottom$ctr, format = \"f\", digits = 2), \"%\")\n    WeekVideosBottom$interaction_rate <- paste0(formatC(100 * WeekVideosBottom$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekVideosBottom[, input$bh_show_vars5b, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$BH_Plot6b_Title <- renderHighchart({\n    \n    DateRangeVideos <- DataVideosBH[which(DataVideosBH$date >= input$dateRange1[1] & DataVideosBH$date <= input$dateRange1[2] & DataVideosBH$video_meme == 1),]\n    \n    if(input$bh_video_meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$bh_video_meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$bh_video_meme_select_categories_bottom),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    \n    plot_subtitle <- paste(as.character(min(nrow(DateRangeVideos) + 5 - bh_number_video_meme_bottom$n, nrow(DateRangeVideos))), \" - \", as.character(max(nrow(DateRangeVideos) - bh_number_video_meme_bottom$n + 1, 1)), \" of \", nrow(DateRangeVideos))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BH_Plot6b <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideoMemesBottomBH()\n    \n    ds <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(name = ifelse(WeekVideosBottom[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekVideosBottom[x,]$permalink, color = ifelse(WeekVideosBottom[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekVideosBottom[x,]$full_picture, share_text = WeekVideosBottom[x,]$sharetext, video_views = WeekVideosBottom[x,]$post_video_views, rank_video_views = WeekVideosBottom[x,]$rank_video_views, general_rank_video_views = WeekVideosBottom[x,]$general_rank_video_views, rank_reach = WeekVideosBottom[x,]$rank_reach, general_rank_reach = WeekVideosBottom[x,]$general_rank_reach,  rank_interactions = WeekVideosBottom[x,]$rank_interactions,  general_rank_interactions = WeekVideosBottom[x,]$general_rank_interactions, reach = WeekVideosBottom[x,]$post_reach, interactions = WeekVideosBottom[x,]$total_interactions, times_repo = ifelse(is.na(WeekVideosBottom[x,]$times_repost), 0, WeekVideosBottom[x,]$times_repost), post_category = WeekVideosBottom[x,]$category, y = ifelse(input$bh_video_meme_select_plot_variable_bottom == \"Video Views\", WeekVideosBottom[x,]$post_video_views, ifelse(input$bh_video_meme_select_plot_variable_bottom == \"Reach\", WeekVideosBottom[x,]$post_reach, WeekVideosBottom[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    input_plot_var <- input$bh_video_meme_select_plot_variable_bottom\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Video Views : <b>' + this.point.video_views + '</b>  | Rank: <b>' + this.point.rank_video_views + '</b> | Gen. Rank: <b>' + this.point.general_rank_video_views + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n    \n  })\n  \n  output$BH_Plot62b <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideoMemesBottomBH()\n    \n    df <- WeekVideosBottom[,c(4, grep(\"repost_order\", colnames(DataVideosBH)), grep(\"s0\", colnames(DataVideosBH)):grep(\"s40\", colnames(DataVideosBH)))]\n    df[duplicated(df$sharetext),]$sharetext <- paste(df[duplicated(df$sharetext),]$sharetext, df[duplicated(df$sharetext),]$repost_order)\n    df <- gather(df, \"seconds_viewed\", \"percentage_viewed\", 3:43)\n    df <- dlply(df,\"sharetext\", function (x){list(data = x$percentage_viewed, name = unique(x$sharetext))})\n    ds <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(data = df[[x]]$data, name = df[[x]]$name)\n    })\n    \n    Plot_Video_Drop_Off_Function(ds)\n    \n  })\n  \n  output$BH_Plot63b <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideoMemesBottomBH()\n    \n    WeekVideosBottom$feed_likes_rate <- as.numeric(format(WeekVideosBottom$feed_likes_rate*100, digits= 4))\n    WeekVideosBottom$love_rate <- as.numeric(format(WeekVideosBottom$love_rate*100, digits = 2))\n    WeekVideosBottom$wow_rate <- as.numeric(format(WeekVideosBottom$wow_rate*100, digits = 2))\n    WeekVideosBottom$haha_rate <- as.numeric(format(WeekVideosBottom$haha_rate*100, digits = 2))\n    WeekVideosBottom$sad_rate <- as.numeric(format(WeekVideosBottom$sad_rate*100, digits = 2))\n    WeekVideosBottom$angry_rate <- as.numeric(format(WeekVideosBottom$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$feed_likes_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$love_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$wow_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$haha_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$sad_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$angry_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$BH_Plot64b <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideoMemesBottomBH()\n    \n    WeekVideosBottom$fan_rate <- as.numeric(format(WeekVideosBottom$fan_rate*100, digits = 4))\n    WeekVideosBottom$viral_rate <- as.numeric(format(WeekVideosBottom$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$fan_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$viral_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.2.4. Memes ----------------------------------------------------------------------------------------------------------\n  \n  # 4.2.4.1. Top ------------------------------------------------------------------------------------------------------------------------\n  \n  output$BH_Table5 = DT::renderDataTable({\n    \n    WeekPhotosTop <- WeekPhotoTopBH()\n    \n    WeekPhotosTop$post_reach <- format(WeekPhotosTop$post_reach, big.mark = \",\")\n    WeekPhotosTop$comment<- format(WeekPhotosTop$comment, big.mark = \",\")\n    WeekPhotosTop$like <- format(WeekPhotosTop$like, big.mark = \",\")\n    WeekPhotosTop$share <- format(WeekPhotosTop$share, big.mark = \",\")\n    WeekPhotosTop$sharetext <- paste0(\"<a href='\",WeekPhotosTop$permalink,\"' target='_blank'>\",WeekPhotosTop$sharetext,\"</a>\")\n    \n    WeekPhotosTop$ctr <- paste0(formatC(100 * WeekPhotosTop$ctr, format = \"f\", digits = 2), \"%\")\n    WeekPhotosTop$interaction_rate <- paste0(formatC(100 * WeekPhotosTop$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekPhotosTop[, input$bh_show_vars3, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:5))), dom = \"ft\"))\n  \n  output$BH_Plot7_Title <- renderHighchart({\n    \n    DateRangeMemes <- DataPhotosBH[which(DataPhotosBH$date >= input$dateRange1[1] & DataPhotosBH$date <= input$dateRange1[2]),]\n    \n    if(input$bh_meme_select_original_repost_top == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$bh_meme_select_original_repost_top == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    plot_subtitle <- paste(as.character(max(bh_number_meme_top$n-9, 1)), \" - \", as.character(min(nrow(DateRangeMemes), bh_number_meme_top$n)), \" of \", as.character(nrow(DateRangeMemes)))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BH_Plot7 <- renderHighchart({\n    \n    WeekPhotosTop <- WeekPhotoTopBH()\n   \n    ds <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(name = ifelse(WeekPhotosTop[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekPhotosTop[x,]$permalink, color = ifelse(WeekPhotosTop[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekPhotosTop[x,]$full_picture, share_text = WeekPhotosTop[x,]$sharetext, rank_reach = WeekPhotosTop[x,]$rank_reach, general_rank_reach = WeekPhotosTop[x,]$general_rank_reach,  rank_interactions = WeekPhotosTop[x,]$rank_interactions,  general_rank_interactions = WeekPhotosTop[x,]$general_rank_interactions, reach = WeekPhotosTop[x,]$post_reach, interactions = WeekPhotosTop[x,]$total_interactions, times_repo = ifelse(is.na(WeekPhotosTop[x,]$times_repost), 0, WeekPhotosTop[x,]$times_repost), y = ifelse(input$bh_meme_select_plot_variable_top == \"Reach\", WeekPhotosTop[x,]$post_reach, WeekPhotosTop[x,]$total_interactions))\n    })\n    \n    input_categories <- reorder(WeekPhotosTop$sharetext, WeekPhotosTop$post_reach)\n    \n    input_plot_var <- input$bh_meme_select_plot_variable_top\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n    \n  })\n  \n  output$BH_Plot71 <- renderHighchart({\n    \n    WeekPhotosTop <- WeekPhotoTopBH()\n    \n    WeekPhotosTop$feed_likes_rate <- as.numeric(format(WeekPhotosTop$feed_likes_rate*100, digits= 4))\n    WeekPhotosTop$love_rate <- as.numeric(format(WeekPhotosTop$love_rate*100, digits = 2))\n    WeekPhotosTop$wow_rate <- as.numeric(format(WeekPhotosTop$wow_rate*100, digits = 2))\n    WeekPhotosTop$haha_rate <- as.numeric(format(WeekPhotosTop$haha_rate*100, digits = 2))\n    WeekPhotosTop$sad_rate <- as.numeric(format(WeekPhotosTop$sad_rate*100, digits = 2))\n    WeekPhotosTop$angry_rate <- as.numeric(format(WeekPhotosTop$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$feed_likes_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$love_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$wow_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$haha_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$sad_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$angry_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekPhotosTop$sharetext, WeekPhotosTop$post_reach)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$BH_Plot72 <- renderHighchart({\n    \n    WeekPhotosTop <- WeekPhotoTopBH()\n    \n    WeekPhotosTop$fan_rate <- as.numeric(format(WeekPhotosTop$fan_rate*100, digits = 4))\n    WeekPhotosTop$viral_rate <- as.numeric(format(WeekPhotosTop$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$fan_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$viral_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekPhotosTop$sharetext, WeekPhotosTop$post_reach)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  \n  # 4.2.4.2. Bottom ---------------------------------------------------------------------------------------------------------------------\n  \n  output$BH_Table6 = DT::renderDataTable({\n    \n    WeekPhotosBottom <- WeekPhotoBottomBH()\n    \n    WeekPhotosBottom$post_reach <- format(WeekPhotosBottom$post_reach, big.mark = \",\")\n    WeekPhotosBottom$comment<- format(WeekPhotosBottom$comment, big.mark = \",\")\n    WeekPhotosBottom$like <- format(WeekPhotosBottom$like, big.mark = \",\")\n    WeekPhotosBottom$share <- format(WeekPhotosBottom$share, big.mark = \",\")\n    WeekPhotosBottom$sharetext <- paste0(\"<a href='\",WeekPhotosBottom$permalink,\"' target='_blank'>\",WeekPhotosBottom$sharetext,\"</a>\")\n    \n    WeekPhotosBottom$ctr <- paste0(formatC(100 * WeekPhotosBottom$ctr, format = \"f\", digits = 2), \"%\")\n    WeekPhotosBottom$interaction_rate <- paste0(formatC(100 * WeekPhotosBottom$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekPhotosBottom[, input$bh_show_vars6, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:5))), dom = \"ft\"))\n  \n  output$BH_Plot8_Title <- renderHighchart({\n    \n    DateRangeMemes <- DataPhotosBH[which(DataPhotosBH$date >= input$dateRange1[1] & DataPhotosBH$date <= input$dateRange1[2]),]\n    \n    if(input$bh_meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$bh_meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    \n    plot_subtitle <- paste(as.character(min(nrow(DateRangeMemes) + 10 - bh_number_meme_bottom$n, nrow(DateRangeMemes))), \" - \", as.character(max(nrow(DateRangeMemes) - bh_number_meme_bottom$n + 1, 1)), \" of \", nrow(DateRangeMemes))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$BH_Plot8 <- renderHighchart({\n    \n    WeekPhotosBottom <- WeekPhotoBottomBH() \n    \n    ds <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(name = ifelse(WeekPhotosBottom[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekPhotosBottom[x,]$permalink, color = ifelse(WeekPhotosBottom[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekPhotosBottom[x,]$full_picture, share_text = WeekPhotosBottom[x,]$sharetext, rank_reach = WeekPhotosBottom[x,]$rank_reach, general_rank_reach = WeekPhotosBottom[x,]$general_rank_reach,  rank_interactions = WeekPhotosBottom[x,]$rank_interactions,  general_rank_interactions = WeekPhotosBottom[x,]$general_rank_interactions, reach = WeekPhotosBottom[x,]$post_reach, interactions = WeekPhotosBottom[x,]$total_interactions, times_repo = ifelse(is.na(WeekPhotosBottom[x,]$times_repost), 0, WeekPhotosBottom[x,]$times_repost), y = ifelse(input$bh_meme_select_plot_variable_bottom == \"Reach\", WeekPhotosBottom[x,]$post_reach, WeekPhotosBottom[x,]$total_interactions))\n    })\n    \n    input_categories <- reorder(WeekPhotosBottom$sharetext, WeekPhotosBottom$post_reach)\n    \n    input_plot_var <- input$bh_meme_select_plot_variable_bottom\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n    \n  })\n  \n  output$BH_Plot81 <- renderHighchart({\n    \n    WeekPhotosBottom <- WeekPhotoBottomBH() \n    \n    WeekPhotosBottom$feed_likes_rate <- as.numeric(format(WeekPhotosBottom$feed_likes_rate*100, digits= 4))\n    WeekPhotosBottom$love_rate <- as.numeric(format(WeekPhotosBottom$love_rate*100, digits = 2))\n    WeekPhotosBottom$wow_rate <- as.numeric(format(WeekPhotosBottom$wow_rate*100, digits = 2))\n    WeekPhotosBottom$haha_rate <- as.numeric(format(WeekPhotosBottom$haha_rate*100, digits = 2))\n    WeekPhotosBottom$sad_rate <- as.numeric(format(WeekPhotosBottom$sad_rate*100, digits = 2))\n    WeekPhotosBottom$angry_rate <- as.numeric(format(WeekPhotosBottom$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$feed_likes_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$love_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$wow_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$haha_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$sad_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$angry_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekPhotosBottom$sharetext, WeekPhotosBottom$post_reach)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$BH_Plot82 <- renderHighchart({\n    \n    WeekPhotosBottom <- WeekPhotoBottomBH() \n    \n    WeekPhotosBottom$fan_rate <- as.numeric(format(WeekPhotosBottom$fan_rate*100, digits = 4))\n    WeekPhotosBottom$viral_rate <- as.numeric(format(WeekPhotosBottom$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$fan_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$viral_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekPhotosBottom$sharetext, WeekPhotosBottom$post_reach)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  #----------------------------------------------------------------------------------------------------------------------\n  \n  # 4.3. Top & Bottom Posts - Fierce ---------------------------------------------------------------------------------------------------------------------------\n  \n  # 4.3.1. Articles  ------------------------------------------------------------------------------------------------------\n  \n  # 4.3.1.1. Top ------------------------------------------------------------------------------------------------------------------------\n  \n  output$FC_Table1 = DT::renderDataTable({\n    \n    WeekLinksTop <- WeekLinksTopFC()\n    \n    WeekLinksTop$post_reach <- format( WeekLinksTop$post_reach, big.mark = \",\")\n    WeekLinksTop$link_clicks <- format( WeekLinksTop$link_clicks, big.mark = \",\")\n    WeekLinksTop$headline <- paste0(\"<a href='\", WeekLinksTop$permalink,\"' target='_blank'>\", WeekLinksTop$headline,\"</a>\")\n    WeekLinksTop$ctr <- paste0(formatC(100 * WeekLinksTop$ctr, format = \"f\", digits = 2), \"%\")\n    WeekLinksTop$interaction_rate <- paste0(formatC(100 * WeekLinksTop$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekLinksTop[, input$fc_show_vars1, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$FC_Plot1_Title <- renderHighchart({\n    \n    DateRangeArticles <- DataArticlesFC[which(DataArticlesFC$date >= input$dateRange1[1] & DataArticlesFC$date <= input$dateRange1[2]),]\n    \n    if(input$fc_article_select_original_repost_top == \"Originals\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n    }\n    \n    else if (input$fc_article_select_original_repost_top == \"Reposts\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$fc_article_select_categories_top),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    plot_subtitle <- paste(as.character(max(fc_number_article_top$n-9, 1)), \" - \", as.character(min(nrow(DateRangeArticles), fc_number_article_top$n)), \" of \", as.character(nrow(DateRangeArticles)))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$FC_Plot1 <- renderHighchart({\n    \n    WeekLinksTop <- WeekLinksTopFC()\n    \n    ds <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(name = ifelse(WeekLinksTop[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekLinksTop[x,]$permalink, color = ifelse(WeekLinksTop[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekLinksTop[x,]$full_picture, share_text = WeekLinksTop[x,]$sharetext, link_clicks = WeekLinksTop[x,]$link_clicks, rank_link_clicks = WeekLinksTop[x,]$rank_link_clicks, general_rank_link_clicks = WeekLinksTop[x,]$general_rank_link_clicks, rank_reach = WeekLinksTop[x,]$rank_reach, general_rank_reach = WeekLinksTop[x,]$general_rank_reach,  rank_interactions = WeekLinksTop[x,]$rank_interactions,  general_rank_interactions = WeekLinksTop[x,]$general_rank_interactions, reach = WeekLinksTop[x,]$post_reach, interactions = WeekLinksTop[x,]$total_interactions, times_repo = ifelse(is.na(WeekLinksTop[x,]$times_repost), 0, WeekLinksTop[x,]$times_repost), post_category = WeekLinksTop[x,]$category, y = ifelse(input$fc_article_select_plot_variable_top == \"Link Clicks\", WeekLinksTop[x,]$link_clicks, ifelse(input$fc_article_select_plot_variable_top == \"Reach\", WeekLinksTop[x,]$post_reach, WeekLinksTop[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekLinksTop$headline, WeekLinksTop$link_clicks)\n    \n    input_plot_var <- input$fc_article_select_plot_variable_top\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Link Clicks : <b>' + this.point.link_clicks + '</b>  | Rank: <b>' + this.point.rank_link_clicks + '</b> | Gen. Rank: <b>' + this.point.general_rank_link_clicks + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n    \n  })\n  \n  output$FC_Plot2 <- renderHighchart({\n    \n    cols=c(\"steelblue3\",\"skyblue4\")\n    \n    WeekLinksTop <- WeekLinksTopFC()\n    \n    WeekLinksTop$ctr <- as.numeric(format(WeekLinksTop$ctr*100, digits= 3))\n    WeekLinksTop$interaction_rate <- as.numeric(format(WeekLinksTop$interaction_rate*100, digits = 2))\n    \n    ds_ctr <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$ctr, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_ir <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$interaction_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksTop$headline, WeekLinksTop$link_clicks)\n    \n    Plot_Article_Rates_Function(ds_ctr, ds_ir, input_categories)\n\n  })\n  \n  output$FC_Plot21 <- renderHighchart({\n    \n    WeekLinksTop <- WeekLinksTopFC()\n    \n    WeekLinksTop$feed_likes_rate <- as.numeric(format(WeekLinksTop$feed_likes_rate*100, digits= 4))\n    WeekLinksTop$love_rate <- as.numeric(format(WeekLinksTop$love_rate*100, digits = 2))\n    WeekLinksTop$wow_rate <- as.numeric(format(WeekLinksTop$wow_rate*100, digits = 2))\n    WeekLinksTop$haha_rate <- as.numeric(format(WeekLinksTop$haha_rate*100, digits = 2))\n    WeekLinksTop$sad_rate <- as.numeric(format(WeekLinksTop$sad_rate*100, digits = 2))\n    WeekLinksTop$angry_rate <- as.numeric(format(WeekLinksTop$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$feed_likes_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$love_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$wow_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$haha_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$sad_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$angry_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksTop$headline, WeekLinksTop$link_clicks)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$FC_Plot22 <- renderHighchart({\n    \n    WeekLinksTop <- WeekLinksTopFC()\n    \n    WeekLinksTop$fan_rate <- as.numeric(format(WeekLinksTop$fan_rate*100, digits = 4))\n    WeekLinksTop$viral_rate <- as.numeric(format(WeekLinksTop$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$fan_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekLinksTop), function(x){\n      list(y = WeekLinksTop[x,]$viral_rate, url = WeekLinksTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksTop$headline, WeekLinksTop$link_clicks)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.3.1.2. Bottom ---------------------------------------------------------------------------------------------------------------------\n  \n  output$FC_Table2 = DT::renderDataTable({\n    \n    WeekLinksBottom <- WeekLinksBottomFC()\n    \n    WeekLinksBottom$post_reach <- format(WeekLinksBottom$post_reach, big.mark = \",\")\n    WeekLinksBottom$link_clicks <- format(WeekLinksBottom$link_clicks, big.mark = \",\")\n    WeekLinksBottom$headline <- paste0(\"<a href='\",WeekLinksBottom$permalink,\"' target='_blank'>\",WeekLinksBottom$headline,\"</a>\")\n    WeekLinksBottom$ctr <- paste0(formatC(100 * WeekLinksBottom$ctr, format = \"f\", digits = 2), \"%\")\n    WeekLinksBottom$interaction_rate <- paste0(formatC(100 * WeekLinksBottom$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekLinksBottom[, input$fc_show_vars4, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$FC_Plot3_Title <- renderHighchart({\n    \n    DateRangeArticles <- DataArticlesFC[which(DataArticlesFC$date >= input$dateRange1[1] & DataArticlesFC$date <= input$dateRange1[2]),]\n    \n    if(input$fc_article_select_original_repost_bottom == \"Originals\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 1),]\n    }\n    \n    else if (input$fc_article_select_original_repost_bottom == \"Reposts\"){\n      DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$original == 0),]\n    }\n    \n    DateRangeArticles <- DateRangeArticles[which(DateRangeArticles$category %in% input$fc_article_select_categories_bottom),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    \n    plot_subtitle <- paste(as.character(min(nrow(DateRangeArticles) + 10 - fc_number_article_bottom$n, nrow(DateRangeArticles))), \" - \", as.character(max(nrow(DateRangeArticles) - fc_number_article_bottom$n + 1, 1)), \" of \", as.character(nrow(DateRangeArticles)))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$FC_Plot3 <- renderHighchart({\n    \n    WeekLinksBottom <- WeekLinksBottomFC()\n    \n    ds <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(name = ifelse(WeekLinksBottom[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekLinksBottom[x,]$permalink, color = ifelse(WeekLinksBottom[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekLinksBottom[x,]$full_picture, share_text = WeekLinksBottom[x,]$sharetext, link_clicks = WeekLinksBottom[x,]$link_clicks, rank_link_clicks = WeekLinksBottom[x,]$rank_link_clicks, general_rank_link_clicks = WeekLinksBottom[x,]$general_rank_link_clicks, rank_reach = WeekLinksBottom[x,]$rank_reach, general_rank_reach = WeekLinksBottom[x,]$general_rank_reach,  rank_interactions = WeekLinksBottom[x,]$rank_interactions,  general_rank_interactions = WeekLinksBottom[x,]$general_rank_interactions, reach = WeekLinksBottom[x,]$post_reach, interactions = WeekLinksBottom[x,]$total_interactions, times_repo = ifelse(is.na(WeekLinksBottom[x,]$times_repost), 0, WeekLinksBottom[x,]$times_repost), post_category = WeekLinksBottom[x,]$category, y = ifelse(input$fc_article_select_plot_variable_bottom == \"Link Clicks\", WeekLinksBottom[x,]$link_clicks, ifelse(input$fc_article_select_plot_variable_bottom == \"Reach\", WeekLinksBottom[x,]$post_reach, WeekLinksBottom[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekLinksBottom$headline, WeekLinksBottom$link_clicks)\n    \n    input_plot_var <- input$fc_article_select_plot_variable_bottom\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Link Clicks : <b>' + this.point.link_clicks + '</b>  | Rank: <b>' + this.point.rank_link_clicks + '</b> | Gen. Rank: <b>' + this.point.general_rank_link_clicks + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n    \n  })\n  \n  output$FC_Plot4 <- renderHighchart({\n    \n    cols=c(\"steelblue3\",\"skyblue4\")\n    \n    WeekLinksBottom <- WeekLinksBottomFC()\n    \n    WeekLinksBottom$ctr <- as.numeric(format(WeekLinksBottom$ctr*100, digits= 2))\n    WeekLinksBottom$interaction_rate <- as.numeric(format(WeekLinksBottom$interaction_rate*100, digits = 2))\n    \n    ds_ctr <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$ctr, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_ir <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$interaction_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksBottom$headline, WeekLinksBottom$link_clicks)\n    \n    Plot_Article_Rates_Function(ds_ctr, ds_ir, input_categories)\n\n  })\n  \n  output$FC_Plot41 <- renderHighchart({\n    \n    WeekLinksBottom <- WeekLinksBottomFC()\n    \n    WeekLinksBottom$feed_likes_rate <- as.numeric(format(WeekLinksBottom$feed_likes_rate*100, digits= 4))\n    WeekLinksBottom$love_rate <- as.numeric(format(WeekLinksBottom$love_rate*100, digits = 2))\n    WeekLinksBottom$wow_rate <- as.numeric(format(WeekLinksBottom$wow_rate*100, digits = 2))\n    WeekLinksBottom$haha_rate <- as.numeric(format(WeekLinksBottom$haha_rate*100, digits = 2))\n    WeekLinksBottom$sad_rate <- as.numeric(format(WeekLinksBottom$sad_rate*100, digits = 2))\n    WeekLinksBottom$angry_rate <- as.numeric(format(WeekLinksBottom$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$feed_likes_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$love_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$wow_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$haha_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$sad_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$angry_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksBottom$headline, WeekLinksBottom$link_clicks)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$FC_Plot42 <- renderHighchart({\n    \n    WeekLinksBottom <- WeekLinksBottomFC()\n    \n    WeekLinksBottom$fan_rate <- as.numeric(format(WeekLinksBottom$fan_rate*100, digits = 4))\n    WeekLinksBottom$viral_rate <- as.numeric(format(WeekLinksBottom$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$fan_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekLinksBottom), function(x){\n      list(y = WeekLinksBottom[x,]$viral_rate, url = WeekLinksBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekLinksBottom$headline, WeekLinksBottom$link_clicks)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.3.2. Videos  --------------------------------------------------------------------------------------------------------\n  \n  # 4.3.2.1. Top ------------------------------------------------------------------------------------------------------------------------\n  \n  output$FC_Table3 = DT::renderDataTable({\n    \n    WeekVideosTop <- WeekVideosTopFC()\n    \n    WeekVideosTop$post_video_views <- format(WeekVideosTop$post_video_views, big.mark = \",\")\n    WeekVideosTop$post_reach <- format(WeekVideosTop$post_reach, big.mark = \",\")\n    WeekVideosTop$comment<- format(WeekVideosTop$comment, big.mark = \",\")\n    WeekVideosTop$like <- format(WeekVideosTop$like, big.mark = \",\")\n    WeekVideosTop$share <- format(WeekVideosTop$share, big.mark = \",\")\n    WeekVideosTop$sharetext <- paste0(\"<a href='\",WeekVideosTop$permalink,\"' target='_blank'>\",WeekVideosTop$sharetext,\"</a>\")\n    WeekVideosTop$ctr <- paste0(formatC(100 * WeekVideosTop$ctr, format = \"f\", digits = 2), \"%\")\n    WeekVideosTop$interaction_rate <- paste0(formatC(100 * WeekVideosTop$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekVideosTop[, input$fc_show_vars2, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$FC_Plot5_Title <- renderHighchart({\n    \n    DateRangeVideos <- DataVideosFC[which(DataVideosFC$date >= input$dateRange1[1] & DataVideosFC$date <= input$dateRange1[2] & DataVideosFC$video_meme == 0),]\n    \n    if(input$fc_video_select_original_repost_top == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$fc_video_select_original_repost_top == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$fc_video_select_categories_top),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    plot_subtitle <- paste(as.character(max(fc_number_video_top$n-4, 1)), \" - \", as.character(min(nrow(DateRangeVideos), fc_number_video_top$n)), \" of \", as.character(nrow(DateRangeVideos)))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$FC_Plot5 <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideosTopFC()\n    \n    ds <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(name = ifelse(WeekVideosTop[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekVideosTop[x,]$permalink, color = ifelse(WeekVideosTop[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekVideosTop[x,]$full_picture, share_text = WeekVideosTop[x,]$sharetext, video_views = WeekVideosTop[x,]$post_video_views, rank_video_views = WeekVideosTop[x,]$rank_video_views, general_rank_video_views = WeekVideosTop[x,]$general_rank_video_views, rank_reach = WeekVideosTop[x,]$rank_reach, general_rank_reach = WeekVideosTop[x,]$general_rank_reach,  rank_interactions = WeekVideosTop[x,]$rank_interactions,  general_rank_interactions = WeekVideosTop[x,]$general_rank_interactions, reach = WeekVideosTop[x,]$post_reach, interactions = WeekVideosTop[x,]$total_interactions, times_repo = ifelse(is.na(WeekVideosTop[x,]$times_repost), 0, WeekVideosTop[x,]$times_repost), post_category = WeekVideosTop[x,]$category, y = ifelse(input$fc_video_select_plot_variable_top == \"Video Views\", WeekVideosTop[x,]$post_video_views, ifelse(input$fc_video_select_plot_variable_top == \"Reach\", WeekVideosTop[x,]$post_reach, WeekVideosTop[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    input_plot_var <- input$fc_video_select_plot_variable_top\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Video Views : <b>' + this.point.video_views + '</b>  | Rank: <b>' + this.point.rank_video_views + '</b> | Gen. Rank: <b>' + this.point.general_rank_video_views + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n    \n  })\n  \n  output$FC_Plot52 <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideosTopFC()\n    \n    df <- WeekVideosTop[,c(4, grep(\"repost_order\", colnames(DataVideosFC)), grep(\"s0\", colnames(DataVideosFC)):grep(\"s40\", colnames(DataVideosFC)))]\n    df[duplicated(df$sharetext),]$sharetext <- paste(df[duplicated(df$sharetext),]$sharetext, df[duplicated(df$sharetext),]$repost_order)\n    df <- gather(df, \"seconds_viewed\", \"percentage_viewed\", 3:43)\n    df <- dlply(df,\"sharetext\", function (x){list(data = x$percentage_viewed, name = unique(x$sharetext))})\n    ds <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(data = df[[x]]$data, name = df[[x]]$name)\n    })\n    \n    Plot_Video_Drop_Off_Function(ds)\n\n  })\n  \n  \n  output$FC_Plot53 <- renderHighchart({\n    \n    cols=c(\"steelblue3\",\"skyblue4\")\n    \n    WeekVideosTop <- WeekVideosTopFC()\n    \n    WeekVideosTop$feed_likes_rate <- as.numeric(format(WeekVideosTop$feed_likes_rate*100, digits= 4))\n    WeekVideosTop$love_rate <- as.numeric(format(WeekVideosTop$love_rate*100, digits = 2))\n    WeekVideosTop$wow_rate <- as.numeric(format(WeekVideosTop$wow_rate*100, digits = 2))\n    WeekVideosTop$haha_rate <- as.numeric(format(WeekVideosTop$haha_rate*100, digits = 2))\n    WeekVideosTop$sad_rate <- as.numeric(format(WeekVideosTop$sad_rate*100, digits = 2))\n    WeekVideosTop$angry_rate <- as.numeric(format(WeekVideosTop$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$feed_likes_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$love_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$wow_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$haha_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$sad_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$angry_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$FC_Plot54 <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideosTopFC()\n    \n    WeekVideosTop$fan_rate <- as.numeric(format(WeekVideosTop$fan_rate*100, digits = 4))\n    WeekVideosTop$viral_rate <- as.numeric(format(WeekVideosTop$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$fan_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$viral_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  \n  # 4.3.2.2. Bottom ---------------------------------------------------------------------------------------------------------------------\n  \n  output$FC_Table4 = DT::renderDataTable({\n    \n    WeekVideosBottom <- WeekVideosBottomFC()\n    \n    WeekVideosBottom$post_video_views <- format(WeekVideosBottom$post_video_views, big.mark = \",\")\n    WeekVideosBottom$post_reach <- format(WeekVideosBottom$post_reach, big.mark = \",\")\n    WeekVideosBottom$comment<- format(WeekVideosBottom$comment, big.mark = \",\")\n    WeekVideosBottom$like <- format(WeekVideosBottom$like, big.mark = \",\")\n    WeekVideosBottom$share <- format(WeekVideosBottom$share, big.mark = \",\")\n    WeekVideosBottom$sharetext <- paste0(\"<a href='\",WeekVideosBottom$permalink,\"' target='_blank'>\",WeekVideosBottom$sharetext,\"</a>\")\n    \n    WeekVideosBottom$ctr <- paste0(formatC(100 * WeekVideosBottom$ctr, format = \"f\", digits = 2), \"%\")\n    WeekVideosBottom$interaction_rate <- paste0(formatC(100 * WeekVideosBottom$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekVideosBottom[, input$fc_show_vars5, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$FC_Plot6_Title <- renderHighchart({\n    \n    DateRangeVideos <- DataVideosFC[which(DataVideosFC$date >= input$dateRange1[1] & DataVideosFC$date <= input$dateRange1[2] & DataVideosFC$video_meme == 0),]\n    \n    if(input$fc_video_select_original_repost_bottom == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$fc_video_select_original_repost_bottom == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$fc_video_select_categories_bottom),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    \n    plot_subtitle <- paste(as.character(min(nrow(DateRangeVideos) + 5 - fc_number_video_bottom$n, nrow(DateRangeVideos))), \" - \", as.character(max(nrow(DateRangeVideos) - fc_number_video_bottom$n + 1, 1)), \" of \", nrow(DateRangeVideos))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$FC_Plot6 <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideosBottomFC()\n    \n    ds <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(name = ifelse(WeekVideosBottom[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekVideosBottom[x,]$permalink, color = ifelse(WeekVideosBottom[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekVideosBottom[x,]$full_picture, share_text = WeekVideosBottom[x,]$sharetext, video_views = WeekVideosBottom[x,]$post_video_views, rank_video_views = WeekVideosBottom[x,]$rank_video_views, general_rank_video_views = WeekVideosBottom[x,]$general_rank_video_views, rank_reach = WeekVideosBottom[x,]$rank_reach, general_rank_reach = WeekVideosBottom[x,]$general_rank_reach,  rank_interactions = WeekVideosBottom[x,]$rank_interactions,  general_rank_interactions = WeekVideosBottom[x,]$general_rank_interactions, reach = WeekVideosBottom[x,]$post_reach, interactions = WeekVideosBottom[x,]$total_interactions, times_repo = ifelse(is.na(WeekVideosBottom[x,]$times_repost), 0, WeekVideosBottom[x,]$times_repost), post_category = WeekVideosBottom[x,]$category, y = ifelse(input$fc_video_select_plot_variable_bottom == \"Video Views\", WeekVideosBottom[x,]$post_video_views, ifelse(input$fc_video_select_plot_variable_bottom == \"Reach\", WeekVideosBottom[x,]$post_reach, WeekVideosBottom[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    input_plot_var <- input$fc_video_select_plot_variable_bottom\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Video Views : <b>' + this.point.video_views + '</b>  | Rank: <b>' + this.point.rank_video_views + '</b> | Gen. Rank: <b>' + this.point.general_rank_video_views + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n    \n  })\n  \n  output$FC_Plot62 <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideosBottomFC()\n    \n    df <- WeekVideosBottom[,c(4, grep(\"repost_order\", colnames(DataVideosFC)), grep(\"s0\", colnames(DataVideosFC)):grep(\"s40\", colnames(DataVideosFC)))]\n    df[duplicated(df$sharetext),]$sharetext <- paste(df[duplicated(df$sharetext),]$sharetext, df[duplicated(df$sharetext),]$repost_order)\n    df <- gather(df, \"seconds_viewed\", \"percentage_viewed\", 3:43)\n    df <- dlply(df,\"sharetext\", function (x){list(data = x$percentage_viewed, name = unique(x$sharetext))})\n    ds <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(data = df[[x]]$data, name = df[[x]]$name)\n    })\n    \n    Plot_Video_Drop_Off_Function(ds)\n\n  })\n  \n  output$FC_Plot63 <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideosBottomFC()\n    \n    WeekVideosBottom$feed_likes_rate <- as.numeric(format(WeekVideosBottom$feed_likes_rate*100, digits= 4))\n    WeekVideosBottom$love_rate <- as.numeric(format(WeekVideosBottom$love_rate*100, digits = 2))\n    WeekVideosBottom$wow_rate <- as.numeric(format(WeekVideosBottom$wow_rate*100, digits = 2))\n    WeekVideosBottom$haha_rate <- as.numeric(format(WeekVideosBottom$haha_rate*100, digits = 2))\n    WeekVideosBottom$sad_rate <- as.numeric(format(WeekVideosBottom$sad_rate*100, digits = 2))\n    WeekVideosBottom$angry_rate <- as.numeric(format(WeekVideosBottom$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$feed_likes_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$love_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$wow_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$haha_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$sad_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$angry_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$FC_Plot64 <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideosBottomFC()\n    \n    WeekVideosBottom$fan_rate <- as.numeric(format(WeekVideosBottom$fan_rate*100, digits = 4))\n    WeekVideosBottom$viral_rate <- as.numeric(format(WeekVideosBottom$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$fan_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$viral_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.3.3. Video Memes ----------------------------------------------------------------------------------------------------\n  \n  # 4.3.3.1. Top ------------------------------------------------------------------------------------------------------------------------\n  \n  output$FC_Table3b = DT::renderDataTable({\n    \n    WeekVideosTop <- WeekVideoMemesTopFC()\n    \n    WeekVideosTop$post_video_views <- format(WeekVideosTop$post_video_views, big.mark = \",\")\n    WeekVideosTop$post_reach <- format(WeekVideosTop$post_reach, big.mark = \",\")\n    WeekVideosTop$comment<- format(WeekVideosTop$comment, big.mark = \",\")\n    WeekVideosTop$like <- format(WeekVideosTop$like, big.mark = \",\")\n    WeekVideosTop$share <- format(WeekVideosTop$share, big.mark = \",\")\n    WeekVideosTop$sharetext <- paste0(\"<a href='\",WeekVideosTop$permalink,\"' target='_blank'>\",WeekVideosTop$sharetext,\"</a>\")\n    \n    WeekVideosTop$ctr <- paste0(formatC(100 * WeekVideosTop$ctr, format = \"f\", digits = 2), \"%\")\n    WeekVideosTop$interaction_rate <- paste0(formatC(100 * WeekVideosTop$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekVideosTop[, input$fc_show_vars2b, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$FC_Plot5b_Title <- renderHighchart({\n    \n    DateRangeVideos <- DataVideosFC[which(DataVideosFC$date >= input$dateRange1[1] & DataVideosFC$date <= input$dateRange1[2] & DataVideosFC$video_meme == 1),]\n    \n    if(input$fc_video_meme_select_original_repost_top == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$fc_video_meme_select_original_repost_top == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$fc_video_meme_select_categories_top),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    plot_subtitle <- paste(as.character(max(fc_number_video_meme_top$n-4, 1)), \" - \", as.character(min(nrow(DateRangeVideos), fc_number_video_meme_top$n)), \" of \", as.character(nrow(DateRangeVideos)))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$FC_Plot5b <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideoMemesTopFC()\n    \n    ds <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(name = ifelse(WeekVideosTop[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekVideosTop[x,]$permalink, color = ifelse(WeekVideosTop[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekVideosTop[x,]$full_picture, share_text = WeekVideosTop[x,]$sharetext, video_views = WeekVideosTop[x,]$post_video_views, rank_video_views = WeekVideosTop[x,]$rank_video_views, general_rank_video_views = WeekVideosTop[x,]$general_rank_video_views, rank_reach = WeekVideosTop[x,]$rank_reach, general_rank_reach = WeekVideosTop[x,]$general_rank_reach,  rank_interactions = WeekVideosTop[x,]$rank_interactions,  general_rank_interactions = WeekVideosTop[x,]$general_rank_interactions, reach = WeekVideosTop[x,]$post_reach, interactions = WeekVideosTop[x,]$total_interactions, times_repo = ifelse(is.na(WeekVideosTop[x,]$times_repost), 0, WeekVideosTop[x,]$times_repost), post_category = WeekVideosTop[x,]$category, y = ifelse(input$fc_video_meme_select_plot_variable_top == \"Video Views\", WeekVideosTop[x,]$post_video_views, ifelse(input$fc_video_meme_select_plot_variable_top == \"Reach\", WeekVideosTop[x,]$post_reach, WeekVideosTop[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    input_plot_var <- input$fc_video_meme_select_plot_variable_top\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Video Views : <b>' + this.point.video_views + '</b>  | Rank: <b>' + this.point.rank_video_views + '</b> | Gen. Rank: <b>' + this.point.general_rank_video_views + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n \n  })\n  \n  output$FC_Plot52b <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideoMemesTopFC()\n    \n    df <- WeekVideosTop[,c(4, grep(\"repost_order\", colnames(DataVideosFC)), grep(\"s0\", colnames(DataVideosFC)):grep(\"s40\", colnames(DataVideosFC)))]\n    df[duplicated(df$sharetext),]$sharetext <- paste(df[duplicated(df$sharetext),]$sharetext, df[duplicated(df$sharetext),]$repost_order)\n    df <- gather(df, \"seconds_viewed\", \"percentage_viewed\", 3:43)\n    df <- dlply(df,\"sharetext\", function (x){list(data = x$percentage_viewed, name = unique(x$sharetext))})\n    ds <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(data = df[[x]]$data, name = df[[x]]$name)\n    })\n    \n    Plot_Video_Drop_Off_Function(ds)\n   \n  })\n  \n  output$FC_Plot53b <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideoMemesTopFC()\n    \n    WeekVideosTop$feed_likes_rate <- as.numeric(format(WeekVideosTop$feed_likes_rate*100, digits= 4))\n    WeekVideosTop$love_rate <- as.numeric(format(WeekVideosTop$love_rate*100, digits = 2))\n    WeekVideosTop$wow_rate <- as.numeric(format(WeekVideosTop$wow_rate*100, digits = 2))\n    WeekVideosTop$haha_rate <- as.numeric(format(WeekVideosTop$haha_rate*100, digits = 2))\n    WeekVideosTop$sad_rate <- as.numeric(format(WeekVideosTop$sad_rate*100, digits = 2))\n    WeekVideosTop$angry_rate <- as.numeric(format(WeekVideosTop$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$feed_likes_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$love_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$wow_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$haha_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$sad_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$angry_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$FC_Plot54b <- renderHighchart({\n    \n    WeekVideosTop <- WeekVideoMemesTopFC()\n    \n    WeekVideosTop$fan_rate <- as.numeric(format(WeekVideosTop$fan_rate*100, digits = 4))\n    WeekVideosTop$viral_rate <- as.numeric(format(WeekVideosTop$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$fan_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekVideosTop), function(x){\n      list(y = WeekVideosTop[x,]$viral_rate, url = WeekVideosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosTop$sharetext, WeekVideosTop$post_video_views)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.3.3.2. Bottom ---------------------------------------------------------------------------------------------------------------------\n  \n  output$FC_Table4b = DT::renderDataTable({\n    \n    WeekVideosBottom <- WeekVideoMemesBottomFC()\n    \n    WeekVideosBottom$post_video_views <- format(WeekVideosBottom$post_video_views, big.mark = \",\")\n    WeekVideosBottom$post_reach <- format(WeekVideosBottom$post_reach, big.mark = \",\")\n    WeekVideosBottom$comment<- format(WeekVideosBottom$comment, big.mark = \",\")\n    WeekVideosBottom$like <- format(WeekVideosBottom$like, big.mark = \",\")\n    WeekVideosBottom$share <- format(WeekVideosBottom$share, big.mark = \",\")\n    WeekVideosBottom$sharetext <- paste0(\"<a href='\",WeekVideosBottom$permalink,\"' target='_blank'>\",WeekVideosBottom$sharetext,\"</a>\")\n    \n    WeekVideosBottom$ctr <- paste0(formatC(100 * WeekVideosBottom$ctr, format = \"f\", digits = 2), \"%\")\n    WeekVideosBottom$interaction_rate <- paste0(formatC(100 * WeekVideosBottom$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekVideosBottom[, input$fc_show_vars5b, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6))), dom = \"ft\"))\n  \n  output$FC_Plot6b_Title <- renderHighchart({\n    \n    DateRangeVideos <- DataVideosFC[which(DataVideosFC$date >= input$dateRange1[1] & DataVideosFC$date <= input$dateRange1[2] & DataVideosFC$video_meme == 1),]\n    \n    if(input$fc_video_meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 1),]\n    }\n    \n    else if (input$fc_video_meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$original == 0),]\n    }\n    \n    DateRangeVideos <- DateRangeVideos[which(DateRangeVideos$category %in% input$fc_video_meme_select_categories_bottom),]\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    \n    plot_subtitle <- paste(as.character(min(nrow(DateRangeVideos) + 5 - fc_number_video_meme_bottom$n, nrow(DateRangeVideos))), \" - \", as.character(max(nrow(DateRangeVideos) - fc_number_video_meme_bottom$n + 1, 1)), \" of \", nrow(DateRangeVideos))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$FC_Plot6b <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideoMemesBottomFC()\n    \n    ds <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(name = ifelse(WeekVideosBottom[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekVideosBottom[x,]$permalink, color = ifelse(WeekVideosBottom[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekVideosBottom[x,]$full_picture, share_text = WeekVideosBottom[x,]$sharetext, video_views = WeekVideosBottom[x,]$post_video_views, rank_video_views = WeekVideosBottom[x,]$rank_video_views, general_rank_video_views = WeekVideosBottom[x,]$general_rank_video_views, rank_reach = WeekVideosBottom[x,]$rank_reach, general_rank_reach = WeekVideosBottom[x,]$general_rank_reach,  rank_interactions = WeekVideosBottom[x,]$rank_interactions,  general_rank_interactions = WeekVideosBottom[x,]$general_rank_interactions, reach = WeekVideosBottom[x,]$post_reach, interactions = WeekVideosBottom[x,]$total_interactions, times_repo = ifelse(is.na(WeekVideosBottom[x,]$times_repost), 0, WeekVideosBottom[x,]$times_repost), post_category = WeekVideosBottom[x,]$category, y = ifelse(input$fc_video_meme_select_plot_variable_bottom == \"Video Views\", WeekVideosBottom[x,]$post_video_views, ifelse(input$fc_video_meme_select_plot_variable_bottom == \"Reach\", WeekVideosBottom[x,]$post_reach, WeekVideosBottom[x,]$total_interactions)))\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    input_plot_var <- input$fc_video_meme_select_plot_variable_bottom\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Category: <b>' + this.point.post_category + '</b>' + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Video Views : <b>' + this.point.video_views + '</b>  | Rank: <b>' + this.point.rank_video_views + '</b> | Gen. Rank: <b>' + this.point.general_rank_video_views + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n   \n  })\n  \n  output$FC_Plot62b <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideoMemesBottomFC()\n    \n    df <- WeekVideosBottom[,c(4, grep(\"repost_order\", colnames(DataVideosFC)), grep(\"s0\", colnames(DataVideosFC)):grep(\"s40\", colnames(DataVideosFC)))]\n    df[duplicated(df$sharetext),]$sharetext <- paste(df[duplicated(df$sharetext),]$sharetext, df[duplicated(df$sharetext),]$repost_order)\n    df <- gather(df, \"seconds_viewed\", \"percentage_viewed\", 3:43)\n    df <- dlply(df,\"sharetext\", function (x){list(data = x$percentage_viewed, name = unique(x$sharetext))})\n    ds <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(data = df[[x]]$data, name = df[[x]]$name)\n    })\n    \n    Plot_Video_Drop_Off_Function(ds)\n    \n  })\n  \n  output$FC_Plot63b <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideoMemesBottomFC()\n    \n    WeekVideosBottom$feed_likes_rate <- as.numeric(format(WeekVideosBottom$feed_likes_rate*100, digits= 4))\n    WeekVideosBottom$love_rate <- as.numeric(format(WeekVideosBottom$love_rate*100, digits = 2))\n    WeekVideosBottom$wow_rate <- as.numeric(format(WeekVideosBottom$wow_rate*100, digits = 2))\n    WeekVideosBottom$haha_rate <- as.numeric(format(WeekVideosBottom$haha_rate*100, digits = 2))\n    WeekVideosBottom$sad_rate <- as.numeric(format(WeekVideosBottom$sad_rate*100, digits = 2))\n    WeekVideosBottom$angry_rate <- as.numeric(format(WeekVideosBottom$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$feed_likes_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$love_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$wow_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$haha_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$sad_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$angry_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$FC_Plot64b <- renderHighchart({\n    \n    WeekVideosBottom <- WeekVideoMemesBottomFC()\n    \n    WeekVideosBottom$fan_rate <- as.numeric(format(WeekVideosBottom$fan_rate*100, digits = 4))\n    WeekVideosBottom$viral_rate <- as.numeric(format(WeekVideosBottom$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$fan_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekVideosBottom), function(x){\n      list(y = WeekVideosBottom[x,]$viral_rate, url = WeekVideosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekVideosBottom$sharetext, WeekVideosBottom$post_video_views)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  # 4.3.4. Memes ----------------------------------------------------------------------------------------------------------\n  \n  # 4.3.4.1. Top ------------------------------------------------------------------------------------------------------------------------\n  \n  output$FC_Table5 = DT::renderDataTable({\n    \n    WeekPhotosTop <- WeekPhotoTopFC()\n    \n    WeekPhotosTop$post_reach <- format(WeekPhotosTop$post_reach, big.mark = \",\")\n    WeekPhotosTop$comment<- format(WeekPhotosTop$comment, big.mark = \",\")\n    WeekPhotosTop$like <- format(WeekPhotosTop$like, big.mark = \",\")\n    WeekPhotosTop$share <- format(WeekPhotosTop$share, big.mark = \",\")\n    WeekPhotosTop$sharetext <- paste0(\"<a href='\",WeekPhotosTop$permalink,\"' target='_blank'>\",WeekPhotosTop$sharetext,\"</a>\")\n    \n    WeekPhotosTop$ctr <- paste0(formatC(100 * WeekPhotosTop$ctr, format = \"f\", digits = 2), \"%\")\n    WeekPhotosTop$interaction_rate <- paste0(formatC(100 * WeekPhotosTop$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekPhotosTop[, input$fc_show_vars3, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:5))), dom = \"ft\"))\n  \n  output$FC_Plot7_Title <- renderHighchart({\n    \n    DateRangeMemes <- DataPhotosFC[which(DataPhotosFC$date >= input$dateRange1[1] & DataPhotosFC$date <= input$dateRange1[2]),]\n    \n    if(input$fc_meme_select_original_repost_top == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$fc_meme_select_original_repost_top == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    plot_subtitle <- paste(as.character(max(fc_number_meme_top$n-9, 1)), \" - \", as.character(min(nrow(DateRangeMemes), fc_number_meme_top$n)), \" of \", as.character(nrow(DateRangeMemes)))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$FC_Plot7 <- renderHighchart({\n    \n    WeekPhotosTop <- WeekPhotoTopFC()\n    \n    ds <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(name = ifelse(WeekPhotosTop[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekPhotosTop[x,]$permalink, color = ifelse(WeekPhotosTop[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekPhotosTop[x,]$full_picture, share_text = WeekPhotosTop[x,]$sharetext, rank_reach = WeekPhotosTop[x,]$rank_reach, general_rank_reach = WeekPhotosTop[x,]$general_rank_reach,  rank_interactions = WeekPhotosTop[x,]$rank_interactions,  general_rank_interactions = WeekPhotosTop[x,]$general_rank_interactions, reach = WeekPhotosTop[x,]$post_reach, interactions = WeekPhotosTop[x,]$total_interactions, times_repo = ifelse(is.na(WeekPhotosTop[x,]$times_repost), 0, WeekPhotosTop[x,]$times_repost), y = ifelse(input$fc_meme_select_plot_variable_top == \"Reach\", WeekPhotosTop[x,]$post_reach, WeekPhotosTop[x,]$total_interactions))\n    })\n    \n    input_categories <- reorder(WeekPhotosTop$sharetext, WeekPhotosTop$post_reach)\n    \n    input_plot_var <- input$fc_meme_select_plot_variable_top\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n \n  })\n  \n  output$FC_Plot71 <- renderHighchart({\n    \n    WeekPhotosTop <- WeekPhotoTopFC()\n    \n    WeekPhotosTop$feed_likes_rate <- as.numeric(format(WeekPhotosTop$feed_likes_rate*100, digits= 4))\n    WeekPhotosTop$love_rate <- as.numeric(format(WeekPhotosTop$love_rate*100, digits = 2))\n    WeekPhotosTop$wow_rate <- as.numeric(format(WeekPhotosTop$wow_rate*100, digits = 2))\n    WeekPhotosTop$haha_rate <- as.numeric(format(WeekPhotosTop$haha_rate*100, digits = 2))\n    WeekPhotosTop$sad_rate <- as.numeric(format(WeekPhotosTop$sad_rate*100, digits = 2))\n    WeekPhotosTop$angry_rate <- as.numeric(format(WeekPhotosTop$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$feed_likes_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$love_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$wow_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$haha_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$sad_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$angry_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekPhotosTop$sharetext, WeekPhotosTop$post_reach)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$FC_Plot72 <- renderHighchart({\n    \n    WeekPhotosTop <- WeekPhotoTopFC()\n    \n    WeekPhotosTop$fan_rate <- as.numeric(format(WeekPhotosTop$fan_rate*100, digits = 4))\n    WeekPhotosTop$viral_rate <- as.numeric(format(WeekPhotosTop$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$fan_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekPhotosTop), function(x){\n      list(y = WeekPhotosTop[x,]$viral_rate, url = WeekPhotosTop[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekPhotosTop$sharetext, WeekPhotosTop$post_reach)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  # 4.3.4.2. Bottom ---------------------------------------------------------------------------------------------------------------------\n  \n  output$FC_Table6 = DT::renderDataTable({\n    \n    WeekPhotosBottom <- WeekPhotoBottomFC()\n    \n    WeekPhotosBottom$post_reach <- format(WeekPhotosBottom$post_reach, big.mark = \",\")\n    WeekPhotosBottom$comment<- format(WeekPhotosBottom$comment, big.mark = \",\")\n    WeekPhotosBottom$like <- format(WeekPhotosBottom$like, big.mark = \",\")\n    WeekPhotosBottom$share <- format(WeekPhotosBottom$share, big.mark = \",\")\n    WeekPhotosBottom$sharetext <- paste0(\"<a href='\",WeekPhotosBottom$permalink,\"' target='_blank'>\",WeekPhotosBottom$sharetext,\"</a>\")\n    \n    WeekPhotosBottom$ctr <- paste0(formatC(100 * WeekPhotosBottom$ctr, format = \"f\", digits = 2), \"%\")\n    WeekPhotosBottom$interaction_rate <- paste0(formatC(100 * WeekPhotosBottom$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekPhotosBottom[, input$fc_show_vars6, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:5))), dom = \"ft\"))\n  \n  output$FC_Plot8_Title <- renderHighchart({\n    \n    DateRangeMemes <- DataPhotosFC[which(DataPhotosFC$date >= input$dateRange1[1] & DataPhotosFC$date <= input$dateRange1[2]),]\n    \n    if(input$fc_meme_select_original_repost_bottom == \"Originals\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 1),]\n    }\n    \n    else if (input$fc_meme_select_original_repost_bottom == \"Reposts\"){\n      DateRangeMemes <- DateRangeMemes[which(DateRangeMemes$original == 0),]\n    }\n    \n    plot_title <- paste(\"From \", as.character(format(as.Date(input$dateRange1[1])), \"%b%d\"), \" to \", as.character(input$dateRange1[2]))\n    \n    plot_subtitle <- paste(as.character(min(nrow(DateRangeMemes) + 10 - fc_number_meme_bottom$n, nrow(DateRangeMemes))), \" - \", as.character(max(nrow(DateRangeMemes) - fc_number_meme_bottom$n + 1, 1)), \" of \", nrow(DateRangeMemes))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 450) %>%\n      hc_title(text = plot_title, align = \"center\") %>%\n      hc_subtitle(text = plot_subtitle, align = \"center\")  %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$FC_Plot8 <- renderHighchart({\n    \n    WeekPhotosBottom <- WeekPhotoBottomFC() \n    \n    ds <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(name = ifelse(WeekPhotosBottom[x,]$repost == 1, \"Repost\", \"Original\"), url = WeekPhotosBottom[x,]$permalink, color = ifelse(WeekPhotosBottom[x,]$repost == 1, \"#2580B9\", \"#D55200\"), photo_url = WeekPhotosBottom[x,]$full_picture, share_text = WeekPhotosBottom[x,]$sharetext, rank_reach = WeekPhotosBottom[x,]$rank_reach, general_rank_reach = WeekPhotosBottom[x,]$general_rank_reach,  rank_interactions = WeekPhotosBottom[x,]$rank_interactions,  general_rank_interactions = WeekPhotosBottom[x,]$general_rank_interactions, reach = WeekPhotosBottom[x,]$post_reach, interactions = WeekPhotosBottom[x,]$total_interactions, times_repo = ifelse(is.na(WeekPhotosBottom[x,]$times_repost), 0, WeekPhotosBottom[x,]$times_repost), y = ifelse(input$fc_meme_select_plot_variable_bottom == \"Reach\", WeekPhotosBottom[x,]$post_reach, WeekPhotosBottom[x,]$total_interactions))\n    })\n    \n    input_categories <- reorder(WeekPhotosBottom$sharetext, WeekPhotosBottom$post_reach)\n    \n    input_plot_var <- input$fc_meme_select_plot_variable_bottom\n    \n    fntltp <- JS(paste(\"function(){\n                       return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n                       \"}\"))\n    \n    Plot_Top_Bottom_Function(ds, input_categories, input_plot_var, fntltp)\n  \n  })\n  \n  output$FC_Plot81 <- renderHighchart({\n    \n    WeekPhotosBottom <- WeekPhotoBottomFC() \n    \n    WeekPhotosBottom$feed_likes_rate <- as.numeric(format(WeekPhotosBottom$feed_likes_rate*100, digits= 4))\n    WeekPhotosBottom$love_rate <- as.numeric(format(WeekPhotosBottom$love_rate*100, digits = 2))\n    WeekPhotosBottom$wow_rate <- as.numeric(format(WeekPhotosBottom$wow_rate*100, digits = 2))\n    WeekPhotosBottom$haha_rate <- as.numeric(format(WeekPhotosBottom$haha_rate*100, digits = 2))\n    WeekPhotosBottom$sad_rate <- as.numeric(format(WeekPhotosBottom$sad_rate*100, digits = 2))\n    WeekPhotosBottom$angry_rate <- as.numeric(format(WeekPhotosBottom$angry_rate*100, digits = 2))\n    \n    ds_feed_likes_rate <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$feed_likes_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_love <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$love_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_wow <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$wow_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_haha <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$haha_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_sad <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$sad_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_angry <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$angry_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekPhotosBottom$sharetext, WeekPhotosBottom$post_reach)\n    \n    Plot_Article_Reaction_Rates_Function(ds_feed_likes_rate, ds_love, ds_wow, ds_haha, ds_sad, ds_angry, input_categories)\n    \n  })\n  \n  output$FC_Plot82 <- renderHighchart({\n    \n    WeekPhotosBottom <- WeekPhotoBottomFC() \n    \n    WeekPhotosBottom$fan_rate <- as.numeric(format(WeekPhotosBottom$fan_rate*100, digits = 4))\n    WeekPhotosBottom$viral_rate <- as.numeric(format(WeekPhotosBottom$viral_rate*100, digits = 4))\n    \n    ds_fan <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$fan_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    ds_viral <- lapply(1:nrow(WeekPhotosBottom), function(x){\n      list(y = WeekPhotosBottom[x,]$viral_rate, url = WeekPhotosBottom[x,]$permalink)\n    })\n    \n    input_categories <- reorder(WeekPhotosBottom$sharetext, WeekPhotosBottom$post_reach)\n    \n    Plot_Fan_Viral_Function(ds_fan, ds_viral, input_categories)\n    \n  })\n  \n  #----------------------------------------------------------------------------------------------------------------------\n  \n  \n  # 5. Authors Performance ---------------------------------------------------------------------------------------------------------\n  \n  # 5.1 Authors Performance - We Are MitÃº ---------------------------------------------------------------------------------------------------------\n  \n  # 5.1.1. Week -----------------------------------------------------------------------------------------------------------------------\n  \n  output$PlotAuthors1 <- renderHighchart({\n    \n    AuthorsWeek <- AuthorsWeek[1:20,]\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_plotOptions(column = list(borderColor = \"black\")) %>% \n      hc_xAxis(categories = reorder(AuthorsWeek$Author, AuthorsWeek$Visitors)) %>% \n      hc_yAxis(title = list(text = \"Visitors\"))%>% \n      hc_add_series(data = c(AuthorsWeek$Visitors), name = \"Visitors\")%>% \n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = FALSE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  # 5.1.2. Month ----------------------------------------------------------------------------------------------------------------------\n  \n  output$PlotAuthors2 <- renderHighchart({\n    \n    AuthorsMonth <- AuthorsMonth[1:20,]\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_plotOptions(column = list(borderColor = \"black\")) %>% \n      hc_xAxis(categories = reorder(AuthorsMonth$Author, AuthorsMonth$Visitors)) %>% \n      hc_yAxis(title = list(text = \"Visitors\"))%>% \n      hc_add_series(data = c(AuthorsMonth$Visitors), name = \"Visitors\")%>% \n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = FALSE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  #----------------------------------------------------------------------------------------------------------------------\n  \n  \n  # 6. Categories ----------------------------------------------------------------------------------------------------------\n  \n  # 6.1. Categories - We Are MitÃº ---------------------------------------------------------------------------------------------------------\n  \n  \n  # 6.1.1. Articles \n  # 6.1.1.1. Overview --------------------------------------------------------------------------------------------------------\n  \n  output$PlotCategoriesOverview1 <- renderHighchart({\n    \n    input$plot_categories\n    isolate({    \n     \n      dates <- data.frame(created_time = DataArticles$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      \n      animals <- merge(dates, DataArticles[which(DataArticles$category == \"Animals\"), c(\"created_time\",\"link_clicks\")], by = \"created_time\", all = TRUE)\n      animals <- as.xts(animals[,\"link_clicks\"], order.by = animals[,\"created_time\"])\n      \n      beauty <- merge(dates, DataArticles[which(DataArticles$category == \"Beauty & Fashion\"), c(\"created_time\",\"link_clicks\")], by = \"created_time\", all = TRUE)\n      beauty <- as.xts(beauty[,\"link_clicks\"], order.by = beauty[,\"created_time\"])\n      \n      celeb <- merge(dates, DataArticles[which(DataArticles$category == \"Celebrity & Gossip\"), c(\"created_time\",\"link_clicks\")], by = \"created_time\", all = TRUE)\n      celeb <- as.xts(celeb[,\"link_clicks\"], order.by = celeb[,\"created_time\"])\n\n      citizen <- merge(dates, DataArticles[which(DataArticles$category == \"Citizenship & Politics\"), c(\"created_time\",\"link_clicks\")], by = \"created_time\", all = TRUE)\n      citizen <- as.xts(citizen[,\"link_clicks\"], order.by = citizen[,\"created_time\"])\n      \n      family <- merge(dates, DataArticles[which(DataArticles$category == \"Family & Friends\"), c(\"created_time\",\"link_clicks\")], by = \"created_time\", all = TRUE)\n      family <- as.xts(family[,\"link_clicks\"], order.by = family[,\"created_time\"])\n\n      food <- merge(dates, DataArticles[which(DataArticles$category == \"Food & Beverages\"), c(\"created_time\",\"link_clicks\")], by = \"created_time\", all = TRUE)\n      food <- as.xts(food[,\"link_clicks\"], order.by = food[,\"created_time\"])\n      \n      identities <- merge(dates, DataArticles[which(DataArticles$category == \"Identities\"), c(\"created_time\",\"link_clicks\")], by = \"created_time\", all = TRUE)\n      identities <- as.xts(identities[,\"link_clicks\"], order.by = identities[,\"created_time\"])\n\n      latino <- merge(dates, DataArticles[which(DataArticles$category == \"Latino Culture\"), c(\"created_time\",\"link_clicks\")], by = \"created_time\", all = TRUE)\n      latino <- as.xts(latino[,\"link_clicks\"], order.by = latino[,\"created_time\"])\n      \n      music <- merge(dates, DataArticles[which(DataArticles$category == \"Music\"), c(\"created_time\",\"link_clicks\")], by = \"created_time\", all = TRUE)\n      music <- as.xts(music[,\"link_clicks\"], order.by = music[,\"created_time\"])\n      \n      news <- merge(dates, DataArticles[which(DataArticles$category == \"News & Issues\"), c(\"created_time\",\"link_clicks\")], by = \"created_time\", all = TRUE)\n      news <- as.xts(news[,\"link_clicks\"], order.by = news[,\"created_time\"])\n      \n      sensat <- merge(dates, DataArticles[which(DataArticles$category == \"Sensationalist\"), c(\"created_time\",\"link_clicks\")], by = \"created_time\", all = TRUE)\n      sensat <- as.xts(sensat[,\"link_clicks\"], order.by = sensat[,\"created_time\"])\n      \n      sex <- merge(dates, DataArticles[which(DataArticles$category == \"Sex & Relationships\"), c(\"created_time\",\"link_clicks\")], by = \"created_time\", all = TRUE)\n      sex <- as.xts(sex[,\"link_clicks\"], order.by = sex[,\"created_time\"])\n      \n      sports <- merge(dates, DataArticles[which(DataArticles$category == \"Sports\"), c(\"created_time\",\"link_clicks\")], by = \"created_time\", all = TRUE)\n      sports <- as.xts(sports[,\"link_clicks\"], order.by = sports[,\"created_time\"])\n      \n      tv <- merge(dates, DataArticles[which(DataArticles$category == \"TV & Movies\"), c(\"created_time\",\"link_clicks\")], by = \"created_time\", all = TRUE)\n      tv <- as.xts(tv[,\"link_clicks\"], order.by = tv[,\"created_time\"])\n      \n      colores<- c('#B2182B','#D73027','#F46D43','#FDAE61','#FEE090','#FFFFD9','#EDF8B1','#C7E9B4','#7FCDBB','#41B6C4','#1D91C0','#225EA8','#253494','#081D58')\n      \n      hc <-highchart(type = \"stock\") %>%\n        \n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Link Clicks\")) %>% \n        hc_add_series(animals, name = \"Animals\", type = input$chart_type, visible = ifelse(\"Animals\" %in% input$category_buttons, TRUE, FALSE)) %>%\n        hc_add_series(beauty, name = \"Beauty & Fashion\", type = input$chart_type, visible = ifelse(\"Beauty & Fashion\" %in% input$category_buttons, TRUE, FALSE)) %>%\n        hc_add_series(celeb, name = \"Celebrity & Gossip\", type = input$chart_type, visible = ifelse(\"Celebrity & Gossip\" %in% input$category_buttons, TRUE, FALSE)) %>%\n        hc_add_series(citizen, name = \"Citizenship & Politics\", type = input$chart_type, visible = ifelse(\"Citizenship & Politics\" %in% input$category_buttons, TRUE, FALSE)) %>%\n        hc_add_series(family, name = \"Family & Friends\", type = input$chart_type, visible = ifelse(\"Family & Friends\" %in% input$category_buttons, TRUE, FALSE)) %>%\n        hc_add_series(food, name = \"Food & Beverages\", type = input$chart_type, visible = ifelse(\"Food & Beverages\" %in% input$category_buttons, TRUE, FALSE)) %>%\n        hc_add_series(identities, name = \"Identities\", type = input$chart_type, visible = ifelse(\"Identities\" %in% input$category_buttons, TRUE, FALSE)) %>%\n        hc_add_series(latino, name = \"Latino Culture\", type = input$chart_type, visible = ifelse(\"Latino Culture\" %in% input$category_buttons, TRUE, FALSE)) %>%\n        hc_add_series(music, name = \"Music\", type = input$chart_type, visible = ifelse(\"Music\" %in% input$category_buttons, TRUE, FALSE)) %>%\n        hc_add_series(news, name = \"News & Issues\", type = input$chart_type, visible = ifelse(\"News & Issues\" %in% input$category_buttons, TRUE, FALSE)) %>%\n        hc_add_series(sensat, name = \"Sensationalist\", type = input$chart_type, visible = ifelse(\"Sensationalist\" %in% input$category_buttons, TRUE, FALSE)) %>%\n        hc_add_series(sex, name = \"Sex & Relationships\", type = input$chart_type, visible = ifelse(\"Sex & Relationships\" %in% input$category_buttons, TRUE, FALSE)) %>%\n        hc_add_series(sports, name = \"Sports\", type = input$chart_type, visible = ifelse(\"Sports\" %in% input$category_buttons, TRUE, FALSE)) %>%\n        hc_add_series(tv, name = \"TV & Movies\", type = input$chart_type, visible = ifelse(\"TV & Movies\" %in% input$category_buttons, TRUE, FALSE)) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time == \"day\", 0, 3)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type == \"area\" || input$chart_type == \"column\"){if(input$chart_stack != \"none\"){input$chart_stack}}, dataGrouping = list(approximation = input$chart_avg_total, enabled = TRUE, forced = TRUE, units = list(list(input$chart_time, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  output$PlotCategoriesOverview2 <- renderHighchart({\n    \n    input$plot_categories2\n    isolate({    \n      AvgDaily <- ddply(DataArticles, c(\"category\", \"date\"), summarise, AvgDailyLinkClicks = sum(na.omit(post_reach)))\n      \n      dates <- data.frame(date = unique(DataArticles$date))\n      dates$date <- as.Date(dates$date)\n      \n      animals <- merge(dates, AvgDaily[which(AvgDaily$category == \"Animals\"),], by = \"date\", all = TRUE) \n      animals$category <- NULL\n      row.names(animals) <- animals$date\n      animals$date <- NULL\n      animals <- as.xts(animals) \n      \n      beauty <- merge(dates, AvgDaily[which(AvgDaily$category == \"Beauty & Fashion\"),], by = \"date\", all = TRUE)                  \n      beauty$category <- NULL\n      row.names(beauty) <- beauty$date\n      beauty$date <- NULL              \n      beauty <- as.xts(beauty)   \n      \n      celeb <- merge(dates, AvgDaily[which(AvgDaily$category == \"Celebrity & Gossip\"),], by = \"date\", all = TRUE)                  \n      celeb$category <- NULL\n      row.names(celeb) <- celeb$date\n      celeb$date <- NULL               \n      celeb <- as.xts(celeb)   \n      \n      citizen <- merge(dates, AvgDaily[which(AvgDaily$category == \"Citizenship & Politics\"),], by = \"date\", all = TRUE)               \n      citizen$category <- NULL\n      row.names(citizen) <- citizen$date\n      citizen$date <- NULL               \n      citizen <- as.xts(citizen) \n      \n      family <- merge(dates, AvgDaily[which(AvgDaily$category == \"Family & Friends\"),], by = \"date\", all = TRUE)                  \n      family$category <- NULL\n      row.names(family) <- family$date\n      family$date <- NULL               \n      family <- as.xts(family) \n      \n      food <- merge(dates, AvgDaily[which(AvgDaily$category == \"Food & Beverages\"),], by = \"date\", all = TRUE)                  \n      food$category <- NULL\n      row.names(food) <- food$date\n      food$date <- NULL             \n      food <- as.xts(food) \n      \n      identities <- merge(dates, AvgDaily[which(AvgDaily$category == \"Identities\"),], by = \"date\", all = TRUE)               \n      identities$category <- NULL\n      row.names(identities) <- identities$date\n      identities$date <- NULL             \n      identities <- as.xts(identities) \n      \n      latino <- merge(dates, AvgDaily[which(AvgDaily$category == \"Latino Culture\"),], by = \"date\", all = TRUE)                  \n      latino$category <- NULL\n      row.names(latino) <- latino$date\n      latino$date <- NULL                \n      latino <- as.xts(latino) \n      \n      music <- merge(dates, AvgDaily[which(AvgDaily$category == \"Music\"),], by = \"date\", all = TRUE)                  \n      music$category <- NULL\n      row.names(music) <- music$date\n      music$date <- NULL                \n      music <- as.xts(music) \n      \n      news <- merge(dates, AvgDaily[which(AvgDaily$category == \"News & Issues\"),], by = \"date\", all = TRUE)                  \n      news$category <- NULL\n      row.names(news) <- news$date\n      news$date <- NULL               \n      news <- as.xts(news) \n      \n      sensat <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sensationalist\"),], by = \"date\", all = TRUE)                  \n      sensat$category <- NULL\n      row.names(sensat) <- sensat$date\n      sensat$date <- NULL                \n      sensat <- as.xts(sensat) \n      \n      sex <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sex & Relationships\"),], by = \"date\", all = TRUE)                  \n      sex$category <- NULL\n      row.names(sex) <- sex$date\n      sex$date <- NULL                \n      sex <- as.xts(sex) \n      \n      sports <- merge(dates, AvgDaily[which(AvgDaily$category == \"Sports\"),], by = \"date\", all = TRUE)                  \n      sports$category <- NULL\n      row.names(sports) <- sports$date\n      sports$date <- NULL               \n      sports <- as.xts(sports) \n      \n      tv <- merge(dates, AvgDaily[which(AvgDaily$category == \"TV & Movies\"),], by = \"date\", all = TRUE)                  \n      tv$category <- NULL\n      row.names(tv) <- tv$date\n      tv$date <- NULL                \n      tv <- as.xts(tv) \n      \n      colores<- c('#B2182B','#D73027','#F46D43','#FDAE61','#FEE090','#FFFFD9','#EDF8B1','#C7E9B4','#7FCDBB','#41B6C4','#1D91C0','#225EA8','#253494','#081D58')\n      \n      hc <-highchart(type = \"stock\") %>%\n        \n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>% \n        hc_add_series(animals, name = \"Animals\", type = input$chart_type2, visible = ifelse(\"Animals\" %in% input$category_buttons2, TRUE, FALSE)) %>%\n        hc_add_series(beauty, name = \"Beauty & Fashion\", type = input$chart_type2, visible = ifelse(\"Beauty & Fashion\" %in% input$category_buttons2, TRUE, FALSE)) %>%\n        hc_add_series(celeb, name = \"Celebrity & Gossip\", type = input$chart_type2, visible = ifelse(\"Celebrity & Gossip\" %in% input$category_buttons2, TRUE, FALSE)) %>%\n        hc_add_series(citizen, name = \"Citizenship & Politics\", type = input$chart_type2, visible = ifelse(\"Citizenship & Politics\" %in% input$category_buttons2, TRUE, FALSE)) %>%\n        hc_add_series(family, name = \"Family & Friends\", type = input$chart_type2, visible = ifelse(\"Family & Friends\" %in% input$category_buttons2, TRUE, FALSE)) %>%\n        hc_add_series(food, name = \"Food & Beverages\", type = input$chart_type2, visible = ifelse(\"Food & Beverages\" %in% input$category_buttons2, TRUE, FALSE)) %>%\n        hc_add_series(identities, name = \"Identities\", type = input$chart_type2, visible = ifelse(\"Identities\" %in% input$category_buttons2, TRUE, FALSE)) %>%\n        hc_add_series(latino, name = \"Latino Culture\", type = input$chart_type2, visible = ifelse(\"Latino Culture\" %in% input$category_buttons2, TRUE, FALSE)) %>%\n        hc_add_series(music, name = \"Music\", type = input$chart_type2, visible = ifelse(\"Music\" %in% input$category_buttons2, TRUE, FALSE)) %>%\n        hc_add_series(news, name = \"News & Issues\", type = input$chart_type2, visible = ifelse(\"News & Issues\" %in% input$category_buttons2, TRUE, FALSE)) %>%\n        hc_add_series(sensat, name = \"Sensationalist\", type = input$chart_type2, visible = ifelse(\"Sensationalist\" %in% input$category_buttons2, TRUE, FALSE)) %>%\n        hc_add_series(sex, name = \"Sex & Relationships\", type = input$chart_type2, visible = ifelse(\"Sex & Relationships\" %in% input$category_buttons2, TRUE, FALSE)) %>%\n        hc_add_series(sports, name = \"Sports\", type = input$chart_type2, visible = ifelse(\"Sports\" %in% input$category_buttons2, TRUE, FALSE)) %>%\n        hc_add_series(tv, name = \"TV & Movies\", type = input$chart_type2, visible = ifelse(\"TV & Movies\" %in% input$category_buttons2, TRUE, FALSE)) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time2 == \"day\", 0, 3)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type2 == \"area\" || input$chart_type2 == \"column\"){if(input$chart_stack2 != \"none\"){input$chart_stack2}}, dataGrouping = list(approximation = input$chart_avg_total2, enabled = TRUE, forced = TRUE, units = list(list(input$chart_time2, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  # 6.1.1.2. Top Days --------------------------------------------------------------------------------------------------------\n  \n  output$PlotCategories4 <- renderHighchart({\n    \n    WeekLinks <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    \n    # WeekLinks <- DataArticles[which(DataArticles$date >= \"2017-06-08\" & DataArticles$date <= \"2017-06-14\"),]\n    \n    Catdf <- ddply(WeekLinks, \"date\", summarize, AnimalsLC = sum(ifelse(category == \"Animals\", link_clicks, 0)), BeautyLC = sum(ifelse(category == \"Beauty & Fashion\", link_clicks, 0)), CelebLC = sum(ifelse(category == \"Celebrity & Gossip\", link_clicks, 0)), CitiPoliticsLC = sum(ifelse(category == \"Citizenship & Politics\", link_clicks, 0)), FamilyLC = sum(ifelse(category == \"Family & Friends\", link_clicks, 0)), FoodLC = sum(ifelse(category == \"Food & Beverages\", link_clicks, 0)), IdentityLC = sum(ifelse(category == \"Identities\", link_clicks, 0)), LatinoLC = sum(ifelse(category == \"Latino Culture\", link_clicks, 0)), MusicLC = sum(ifelse(category == \"Music\", link_clicks, 0)), NewsLC = sum(ifelse(category == \"News & Issues\", link_clicks, 0)), OtherLC = sum(ifelse(category == \"Other\", link_clicks, 0)), SensationLC = sum(ifelse(category == \"Sensationalist\", link_clicks, 0)), SexLC = sum(ifelse(category == \"Sex & Relationships\", link_clicks, 0)), SportsLC = sum(ifelse(category == \"Sports\", link_clicks, 0)), TvLC = sum(ifelse(category == \"TV & Movies\", link_clicks, 0)), TotalLC = sum(link_clicks))\n    \n    Catdf <- Catdf[order(Catdf$TotalLC  , decreasing = TRUE),]\n    Catdf <- Catdf[1:min(nrow(Catdf),5), -17]\n    \n    Catdfg <- gather(Catdf, \"date\", \"link_clicks\", 2:16)\n    names(Catdfg) <- c(\"date\", \"category\", \"y\")\n    \n    Catdfs <- spread(Catdfg, \"date\", \"y\")\n    Catdfs$category <- as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category))\n    Catdfs <- Catdfs[,c(\"category\",as.character(Catdf$date))]\n    \n    colores<- c('#B2182B','#D73027','#F46D43','#FDAE61','#FEE090','#FFFFD9','#EDF8B1','#C7E9B4','#7FCDBB','#41B6C4', '#808080', '#1D91C0','#225EA8','#253494','#081D58')\n    \n    ds <- lapply(1:nrow(Catdfs), function(x){\n      \n      list(name = as.character(Catdfs[x,]$category), \n           \n           data = lapply(2:ncol(Catdfs), function(y){\n             \n             list(name = as.character(names(Catdfs[y])), y = Catdfs[x,y], drilldown = as.character(names(Catdfs[y])))}\n             \n           ))\n    })\n    \n    drilldown <- lapply(1:nrow(Catdf), function(x){\n      \n      list(name = \"Link Clicks\", id = as.character(Catdf[x,]$date), \n           \n           data = lapply(1:nrow(WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]), function(y){\n             \n             WeekLinksDay <- WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]\n             WeekLinksDay <- WeekLinksDay[order(WeekLinksDay$link_clicks, decreasing = TRUE),]\n             CatColors <- data.frame(category = as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category)), color = colores)\n             \n             list(name = WeekLinksDay[y,]$headline, y = WeekLinksDay[y,]$link_clicks, url = WeekLinksDay[y,]$permalink, \n                  color = as.character(CatColors[which(CatColors$category == WeekLinksDay[y,]$category),]$color))}\n             \n           ))\n    })\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_colors(colores) %>%\n      hc_plotOptions(column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\"), series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>%\n      hc_xAxis(type = \"category\", labels = list(formatter = JS(\"function () {formatted = this.value.length > 10? this.value.substring(0,10) + '...' : this.value;return formatted;}\"))) %>% \n      hc_yAxis(title = list(text = \"Link Clicks\")) %>% \n      hc_add_series_list(ds) %>% \n      hc_drilldown(series = drilldown) %>% \n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = TRUE) %>% \n      hc_add_theme(hc_theme_smpl())\n    \n    hc\n    \n  })\n  \n  # 6.1.1.3. Pie -------------------------------------------------------------------------------------------------------------\n  \n  output$PlotCategories1 <- renderHighchart({\n    \n    WeekLinks <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    Catdfm <- as.data.frame(table(WeekLinks$category))\n    colnames(Catdfm) <- c(\"category\", \"Freq\")\n    \n    colores<- c('#B2182B','#D73027','#F46D43','#FDAE61','#FEE090','#FFFFD9','#EDF8B1','#C7E9B4','#7FCDBB','#41B6C4','#1D91C0','#225EA8','#253494','#081D58')\n    \n    ds <- lapply(1:nrow(Catdfm), function(x){\n      list(name = Catdfm[x,]$category, y = Catdfm[x,]$Freq, drilldown = as.character(Catdfm[x,]$category))\n    })\n    \n    drilldown <- lapply(1:nrow(WeekLinks), function(x){\n      \n      list(name = \"Link Clicks\" , id = as.character(Catdfm[x,]$category), \n           \n           data = lapply(1:nrow(WeekLinks[which(WeekLinks$category == Catdfm[x,]$category),]), function(y){\n             \n             WeekLinksCat <- WeekLinks[which(WeekLinks$category == Catdfm[x,]$category),]\n             WeekLinksCat <- WeekLinksCat[order(WeekLinksCat$link_clicks, decreasing = TRUE),]\n             \n             list(name = WeekLinksCat[y,]$headline, y = WeekLinksCat[y,]$link_clicks, url = WeekLinksCat[y,]$permalink)}\n             \n           ))\n    })\n    \n    colorCount = length(unique(DataArticles$category))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"pie\") %>% \n      hc_colors(colores) %>%\n      hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), pie = list(borderColor = \"black\", dataLabels = list(formatter = JS(\"function () {formatted = this.point.name.length > 25? this.point.name.substring(0,25) + '...' : this.point.name;return formatted;}\"), style = list(width = \"100px\"))))%>%\n      hc_add_series(data = ds, name = \"Number of Articles\")%>% \n      hc_drilldown(series = drilldown) %>% \n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = FALSE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  # 6.1.1.4. Reach & Clicks --------------------------------------------------------------------------------------------------\n  \n  output$PlotCategories2 <- renderHighchart({\n    \n    WeekLinks <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    Catdfm1 <- ddply(WeekLinks, \"category\", summarize, AvgCTR = mean(na.omit(ctr)), AvgIR = mean(na.omit(interaction_rate)), AvgReach = mean(na.omit(post_reach)), AvgLinkClicks = mean(na.omit(link_clicks)))\n    \n    Catdfm1$AvgCTR <- as.numeric(format(Catdfm1$AvgCTR*100, digits= 3))\n    Catdfm1$AvgIR <- as.numeric(format(Catdfm1$AvgIR*100, digits = 3))\n    Catdfm1$AvgReach <- as.numeric(formatC(Catdfm1$AvgReach, format = \"f\", digits = 2))\n    Catdfm1$AvgLinkClicks <- as.numeric(formatC(Catdfm1$AvgLinkClicks, format = \"f\", digits = 2))\n    Catdfm1 <- Catdfm1[order(Catdfm1$AvgLinkClicks, decreasing = TRUE),]\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_plotOptions(column = list(borderColor = \"black\")) %>% \n      hc_xAxis(categories = Catdfm1$category) %>% \n      hc_yAxis(title = \"\") %>% \n      hc_add_series(data = Catdfm1$AvgReach, name = \"Avg. Reach\") %>% \n      hc_add_series(data = Catdfm1$AvgLinkClicks, name = \"Avg. Link Clicks\") %>%\n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = TRUE) %>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  # 6.1.1.5. CTR & IR --------------------------------------------------------------------------------------------------------\n  \n  output$PlotCategories3 <- renderHighchart({\n    \n    WeekLinks <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    Catdfm1 <- ddply(WeekLinks, \"category\", summarize, AvgCTR = mean(na.omit(ctr)), AvgIR = mean(na.omit(interaction_rate)), AvgReach = mean(na.omit(post_reach)), AvgLinkClicks = mean(na.omit(link_clicks)))\n    \n    Catdfm1$AvgCTR <- as.numeric(format(Catdfm1$AvgCTR*100, digits= 2))\n    Catdfm1$AvgIR <- as.numeric(format(Catdfm1$AvgIR*100, digits = 2))\n    Catdfm1$AvgReach <- as.numeric(formatC(Catdfm1$AvgReach, format = \"f\", digits = 2))\n    Catdfm1$AvgLinkClicks <- as.numeric(formatC(Catdfm1$AvgLinkClicks, format = \"f\", digits = 2))\n    Catdfm1 <- Catdfm1[order(Catdfm1$AvgLinkClicks, decreasing = TRUE),]\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_plotOptions(column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>% \n      hc_xAxis(categories = Catdfm1$category) %>% \n      hc_yAxis(title = \"\",labels = list(format = \"{value} %\")) %>% \n      hc_add_series(data = Catdfm1$AvgCTR, name = \"Avg. CTR\") %>% \n      hc_add_series(data = Catdfm1$AvgIR, name = \"Avg. IR\") %>%\n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = TRUE) %>%\n      hc_tooltip(pointFormat = \"{series.name}: <b>{point.y}</b><br/>\", valueSuffix = \"%\") %>%\n      hc_add_theme(hc_theme_smpl())\n    \n    hc\n    \n  })\n  \n  \n  # 6.1.2. Videos ------------------------------------------------------------------------------------------------------------\n  \n  # 6.1.2.1. Overview --------------------------------------------------------------------------------------------------------\n  \n  output$PlotCategoriesVideoOverview1 <- renderHighchart({\n    \n    input$plot_categories_video\n    isolate({    \n     \n      dates <- data.frame(created_time = DataVideos$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      animals <- merge(dates, DataVideos[which(DataVideos$category == \"Animals\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      animals <- as.xts(animals[,\"post_video_views\"], order.by = animals[,\"created_time\"])\n      \n      beauty <- merge(dates, DataVideos[which(DataVideos$category == \"Beauty & Fashion\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      beauty <- as.xts(beauty[,\"post_video_views\"], order.by = beauty[,\"created_time\"])\n      \n      celeb <- merge(dates, DataVideos[which(DataVideos$category == \"Celebrity & Gossip\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      celeb <- as.xts(celeb[,\"post_video_views\"], order.by = celeb[,\"created_time\"])\n      \n      citizen <- merge(dates, DataVideos[which(DataVideos$category == \"Citizenship & Politics\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      citizen <- as.xts(citizen[,\"post_video_views\"], order.by = citizen[,\"created_time\"])\n      \n      diy <- merge(dates, DataVideos[which(DataVideos$category == \"DIY\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      diy <- as.xts(diy[,\"post_video_views\"], order.by = diy[,\"created_time\"])\n      \n      family <- merge(dates, DataVideos[which(DataVideos$category == \"Family & Friend\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      family <- as.xts(family[,\"post_video_views\"], order.by = family[,\"created_time\"])\n      \n      food <- merge(dates, DataVideos[which(DataVideos$category == \"Food & Beverages\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      food <- as.xts(food[,\"post_video_views\"], order.by = food[,\"created_time\"])\n      \n      identities <- merge(dates, DataVideos[which(DataVideos$category == \"Identities\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      identities <- as.xts(identities[,\"post_video_views\"], order.by = identities[,\"created_time\"])\n      \n      latino <- merge(dates, DataVideos[which(DataVideos$category == \"Latino Culture\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      latino <- as.xts(latino[,\"post_video_views\"], order.by = latino[,\"created_time\"])\n      \n      live <- merge(dates, DataVideos[which(DataVideos$category == \"Live\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      live <- as.xts(live[,\"post_video_views\"], order.by = live[,\"created_time\"])\n      \n      music <- merge(dates, DataVideos[which(DataVideos$category == \"Music\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      music <- as.xts(music[,\"post_video_views\"], order.by = music[,\"created_time\"])\n      \n      news <- merge(dates, DataVideos[which(DataVideos$category == \"News & Issues\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      news <- as.xts(news[,\"post_video_views\"], order.by = news[,\"created_time\"])\n      \n      others <- merge(dates, DataVideos[which(DataVideos$category == \"Others\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      others <- as.xts(others[,\"post_video_views\"], order.by = others[,\"created_time\"])\n      \n      sensat <- merge(dates, DataVideos[which(DataVideos$category == \"Sensationalist\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      sensat <- as.xts(sensat[,\"post_video_views\"], order.by = sensat[,\"created_time\"])\n      \n      sex <- merge(dates, DataVideos[which(DataVideos$category == \"Sex & Relationships\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      sex <- as.xts(sex[,\"post_video_views\"], order.by = sex[,\"created_time\"])\n      \n      sports <- merge(dates, DataVideos[which(DataVideos$category == \"Sports\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      sports <- as.xts(sports[,\"post_video_views\"], order.by = sports[,\"created_time\"])\n      \n      tv <- merge(dates, DataVideos[which(DataVideos$category == \"TV & Movies\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      tv <- as.xts(tv[,\"post_video_views\"], order.by = tv[,\"created_time\"])\n      \n      colores<- c('#B2182B', '#D73027', '#F46D43', '#FDAE61', '#fdc835','#FEE090', '#FFFFD9', '#EDF8B1', '#C7E9B4', '#7FCDBB', '#7FCDBB', '#36a3b0', '#41B6C4', '#225EA8', '#253494', '#081D58')\n      \n      hc <-highchart(type = \"stock\") %>%\n        \n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Video Views\")) %>% \n        \n        hc_add_series(animals, name = \"Animals\", type = input$chart_type_video, visible = ifelse(\"Animals\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        hc_add_series(beauty, name = \"Beauty & Fashion\", type = input$chart_type_video, visible = ifelse(\"Beauty & Fashion\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        hc_add_series(celeb, name = \"Celebrity & Gossip\", type = input$chart_type_video, visible = ifelse(\"Celebrity & Gossip\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        hc_add_series(citizen, name = \"Citizenship & Politics\", type = input$chart_type_video, visible = ifelse(\"Citizenship & Politics\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        hc_add_series(diy, name = \"DIY\", type = input$chart_type_video, visible = ifelse(\"DIY\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        hc_add_series(family, name = \"Family & Friends\", type = input$chart_type_video, visible = ifelse(\"Family & Friends\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        hc_add_series(food, name = \"Food & Beverages\", type = input$chart_type_video, visible = ifelse(\"Food & Beverages\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        hc_add_series(identities, name = \"Identities\", type = input$chart_type_video, visible = ifelse(\"Identities\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        hc_add_series(latino, name = \"Latino Culture\", type = input$chart_type_video, visible = ifelse(\"Latino Culture\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        hc_add_series(live, name = \"Live\", type = input$chart_type_video, visible = ifelse(\"Live\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        hc_add_series(music, name = \"Music\", type = input$chart_type_video, visible = ifelse(\"Music\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        hc_add_series(news, name = \"News & Issues\", type = input$chart_type_video, visible = ifelse(\"News & Issues\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        hc_add_series(others, name = \"Others\", type = input$chart_type_video, visible = ifelse(\"Others\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        hc_add_series(sex, name = \"Sex & Relationships\", type = input$chart_type_video, visible = ifelse(\"Sex & Relationships\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        hc_add_series(sports, name = \"Sports\", type = input$chart_type_video, visible = ifelse(\"Sports\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        hc_add_series(tv, name = \"TV & Movies\", type = input$chart_type_video, visible = ifelse(\"TV & Movies\" %in% input$category_buttons_video, TRUE, FALSE)) %>%\n        \n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_video == \"day\", 0, 3)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_video == \"area\" || input$chart_type_video == \"column\"){if(input$chart_stack_video != \"none\"){input$chart_stack_video}}, dataGrouping = list(approximation = input$chart_avg_total_video, enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_video, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        \n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  output$PlotCategoriesVideoOverview2 <- renderHighchart({\n    \n    input$plot_categories_video2\n    isolate({ \n      \n      dates <- data.frame(created_time = DataVideos$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      animals <- merge(dates, DataVideos[which(DataVideos$category == \"Animals\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      animals <- as.xts(animals[,\"post_reach\"], order.by = animals[,\"created_time\"])\n      \n      beauty <- merge(dates, DataVideos[which(DataVideos$category == \"Beauty & Fashion\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      beauty <- as.xts(beauty[,\"post_reach\"], order.by = beauty[,\"created_time\"])\n      \n      celeb <- merge(dates, DataVideos[which(DataVideos$category == \"Celebrity & Gossip\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      celeb <- as.xts(celeb[,\"post_reach\"], order.by = celeb[,\"created_time\"])\n      \n      citizen <- merge(dates, DataVideos[which(DataVideos$category == \"Citizenship & Politics\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      citizen <- as.xts(citizen[,\"post_reach\"], order.by = citizen[,\"created_time\"])\n      \n      diy <- merge(dates, DataVideos[which(DataVideos$category == \"DIY\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      diy <- as.xts(diy[,\"post_reach\"], order.by = diy[,\"created_time\"])\n      \n      family <- merge(dates, DataVideos[which(DataVideos$category == \"Family & Friend\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      family <- as.xts(family[,\"post_reach\"], order.by = family[,\"created_time\"])\n      \n      food <- merge(dates, DataVideos[which(DataVideos$category == \"Food & Beverages\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      food <- as.xts(food[,\"post_reach\"], order.by = food[,\"created_time\"])\n      \n      identities <- merge(dates, DataVideos[which(DataVideos$category == \"Identities\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      identities <- as.xts(identities[,\"post_reach\"], order.by = identities[,\"created_time\"])\n      \n      latino <- merge(dates, DataVideos[which(DataVideos$category == \"Latino Culture\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      latino <- as.xts(latino[,\"post_reach\"], order.by = latino[,\"created_time\"])\n      \n      live <- merge(dates, DataVideos[which(DataVideos$category == \"Live\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      live <- as.xts(live[,\"post_reach\"], order.by = live[,\"created_time\"])\n      \n      music <- merge(dates, DataVideos[which(DataVideos$category == \"Music\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      music <- as.xts(music[,\"post_reach\"], order.by = music[,\"created_time\"])\n      \n      news <- merge(dates, DataVideos[which(DataVideos$category == \"News & Issues\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      news <- as.xts(news[,\"post_reach\"], order.by = news[,\"created_time\"])\n      \n      others <- merge(dates, DataVideos[which(DataVideos$category == \"Others\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      others <- as.xts(others[,\"post_reach\"], order.by = others[,\"created_time\"])\n      \n      sensat <- merge(dates, DataVideos[which(DataVideos$category == \"Sensationalist\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      sensat <- as.xts(sensat[,\"post_reach\"], order.by = sensat[,\"created_time\"])\n      \n      sex <- merge(dates, DataVideos[which(DataVideos$category == \"Sex & Relationships\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      sex <- as.xts(sex[,\"post_reach\"], order.by = sex[,\"created_time\"])\n      \n      sports <- merge(dates, DataVideos[which(DataVideos$category == \"Sports\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      sports <- as.xts(sports[,\"post_reach\"], order.by = sports[,\"created_time\"])\n      \n      tv <- merge(dates, DataVideos[which(DataVideos$category == \"TV & Movies\" & DataVideos$video_meme == 0), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      tv <- as.xts(tv[,\"post_reach\"], order.by = tv[,\"created_time\"])\n      \n      colores<- c('#B2182B', '#D73027', '#F46D43', '#FDAE61', '#fdc835','#FEE090', '#FFFFD9', '#EDF8B1', '#C7E9B4', '#7FCDBB', '#7FCDBB', '#36a3b0', '#41B6C4', '#225EA8', '#253494', '#081D58')\n      \n      hc <-highchart(type = \"stock\") %>%\n        \n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>% \n        \n        hc_add_series(animals, name = \"Animals\", type = input$chart_type_video2, visible = ifelse(\"Animals\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        hc_add_series(beauty, name = \"Beauty & Fashion\", type = input$chart_type_video2, visible = ifelse(\"Beauty & Fashion\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        hc_add_series(celeb, name = \"Celebrity & Gossip\", type = input$chart_type_video2, visible = ifelse(\"Celebrity & Gossip\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        hc_add_series(citizen, name = \"Citizenship & Politics\", type = input$chart_type_video2, visible = ifelse(\"Citizenship & Politics\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        hc_add_series(diy, name = \"DIY\", type = input$chart_type_video2, visible = ifelse(\"DIY\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        hc_add_series(family, name = \"Family & Friends\", type = input$chart_type_video2, visible = ifelse(\"Family & Friends\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        hc_add_series(food, name = \"Food & Beverages\", type = input$chart_type_video2, visible = ifelse(\"Food & Beverages\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        hc_add_series(identities, name = \"Identities\", type = input$chart_type_video2, visible = ifelse(\"Identities\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        hc_add_series(latino, name = \"Latino Culture\", type = input$chart_type_video2, visible = ifelse(\"Latino Culture\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        hc_add_series(live, name = \"Live\", type = input$chart_type_video2, visible = ifelse(\"Live\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        hc_add_series(music, name = \"Music\", type = input$chart_type_video2, visible = ifelse(\"Music\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        hc_add_series(news, name = \"News & Issues\", type = input$chart_type_video2, visible = ifelse(\"News & Issues\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        hc_add_series(others, name = \"Others\", type = input$chart_type_video2, visible = ifelse(\"Others\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        hc_add_series(sex, name = \"Sex & Relationships\", type = input$chart_type_video2, visible = ifelse(\"Sex & Relationships\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        hc_add_series(sports, name = \"Sports\", type = input$chart_type_video2, visible = ifelse(\"Sports\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        hc_add_series(tv, name = \"TV & Movies\", type = input$chart_type_video2, visible = ifelse(\"TV & Movies\" %in% input$category_buttons_video2, TRUE, FALSE)) %>%\n        \n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_video2 == \"day\", 0, 3)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_video2 == \"area\" || input$chart_type_video2 == \"column\"){if(input$chart_stack_video2 != \"none\"){input$chart_stack_video2}}, dataGrouping = list(approximation = input$chart_avg_total_video2, enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_video2, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        \n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  # 6.1.2.2. Top Days --------------------------------------------------------------------------------------------------------\n  \n  output$PlotCategoriesVideo4 <- renderHighchart({\n    \n    WeekLinks <- DataVideos[which(DataVideos$video_meme == 0 & DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2]),]\n    \n    Catdf <- ddply(WeekLinks, \"date\", summarize, AnimalsVV = sum(ifelse(category == \"Animals\", post_video_views, 0)), BeautyVV = sum(ifelse(category == \"Beauty & Fashion\", post_video_views, 0)), CelebVV = sum(ifelse(category == \"Celebrity & Gossip\", post_video_views, 0)), CitiPoliticsVV = sum(ifelse(category == \"Citizenship & Politics\", post_video_views, 0)), DIYVV = sum(ifelse(category == \"DIY\", post_video_views, 0)), FamilyVV = sum(ifelse(category == \"Family & Friends\", post_video_views, 0)), FoodVV = sum(ifelse(category == \"Food & Beverages\", post_video_views, 0)), IdentityVV = sum(ifelse(category == \"Identities\", post_video_views, 0)), LatinoVV = sum(ifelse(category == \"Latino Culture\", post_video_views, 0)), LiveVV = sum(ifelse(category == \"Live\", post_video_views, 0)), MusicVV = sum(ifelse(category == \"Music\", post_video_views, 0)), NewsVV = sum(ifelse(category == \"News & Issues\", post_video_views, 0)), SexVV = sum(ifelse(category == \"Sex & Relationships\", post_video_views, 0)), SportsVV = sum(ifelse(category == \"Sports\", post_video_views, 0)), TvVV = sum(ifelse(category == \"TV & Movies\", post_video_views, 0)), OthersVV = sum(ifelse(category == \"Others\", post_video_views, 0)), TotalVV = sum(post_video_views))\n    \n    Catdf <- Catdf[order(Catdf$TotalVV  , decreasing = TRUE),]\n    Catdf <- Catdf[1:min(nrow(Catdf),5), -18]\n    \n    Catdfg <- gather(Catdf, \"date\", \"post_video_views\", 2:17)\n    names(Catdfg) <- c(\"date\", \"category\", \"y\")\n    \n    Catdfs <- spread(Catdfg, \"date\", \"y\")\n    Catdfs$category <- as.character(unique(DataVideos[order(DataVideos$category, decreasing = FALSE),]$category))\n    Catdfs <- Catdfs[,c(\"category\",as.character(Catdf$date))]\n    \n    colores<- c('#B2182B', '#D73027', '#F46D43', '#FDAE61', '#fdc835','#FEE090', '#FFFFD9', '#EDF8B1', '#C7E9B4', '#7FCDBB', '#7FCDBB', '#36a3b0', '#41B6C4', '#225EA8', '#253494', '#081D58')\n    \n    ds <- lapply(1:nrow(Catdfs), function(x){\n      \n      list(name = as.character(Catdfs[x,]$category), \n           \n           data = lapply(2:ncol(Catdfs), function(y){\n             \n             list(name = as.character(names(Catdfs[y])), y = Catdfs[x,y], drilldown = as.character(names(Catdfs[y])))}\n             \n           ))\n    })\n    \n    \n    drilldown <- lapply(1:nrow(Catdf), function(x){\n      \n      list(name = \"Video Views\", id = as.character(Catdf[x,]$date), \n           \n           data = lapply(1:nrow(WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]), function(y){\n             \n             WeekLinksDay <- WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]\n             WeekLinksDay <- WeekLinksDay[order(WeekLinksDay$post_video_views, decreasing = TRUE),]\n             CatColors <- data.frame(category = as.character(unique(DataVideos[order(DataVideos$category, decreasing = FALSE),]$category)), color = colores)\n             \n             list(name = WeekLinksDay[y,]$sharetext, y = WeekLinksDay[y,]$post_video_views, url = WeekLinksDay[y,]$permalink, \n                  color = as.character(CatColors[which(CatColors$category == WeekLinksDay[y,]$category),]$color))}\n             \n           ))\n    })\n    \n    \n    hc <- highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_colors(colores) %>%\n      hc_plotOptions(column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\"), series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>%\n      hc_xAxis(type = \"category\", labels = list(formatter = JS(\"function () {formatted = this.value.length > 10? this.value.substring(0,10) + '...' : this.value;return formatted;}\"))) %>% \n      hc_yAxis(title = list(text = \"Video Views\")) %>% \n      hc_add_series_list(ds) %>% \n      hc_drilldown(series = drilldown) %>% \n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = TRUE) %>% \n      hc_add_theme(hc_theme_smpl())\n    \n    hc\n    \n  })\n  \n  # 6.1.2.3. Pie -------------------------------------------------------------------------------------------------------------\n  \n  output$PlotCategoriesVideo1 <- renderHighchart({\n    \n    WeekLinks <- DataVideos[which(DataVideos$video_meme == 0 & DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2]),]\n    \n    Catdfm <- as.data.frame(table(WeekLinks$category))\n    colnames(Catdfm) <- c(\"category\", \"Freq\")\n    \n    colores<- c('#B2182B', '#D73027', '#F46D43', '#FDAE61', '#fdc835','#FEE090', '#FFFFD9', '#EDF8B1', '#C7E9B4', '#7FCDBB', '#7FCDBB', '#36a3b0', '#41B6C4', '#225EA8', '#253494', '#081D58')\n    \n    ds <- lapply(1:nrow(Catdfm), function(x){\n      list(name = as.character(Catdfm[x,]$category), y = Catdfm[x,]$Freq, drilldown = as.character(Catdfm[x,]$category))\n    })\n    \n    drilldown <- lapply(1:nrow(Catdfm), function(x){\n      \n      list(name = \"Video Views\" , id = as.character(Catdfm[x,]$category), \n           \n           data = lapply(1:nrow(WeekLinks[which(WeekLinks$category == as.character(Catdfm[x,]$category)),]), function(y){\n             \n             WeekLinksCat <- WeekLinks[which(WeekLinks$category == Catdfm[x,]$category),]\n             WeekLinksCat <- WeekLinksCat[order(WeekLinksCat$post_video_views, decreasing = TRUE),]\n             \n             list(name = WeekLinksCat[y,]$sharetext, y = WeekLinksCat[y,]$post_video_views, url = WeekLinksCat[y,]$permalink)}\n             \n           ))\n    })\n    \n    \n    colorCount = length(unique(DataArticles$category))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"pie\") %>% \n      hc_colors(colores) %>%\n      hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), pie = list(borderColor = \"black\", dataLabels = list(formatter = JS(\"function () {formatted = this.point.name.length > 25? this.point.name.substring(0,25) + '...' : this.point.name;return formatted;}\"), style = list(width = \"100px\"))))%>%\n      \n      hc_add_series(data = ds, name = \"Number of Videos\")%>% \n      hc_drilldown(series = drilldown) %>% \n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = FALSE)%>% \n      hc_add_theme(hc_theme_smpl())\n    \n    hc\n    \n  })\n  \n  # 6.1.2.4. Reach & Video Views ---------------------------------------------------------------------------------------------\n  \n  output$PlotCategoriesVideo2 <- renderHighchart({\n    \n    WeekLinks <- DataVideos[which(DataVideos$video_meme == 0 & DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2]),]\n    Catdfm1 <- ddply(WeekLinks, \"category\", summarize, AvgReach = mean(na.omit(post_reach)), AvgVideoViews = mean(na.omit(post_video_views)))\n    \n    Catdfm1$AvgReach <- as.numeric(formatC(Catdfm1$AvgReach, format = \"f\", digits = 2))\n    Catdfm1$AvgVideoViews <- as.numeric(formatC(Catdfm1$AvgVideoViews, format = \"f\", digits = 2))\n    Catdfm1 <- Catdfm1[order(Catdfm1$AvgVideoViews, decreasing = TRUE),]\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_plotOptions(column = list(borderColor = \"black\")) %>% \n      hc_xAxis(categories = Catdfm1$category) %>% \n      hc_yAxis(title = \"\") %>% \n      hc_add_series(data = Catdfm1$AvgReach, name = \"Avg. Reach\") %>% \n      hc_add_series(data = Catdfm1$AvgVideoViews, name = \"Avg. Video Views\") %>%\n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = TRUE) %>% \n      hc_add_theme(hc_theme_smpl())\n    \n    hc\n    \n  })\n  \n  # 6.1.2.5. IR --------------------------------------------------------------------------------------------------------------\n  \n  output$PlotCategoriesVideo3 <- renderHighchart({\n    \n    WeekLinks <- DataVideos[which(DataVideos$video_meme == 0 & DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2]),]\n    Catdfm1 <- ddply(WeekLinks, \"category\", summarize, AvgIR = mean(na.omit(interaction_rate)), AvgVideoViews = mean(na.omit(post_video_views)))\n\n    Catdfm1$AvgIR <- as.numeric(format(Catdfm1$AvgIR*100, digits = 2))\n    Catdfm1 <- Catdfm1[order(Catdfm1$AvgVideoViews, decreasing = TRUE),]\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_plotOptions(column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>% \n      hc_xAxis(categories = Catdfm1$category) %>% \n      hc_yAxis(title = \"\",labels = list(format = \"{value} %\")) %>% \n      hc_add_series(data = Catdfm1$AvgIR, name = \"Avg. IR\") %>%\n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = TRUE) %>%\n      hc_tooltip(pointFormat = \"{series.name}: <b>{point.y}</b><br/>\", valueSuffix = \"%\") %>%\n      hc_add_theme(hc_theme_smpl())\n    \n    hc\n    \n  })\n  \n  \n  # 6.1.3. Video Memes ------------------------------------------------------------------------------------------------------\n  \n  # 6.1.3.1. Categories Overview --------------------------------------------------------------------------------------------------------\n  \n  output$PlotCategoriesVideoMemeOverview1 <- renderHighchart({\n    \n    input$plot_categories_video_meme\n    isolate({    \n      \n      dates <- data.frame(created_time = DataVideos$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      animals <- merge(dates, DataVideos[which(DataVideos$category == \"Animals\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      animals <- as.xts(animals[,\"post_video_views\"], order.by = animals[,\"created_time\"])\n      \n      beauty <- merge(dates, DataVideos[which(DataVideos$category == \"Beauty & Fashion\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      beauty <- as.xts(beauty[,\"post_video_views\"], order.by = beauty[,\"created_time\"])\n      \n      celeb <- merge(dates, DataVideos[which(DataVideos$category == \"Celebrity & Gossip\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      celeb <- as.xts(celeb[,\"post_video_views\"], order.by = celeb[,\"created_time\"])\n      \n      citizen <- merge(dates, DataVideos[which(DataVideos$category == \"Citizenship & Politics\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      citizen <- as.xts(citizen[,\"post_video_views\"], order.by = citizen[,\"created_time\"])\n      \n      diy <- merge(dates, DataVideos[which(DataVideos$category == \"DIY\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      diy <- as.xts(diy[,\"post_video_views\"], order.by = diy[,\"created_time\"])\n      \n      family <- merge(dates, DataVideos[which(DataVideos$category == \"Family & Friend\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      family <- as.xts(family[,\"post_video_views\"], order.by = family[,\"created_time\"])\n      \n      food <- merge(dates, DataVideos[which(DataVideos$category == \"Food & Beverages\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      food <- as.xts(food[,\"post_video_views\"], order.by = food[,\"created_time\"])\n      \n      identities <- merge(dates, DataVideos[which(DataVideos$category == \"Identities\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      identities <- as.xts(identities[,\"post_video_views\"], order.by = identities[,\"created_time\"])\n      \n      latino <- merge(dates, DataVideos[which(DataVideos$category == \"Latino Culture\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      latino <- as.xts(latino[,\"post_video_views\"], order.by = latino[,\"created_time\"])\n      \n      live <- merge(dates, DataVideos[which(DataVideos$category == \"Live\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      live <- as.xts(live[,\"post_video_views\"], order.by = live[,\"created_time\"])\n      \n      music <- merge(dates, DataVideos[which(DataVideos$category == \"Music\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      music <- as.xts(music[,\"post_video_views\"], order.by = music[,\"created_time\"])\n      \n      news <- merge(dates, DataVideos[which(DataVideos$category == \"News & Issues\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      news <- as.xts(news[,\"post_video_views\"], order.by = news[,\"created_time\"])\n      \n      others <- merge(dates, DataVideos[which(DataVideos$category == \"Others\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      others <- as.xts(others[,\"post_video_views\"], order.by = others[,\"created_time\"])\n      \n      sensat <- merge(dates, DataVideos[which(DataVideos$category == \"Sensationalist\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      sensat <- as.xts(sensat[,\"post_video_views\"], order.by = sensat[,\"created_time\"])\n      \n      sex <- merge(dates, DataVideos[which(DataVideos$category == \"Sex & Relationships\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      sex <- as.xts(sex[,\"post_video_views\"], order.by = sex[,\"created_time\"])\n      \n      sports <- merge(dates, DataVideos[which(DataVideos$category == \"Sports\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      sports <- as.xts(sports[,\"post_video_views\"], order.by = sports[,\"created_time\"])\n      \n      tv <- merge(dates, DataVideos[which(DataVideos$category == \"TV & Movies\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_video_views\")], by = \"created_time\", all = TRUE)\n      tv <- as.xts(tv[,\"post_video_views\"], order.by = tv[,\"created_time\"])\n      \n      colores<- c('#B2182B', '#D73027', '#F46D43', '#FDAE61', '#fdc835','#FEE090', '#FFFFD9', '#EDF8B1', '#C7E9B4', '#7FCDBB', '#7FCDBB', '#36a3b0', '#41B6C4', '#225EA8', '#253494', '#081D58')\n      \n      hc <-highchart(type = \"stock\") %>%\n        \n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Video Views\")) %>% \n        \n        hc_add_series(animals, name = \"Animals\", type = input$chart_type_video_meme, visible = ifelse(\"Animals\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        hc_add_series(beauty, name = \"Beauty & Fashion\", type = input$chart_type_video_meme, visible = ifelse(\"Beauty & Fashion\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        hc_add_series(celeb, name = \"Celebrity & Gossip\", type = input$chart_type_video_meme, visible = ifelse(\"Celebrity & Gossip\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        hc_add_series(citizen, name = \"Citizenship & Politics\", type = input$chart_type_video_meme, visible = ifelse(\"Citizenship & Politics\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        hc_add_series(diy, name = \"DIY\", type = input$chart_type_video_meme, visible = ifelse(\"DIY\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        hc_add_series(family, name = \"Family & Friends\", type = input$chart_type_video_meme, visible = ifelse(\"Family & Friends\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        hc_add_series(food, name = \"Food & Beverages\", type = input$chart_type_video_meme, visible = ifelse(\"Food & Beverages\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        hc_add_series(identities, name = \"Identities\", type = input$chart_type_video_meme, visible = ifelse(\"Identities\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        hc_add_series(latino, name = \"Latino Culture\", type = input$chart_type_video_meme, visible = ifelse(\"Latino Culture\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        hc_add_series(live, name = \"Live\", type = input$chart_type_video_meme, visible = ifelse(\"Live\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        hc_add_series(music, name = \"Music\", type = input$chart_type_video_meme, visible = ifelse(\"Music\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        hc_add_series(news, name = \"News & Issues\", type = input$chart_type_video_meme, visible = ifelse(\"News & Issues\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        hc_add_series(others, name = \"Others\", type = input$chart_type_video_meme, visible = ifelse(\"Others\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        hc_add_series(sex, name = \"Sex & Relationships\", type = input$chart_type_video_meme, visible = ifelse(\"Sex & Relationships\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        hc_add_series(sports, name = \"Sports\", type = input$chart_type_video_meme, visible = ifelse(\"Sports\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        hc_add_series(tv, name = \"TV & Movies\", type = input$chart_type_video_meme, visible = ifelse(\"TV & Movies\" %in% input$category_buttons_video_meme, TRUE, FALSE)) %>%\n        \n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_video_meme == \"day\", 0, 3)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_video_meme == \"area\" || input$chart_type_video_meme == \"column\"){if(input$chart_stack_video != \"none\"){input$chart_stack_video_meme}}, dataGrouping = list(approximation = input$chart_avg_total_video_meme, enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_video_meme, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        \n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  output$PlotCategoriesVideoMemeOverview2 <- renderHighchart({\n    \n    input$plot_categories_video_meme2\n    isolate({ \n\n      dates <- data.frame(created_time = DataVideos$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      animals <- merge(dates, DataVideos[which(DataVideos$category == \"Animals\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      animals <- as.xts(animals[,\"post_reach\"], order.by = animals[,\"created_time\"])\n      \n      beauty <- merge(dates, DataVideos[which(DataVideos$category == \"Beauty & Fashion\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      beauty <- as.xts(beauty[,\"post_reach\"], order.by = beauty[,\"created_time\"])\n      \n      celeb <- merge(dates, DataVideos[which(DataVideos$category == \"Celebrity & Gossip\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      celeb <- as.xts(celeb[,\"post_reach\"], order.by = celeb[,\"created_time\"])\n      \n      citizen <- merge(dates, DataVideos[which(DataVideos$category == \"Citizenship & Politics\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      citizen <- as.xts(citizen[,\"post_reach\"], order.by = citizen[,\"created_time\"])\n      \n      diy <- merge(dates, DataVideos[which(DataVideos$category == \"DIY\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      diy <- as.xts(diy[,\"post_reach\"], order.by = diy[,\"created_time\"])\n      \n      family <- merge(dates, DataVideos[which(DataVideos$category == \"Family & Friend\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      family <- as.xts(family[,\"post_reach\"], order.by = family[,\"created_time\"])\n      \n      food <- merge(dates, DataVideos[which(DataVideos$category == \"Food & Beverages\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      food <- as.xts(food[,\"post_reach\"], order.by = food[,\"created_time\"])\n      \n      identities <- merge(dates, DataVideos[which(DataVideos$category == \"Identities\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      identities <- as.xts(identities[,\"post_reach\"], order.by = identities[,\"created_time\"])\n      \n      latino <- merge(dates, DataVideos[which(DataVideos$category == \"Latino Culture\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      latino <- as.xts(latino[,\"post_reach\"], order.by = latino[,\"created_time\"])\n      \n      live <- merge(dates, DataVideos[which(DataVideos$category == \"Live\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      live <- as.xts(live[,\"post_reach\"], order.by = live[,\"created_time\"])\n      \n      music <- merge(dates, DataVideos[which(DataVideos$category == \"Music\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      music <- as.xts(music[,\"post_reach\"], order.by = music[,\"created_time\"])\n      \n      news <- merge(dates, DataVideos[which(DataVideos$category == \"News & Issues\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      news <- as.xts(news[,\"post_reach\"], order.by = news[,\"created_time\"])\n      \n      others <- merge(dates, DataVideos[which(DataVideos$category == \"Others\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      others <- as.xts(others[,\"post_reach\"], order.by = others[,\"created_time\"])\n      \n      sensat <- merge(dates, DataVideos[which(DataVideos$category == \"Sensationalist\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      sensat <- as.xts(sensat[,\"post_reach\"], order.by = sensat[,\"created_time\"])\n      \n      sex <- merge(dates, DataVideos[which(DataVideos$category == \"Sex & Relationships\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      sex <- as.xts(sex[,\"post_reach\"], order.by = sex[,\"created_time\"])\n      \n      sports <- merge(dates, DataVideos[which(DataVideos$category == \"Sports\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      sports <- as.xts(sports[,\"post_reach\"], order.by = sports[,\"created_time\"])\n      \n      tv <- merge(dates, DataVideos[which(DataVideos$category == \"TV & Movies\" & DataVideos$video_meme == 1), c(\"created_time\",\"post_reach\")], by = \"created_time\", all = TRUE)\n      tv <- as.xts(tv[,\"post_reach\"], order.by = tv[,\"created_time\"])\n      \n      colores<- c('#B2182B', '#D73027', '#F46D43', '#FDAE61', '#fdc835','#FEE090', '#FFFFD9', '#EDF8B1', '#C7E9B4', '#7FCDBB', '#7FCDBB', '#36a3b0', '#41B6C4', '#225EA8', '#253494', '#081D58')\n      \n      hc <-highchart(type = \"stock\") %>%\n        \n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>% \n        \n        hc_add_series(animals, name = \"Animals\", type = input$chart_type_video_meme2, visible = ifelse(\"Animals\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        hc_add_series(beauty, name = \"Beauty & Fashion\", type = input$chart_type_video_meme2, visible = ifelse(\"Beauty & Fashion\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        hc_add_series(celeb, name = \"Celebrity & Gossip\", type = input$chart_type_video_meme2, visible = ifelse(\"Celebrity & Gossip\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        hc_add_series(citizen, name = \"Citizenship & Politics\", type = input$chart_type_video_meme2, visible = ifelse(\"Citizenship & Politics\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        hc_add_series(diy, name = \"DIY\", type = input$chart_type_video_meme2, visible = ifelse(\"DIY\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        hc_add_series(family, name = \"Family & Friends\", type = input$chart_type_video_meme2, visible = ifelse(\"Family & Friends\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        hc_add_series(food, name = \"Food & Beverages\", type = input$chart_type_video_meme2, visible = ifelse(\"Food & Beverages\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        hc_add_series(identities, name = \"Identities\", type = input$chart_type_video_meme2, visible = ifelse(\"Identities\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        hc_add_series(latino, name = \"Latino Culture\", type = input$chart_type_video_meme2, visible = ifelse(\"Latino Culture\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        hc_add_series(live, name = \"Live\", type = input$chart_type_video_meme2, visible = ifelse(\"Live\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        hc_add_series(music, name = \"Music\", type = input$chart_type_video_meme2, visible = ifelse(\"Music\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        hc_add_series(news, name = \"News & Issues\", type = input$chart_type_video_meme2, visible = ifelse(\"News & Issues\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        hc_add_series(others, name = \"Others\", type = input$chart_type_video_meme2, visible = ifelse(\"Others\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        hc_add_series(sex, name = \"Sex & Relationships\", type = input$chart_type_video_meme2, visible = ifelse(\"Sex & Relationships\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        hc_add_series(sports, name = \"Sports\", type = input$chart_type_video_meme2, visible = ifelse(\"Sports\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        hc_add_series(tv, name = \"TV & Movies\", type = input$chart_type_video_meme2, visible = ifelse(\"TV & Movies\" %in% input$category_buttons_video_meme2, TRUE, FALSE)) %>%\n        \n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_video_meme2 == \"day\", 0, 3)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_video_meme2 == \"area\" || input$chart_type_video_meme2 == \"column\"){if(input$chart_stack_video_meme2 != \"none\"){input$chart_stack_video_meme2}}, dataGrouping = list(approximation = input$chart_avg_total_video_meme2, enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_video_meme2, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        \n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  # 6.1.3.2. Top Days --------------------------------------------------------------------------------------------------------\n  \n  output$PlotCategoriesVideoMeme4 <- renderHighchart({\n    \n    WeekLinks <- DataVideos[which(DataVideos$video_meme == 1 & DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2]),]\n    \n    Catdf <- ddply(WeekLinks, \"date\", summarize, AnimalsVV = sum(ifelse(category == \"Animals\", post_video_views, 0)), BeautyVV = sum(ifelse(category == \"Beauty & Fashion\", post_video_views, 0)), CelebVV = sum(ifelse(category == \"Celebrity & Gossip\", post_video_views, 0)), CitiPoliticsVV = sum(ifelse(category == \"Citizenship & Politics\", post_video_views, 0)), DIYVV = sum(ifelse(category == \"DIY\", post_video_views, 0)), FamilyVV = sum(ifelse(category == \"Family & Friends\", post_video_views, 0)), FoodVV = sum(ifelse(category == \"Food & Beverages\", post_video_views, 0)), IdentityVV = sum(ifelse(category == \"Identities\", post_video_views, 0)), LatinoVV = sum(ifelse(category == \"Latino Culture\", post_video_views, 0)), LiveVV = sum(ifelse(category == \"Live\", post_video_views, 0)), MusicVV = sum(ifelse(category == \"Music\", post_video_views, 0)), NewsVV = sum(ifelse(category == \"News & Issues\", post_video_views, 0)), SexVV = sum(ifelse(category == \"Sex & Relationships\", post_video_views, 0)), SportsVV = sum(ifelse(category == \"Sports\", post_video_views, 0)), TvVV = sum(ifelse(category == \"TV & Movies\", post_video_views, 0)), OthersVV = sum(ifelse(category == \"Others\", post_video_views, 0)), TotalVV = sum(post_video_views))\n    \n    Catdf <- Catdf[order(Catdf$TotalVV  , decreasing = TRUE),]\n    Catdf <- Catdf[1:min(nrow(Catdf),5), -18]\n    \n    Catdfg <- gather(Catdf, \"date\", \"post_video_views\", 2:17)\n    names(Catdfg) <- c(\"date\", \"category\", \"y\")\n    \n    Catdfs <- spread(Catdfg, \"date\", \"y\")\n    Catdfs$category <- as.character(unique(DataVideos[order(DataVideos$category, decreasing = FALSE),]$category))\n    Catdfs <- Catdfs[,c(\"category\",as.character(Catdf$date))]\n    \n    colores<- c('#B2182B', '#D73027', '#F46D43', '#FDAE61', '#fdc835','#FEE090', '#FFFFD9', '#EDF8B1', '#C7E9B4', '#7FCDBB', '#7FCDBB', '#36a3b0', '#41B6C4', '#225EA8', '#253494', '#081D58')\n    \n    ds <- lapply(1:nrow(Catdfs), function(x){\n      \n      list(name = as.character(Catdfs[x,]$category), \n           \n           data = lapply(2:ncol(Catdfs), function(y){\n             \n             list(name = as.character(names(Catdfs[y])), y = Catdfs[x,y], drilldown = as.character(names(Catdfs[y])))}\n             \n           ))\n    })\n    \n    \n    drilldown <- lapply(1:nrow(Catdf), function(x){\n      \n      list(name = \"Video Views\", id = as.character(Catdf[x,]$date), \n           \n           data = lapply(1:nrow(WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]), function(y){\n             \n             WeekLinksDay <- WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]\n             WeekLinksDay <- WeekLinksDay[order(WeekLinksDay$post_video_views, decreasing = TRUE),]\n             CatColors <- data.frame(category = as.character(unique(DataVideos[order(DataVideos$category, decreasing = FALSE),]$category)), color = colores)\n             \n             list(name = WeekLinksDay[y,]$sharetext, y = WeekLinksDay[y,]$post_video_views, url = WeekLinksDay[y,]$permalink, \n                  color = as.character(CatColors[which(CatColors$category == WeekLinksDay[y,]$category),]$color))}\n             \n           ))\n    })\n    \n    \n    hc <- highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_colors(colores) %>%\n      hc_plotOptions(column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\"), series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>%\n      hc_xAxis(type = \"category\", labels = list(formatter = JS(\"function () {formatted = this.value.length > 10? this.value.substring(0,10) + '...' : this.value;return formatted;}\"))) %>% \n      hc_yAxis(title = list(text = \"Video Views\")) %>% \n      hc_add_series_list(ds) %>% \n      hc_drilldown(series = drilldown) %>% \n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = TRUE) %>% \n      hc_add_theme(hc_theme_smpl())\n    \n    hc\n    \n  })\n  \n  # 6.1.3.3. Pie -------------------------------------------------------------------------------------------------------------\n  \n  output$PlotCategoriesVideoMeme1 <- renderHighchart({\n    \n    WeekLinks <- DataVideos[which(DataVideos$video_meme == 1 & DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2]),]\n    Catdfm <- as.data.frame(table(WeekLinks$category))\n    colnames(Catdfm) <- c(\"category\", \"Freq\")\n    \n    colores<- c('#B2182B', '#D73027', '#F46D43', '#FDAE61', '#fdc835','#FEE090', '#FFFFD9', '#EDF8B1', '#C7E9B4', '#7FCDBB', '#7FCDBB', '#36a3b0', '#41B6C4', '#225EA8', '#253494', '#081D58')\n    \n    ds <- lapply(1:nrow(Catdfm), function(x){\n      list(name = as.character(Catdfm[x,]$category), y = Catdfm[x,]$Freq, drilldown = as.character(Catdfm[x,]$category))\n    })\n    \n    drilldown <- lapply(1:nrow(Catdfm), function(x){\n      \n      list(name = \"Video Views\" , id = as.character(Catdfm[x,]$category), \n           \n           data = lapply(1:nrow(WeekLinks[which(WeekLinks$category == Catdfm[x,]$category),]), function(y){\n             \n             WeekLinksCat <- WeekLinks[which(WeekLinks$category == Catdfm[x,]$category),]\n             WeekLinksCat <- WeekLinksCat[order(WeekLinksCat$post_video_views, decreasing = TRUE),]\n             \n             list(name = WeekLinksCat[y,]$sharetext, y = WeekLinksCat[y,]$post_video_views, url = WeekLinksCat[y,]$permalink)}\n             \n           ))\n    })\n    \n    colorCount = length(unique(DataArticles$category))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"pie\") %>% \n      hc_colors(colores) %>%\n      hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), pie = list(borderColor = \"black\", dataLabels = list(formatter = JS(\"function () {formatted = this.point.name.length > 25? this.point.name.substring(0,25) + '...' : this.point.name;return formatted;}\"), style = list(width = \"100px\"))))%>%\n      \n      hc_add_series(data = ds, name = \"Number of Videos\")%>% \n      hc_drilldown(series = drilldown) %>% \n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = FALSE)%>% \n      hc_add_theme(hc_theme_smpl())\n    \n    hc\n    \n  })\n  \n  # 6.1.3.4. Reach & Video Views ---------------------------------------------------------------------------------------------\n  \n  output$PlotCategoriesVideoMeme2 <- renderHighchart({\n    \n    WeekLinks <- DataVideos[which(DataVideos$video_meme == 1 & DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2]),]\n    Catdfm1 <- ddply(WeekLinks, \"category\", summarize, AvgReach = mean(na.omit(post_reach)), AvgVideoViews = mean(na.omit(post_video_views)))\n    \n    Catdfm1$AvgReach <- as.numeric(formatC(Catdfm1$AvgReach, format = \"f\", digits = 2))\n    Catdfm1$AvgVideoViews <- as.numeric(formatC(Catdfm1$AvgVideoViews, format = \"f\", digits = 2))\n    Catdfm1 <- Catdfm1[order(Catdfm1$AvgVideoViews, decreasing = TRUE),]\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_plotOptions(column = list(borderColor = \"black\")) %>% \n      hc_xAxis(categories = Catdfm1$category) %>% \n      hc_yAxis(title = \"\") %>% \n      hc_add_series(data = Catdfm1$AvgReach, name = \"Avg. Reach\") %>% \n      hc_add_series(data = Catdfm1$AvgVideoViews, name = \"Avg. Video Views\") %>%\n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = TRUE) %>% \n      hc_add_theme(hc_theme_smpl())\n    \n    hc\n    \n  }) \n  \n  # 6.1.3.5. IR --------------------------------------------------------------------------------------------------------------\n  \n  output$PlotCategoriesVideoMeme3 <- renderHighchart({\n    \n    WeekLinks <- DataVideos[which(DataVideos$video_meme == 1 & DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2]),]\n    Catdfm1 <- ddply(WeekLinks, \"category\", summarize, AvgIR = mean(na.omit(interaction_rate)), AvgVideoViews = mean(na.omit(post_video_views)))\n    \n    Catdfm1$AvgIR <- as.numeric(format(Catdfm1$AvgIR*100, digits = 2))\n    Catdfm1 <- Catdfm1[order(Catdfm1$AvgVideoViews, decreasing = TRUE),]\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_plotOptions(column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>% \n      hc_xAxis(categories = Catdfm1$category) %>% \n      hc_yAxis(title = \"\",labels = list(format = \"{value} %\")) %>% \n      hc_add_series(data = Catdfm1$AvgIR, name = \"Avg. IR\") %>%\n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = TRUE) %>%\n      hc_tooltip(pointFormat = \"{series.name}: <b>{point.y}</b><br/>\", valueSuffix = \"%\") %>%\n      hc_add_theme(hc_theme_smpl())\n    \n    hc\n    \n  })\n  \n  \n  # ---------------------------------------------------------------------------------------------------------------------\n  \n  # 6.2. Categories - We Are MitÃº ---------------------------------------------------------------------------------------------------------\n  \n  output$BHPlotCategories4 <- renderHighchart({\n    \n    WeekLinks <- DataArticlesBH[which(DataArticlesBH$date >= input$dateRange1[1] & DataArticlesBH$date <= input$dateRange1[2]),]\n    \n    Catdf <- ddply(WeekLinks, \"date\", summarize, AnimalsLC = sum(ifelse(category == \"Animals\", link_clicks, 0)), BeautyLC = sum(ifelse(category == \"Beauty & Fashion\", link_clicks, 0)), CelebLC = sum(ifelse(category == \"Celebrity & Gossip\", link_clicks, 0)), CitiPoliticsLC = sum(ifelse(category == \"Citizenship & Politics\", link_clicks, 0)), FamilyLC = sum(ifelse(category == \"Family & Friends\", link_clicks, 0)), FoodLC = sum(ifelse(category == \"Food & Beverages\", link_clicks, 0)), IdentityLC = sum(ifelse(category == \"Identities\", link_clicks, 0)), LatinoLC = sum(ifelse(category == \"Latino Culture\", link_clicks, 0)), MusicLC = sum(ifelse(category == \"Music\", link_clicks, 0)), NewsLC = sum(ifelse(category == \"News & Issues\", link_clicks, 0)), SensationLC = sum(ifelse(category == \"Sensationalist\", link_clicks, 0)), SexLC = sum(ifelse(category == \"Sex & Relationships\", link_clicks, 0)), SportsLC = sum(ifelse(category == \"Sports\", link_clicks, 0)), TvLC = sum(ifelse(category == \"TV & Movies\", link_clicks, 0)), TotalLC = sum(link_clicks))\n    \n    Catdf <- Catdf[order(Catdf$TotalLC  , decreasing = TRUE),]\n    Catdf <- Catdf[1:min(nrow(Catdf),5), -16]\n    \n    Catdfg <- gather(Catdf, \"date\", \"link_clicks\", 2:15)\n    names(Catdfg) <- c(\"date\", \"category\", \"y\")\n    \n    Catdfs <- spread(Catdfg, \"date\", \"y\")\n    Catdfs$category <- as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category))\n    Catdfs <- Catdfs[,c(\"category\",as.character(Catdf$date))]\n    \n    colores<- c('#B2182B','#D73027','#F46D43','#FDAE61','#FEE090','#FFFFD9','#EDF8B1','#C7E9B4','#7FCDBB','#41B6C4','#1D91C0','#225EA8','#253494','#081D58')\n    \n    ds <- lapply(1:nrow(Catdfs), function(x){\n      \n      list(name = as.character(Catdfs[x,]$category), \n           \n           data = lapply(2:ncol(Catdfs), function(y){\n             \n             list(name = as.character(names(Catdfs[y])), y = Catdfs[x,y], drilldown = as.character(names(Catdfs[y])))}\n             \n           ))\n    })\n    \n    drilldown <- lapply(1:nrow(Catdf), function(x){\n      \n      list(name = \"Link Clicks\", id = as.character(Catdf[x,]$date), \n           \n           data = lapply(1:nrow(WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]), function(y){\n             \n             WeekLinksDay <- WeekLinks[which(WeekLinks$date == Catdf[x,]$date),]\n             WeekLinksDay <- WeekLinksDay[order(WeekLinksDay$link_clicks, decreasing = TRUE),]\n             CatColors <- data.frame(category = as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category)), color = colores)\n             \n             list(name = WeekLinksDay[y,]$headline, y = WeekLinksDay[y,]$link_clicks, url = WeekLinksDay[y,]$permalink, \n                  color = as.character(CatColors[which(CatColors$category == WeekLinksDay[y,]$category),]$color))}\n             \n           ))\n    })\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_colors(colores) %>%\n      hc_plotOptions(column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\"), series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\"))))) %>%\n      hc_xAxis(type = \"category\", labels = list(formatter = JS(\"function () {formatted = this.value.length > 10? this.value.substring(0,10) + '...' : this.value;return formatted;}\"))) %>% \n      hc_yAxis(title = list(text = \"Link Clicks\")) %>% \n      hc_add_series_list(ds) %>% \n      hc_drilldown(series = drilldown) %>% \n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = TRUE) %>% \n      hc_add_theme(hc_theme_smpl())\n    \n    hc\n    \n  })\n\n  \n  output$BHPlotCategories1 <- renderHighchart({\n    WeekLinks <- DataArticlesBH[which(DataArticlesBH$date >= input$dateRange1[1] & DataArticlesBH$date <= input$dateRange1[2]),]\n    Catdfm <- as.data.frame(table(WeekLinks$category))\n    colnames(Catdfm) <- c(\"category\", \"Freq\")\n    \n    colores<- c('#B2182B','#D73027','#F46D43','#FDAE61','#FEE090','#FFFFD9','#EDF8B1','#C7E9B4','#7FCDBB','#41B6C4','#1D91C0','#225EA8','#253494','#081D58')\n    \n    ds <- lapply(1:nrow(Catdfm), function(x){\n      list(name = Catdfm[x,]$category, y = Catdfm[x,]$Freq, drilldown = as.character(Catdfm[x,]$category))\n    })\n    \n    drilldown <- lapply(1:nrow(WeekLinks), function(x){\n      \n      list(name = \"Link Clicks\" , id = as.character(Catdfm[x,]$category), \n           \n           data = lapply(1:nrow(WeekLinks[which(WeekLinks$category == Catdfm[x,]$category),]), function(y){\n             \n             WeekLinksCat <- WeekLinks[which(WeekLinks$category == Catdfm[x,]$category),]\n             WeekLinksCat <- WeekLinksCat[order(WeekLinksCat$link_clicks, decreasing = TRUE),]\n             \n             list(name = WeekLinksCat[y,]$headline, y = WeekLinksCat[y,]$link_clicks, url = WeekLinksCat[y,]$permalink)}\n             \n           ))\n    })\n    \n    colorCount = length(unique(DataArticles$category))\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"pie\") %>% \n      hc_colors(colores) %>%\n      hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), pie = list(borderColor = \"black\", dataLabels = list(formatter = JS(\"function () {formatted = this.point.name.length > 25? this.point.name.substring(0,25) + '...' : this.point.name;return formatted;}\"), style = list(width = \"100px\"))))%>%\n      hc_add_series(data = ds, name = \"Number of Articles\")%>% \n      hc_drilldown(series = drilldown) %>% \n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = FALSE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n \n  \n  output$BHPlotCategories2 <- renderHighchart({\n    \n    WeekLinks <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    Catdfm1 <- ddply(WeekLinks, \"category\", summarize, AvgCTR = mean(na.omit(ctr)), AvgIR = mean(na.omit(interaction_rate)), AvgReach = mean(na.omit(post_reach)), AvgLinkClicks = mean(na.omit(link_clicks)))\n    \n    Catdfm1$AvgCTR <- as.numeric(format(Catdfm1$AvgCTR*100, digits= 3))\n    Catdfm1$AvgIR <- as.numeric(format(Catdfm1$AvgIR*100, digits = 3))\n    Catdfm1$AvgReach <- as.numeric(formatC(Catdfm1$AvgReach, format = \"f\", digits = 2))\n    Catdfm1$AvgLinkClicks <- as.numeric(formatC(Catdfm1$AvgLinkClicks, format = \"f\", digits = 2))\n    Catdfm1 <- Catdfm1[order(Catdfm1$AvgLinkClicks, decreasing = TRUE),]\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_plotOptions(column = list(borderColor = \"black\")) %>% \n      hc_xAxis(categories = Catdfm1$category) %>% \n      hc_yAxis(title = \"\") %>% \n      hc_add_series(data = Catdfm1$AvgReach, name = \"Avg. Reach\") %>% \n      hc_add_series(data = Catdfm1$AvgLinkClicks, name = \"Avg. Link Clicks\") %>%\n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = TRUE) %>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n\n  \n  output$BHPlotCategories3 <- renderHighchart({\n    \n    WeekLinks <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    Catdfm1 <- ddply(WeekLinks, \"category\", summarize, AvgCTR = mean(na.omit(ctr)), AvgIR = mean(na.omit(interaction_rate)), AvgReach = mean(na.omit(post_reach)), AvgLinkClicks = mean(na.omit(link_clicks)))\n    \n    Catdfm1$AvgCTR <- as.numeric(format(Catdfm1$AvgCTR*100, digits= 2))\n    Catdfm1$AvgIR <- as.numeric(format(Catdfm1$AvgIR*100, digits = 2))\n    Catdfm1$AvgReach <- as.numeric(formatC(Catdfm1$AvgReach, format = \"f\", digits = 2))\n    Catdfm1$AvgLinkClicks <- as.numeric(formatC(Catdfm1$AvgLinkClicks, format = \"f\", digits = 2))\n    Catdfm1 <- Catdfm1[order(Catdfm1$AvgLinkClicks, decreasing = TRUE),]\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"column\") %>% \n      hc_plotOptions(column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>% \n      hc_xAxis(categories = Catdfm1$category) %>% \n      hc_yAxis(title = \"\",labels = list(format = \"{value} %\")) %>% \n      hc_add_series(data = Catdfm1$AvgCTR, name = \"Avg. CTR\") %>% \n      hc_add_series(data = Catdfm1$AvgIR, name = \"Avg. IR\") %>%\n      hc_exporting(enabled = FALSE)%>% \n      hc_legend(enabled = TRUE) %>%\n      hc_tooltip(pointFormat = \"{series.name}: <b>{point.y}</b><br/>\", valueSuffix = \"%\") %>%\n      hc_add_theme(hc_theme_smpl())\n    \n    hc\n    \n  })\n \n  \n  # 7. Reposts --------------------------------------------------------------------------------------------------------------------\n  \n  # 7.1. Reposts - We Are MitÃº ---------------------------------------------------------------------------------------------------------\n  \n  \n  \n  # 7.1.1. Articles ------------------------------------------------------------------------------------------------------------------\n  \n  output$PlotRepostsOverviewArticles1 <- renderHighchart({\n    \n    input$plot_repost_articles\n    isolate({ \n      \n      dates <- data.frame(created_time = DataArticles$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$repost == 1),\"created_time\"], num = rep(1,nrow(DataArticles[which(DataArticles$repost == 1),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$original == 1),\"created_time\"], num = rep(1,nrow(DataArticles[which(DataArticles$original == 1),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$chart_type_repost_articles) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$chart_type_repost_articles) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_repost_articles == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_repost_articles == \"area\" || input$chart_type_repost_articles == \"column\"){if(input$chart_stack_repost_articles != \"none\"){input$chart_stack_repost_articles}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_repost_articles, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$PlotRepostsOverviewArticles2 <- renderHighchart({\n    \n    input$plot_repost_articles2\n    isolate({ \n      \n      dates <- data.frame(created_time = DataArticles$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts_reach <- merge(dates, DataArticles[which(DataArticles$repost == 1),c(\"created_time\", \"post_reach\")], by = \"created_time\", all = TRUE)\n      reposts_reach <- as.xts(reposts_reach[,\"post_reach\"], order.by = reposts_reach[,\"created_time\"])\n      \n      originals_reach <- merge(dates, DataArticles[which(DataArticles$original == 1),c(\"created_time\", \"post_reach\")], by = \"created_time\", all = TRUE)\n      originals_reach <- as.xts(originals_reach[,\"post_reach\"], order.by = originals_reach[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>% \n        hc_add_series(originals_reach, name = \"Originals\", type = input$chart_type_repost_articles2) %>%\n        hc_add_series(reposts_reach, name = \"Reposts\", type = input$chart_type_repost_articles2) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_repost_articles2 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_repost_articles2 == \"area\" || input$chart_type_repost_articles2 == \"column\"){if(input$chart_stack_repost_articles2 != \"none\"){input$chart_stack_repost_articles2}}, dataGrouping = list(approximation = input$chart_avg_total_repost_articles2, enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_repost_articles2, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$PlotRepostsOverviewArticles3 <- renderHighchart({\n    \n    input$plot_repost_articles3\n    isolate({ \n    \n      dates <- data.frame(created_time = DataArticles$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts_clicks <- merge(dates, DataArticles[which(DataArticles$repost == 1),c(\"created_time\", \"link_clicks\")], by = \"created_time\", all = TRUE)\n      reposts_clicks <- as.xts(reposts_clicks[,\"link_clicks\"], order.by = reposts_clicks[,\"created_time\"])\n      \n      originals_clicks <- merge(dates, DataArticles[which(DataArticles$original == 1),c(\"created_time\", \"link_clicks\")], by = \"created_time\", all = TRUE)\n      originals_clicks <- as.xts(originals_clicks[,\"link_clicks\"], order.by = originals_clicks[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Link Clicks\")) %>% \n        hc_add_series(originals_clicks, name = \"Originals\", type = input$chart_type_repost_articles3) %>%\n        hc_add_series(reposts_clicks, name = \"Reposts\", type = input$chart_type_repost_articles3) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_repost_articles3 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_repost_articles3 == \"area\" || input$chart_type_repost_articles3 == \"column\"){if(input$chart_stack_repost_articles3 != \"none\"){input$chart_stack_repost_articles3}}, dataGrouping = list(approximation = input$chart_avg_total_repost_articles3, enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_repost_articles3, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  output$TableRepostsArticles1 = DT::renderDataTable({\n    \n    WeekLinks <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    \n    WeekLinksReposts <- WeekLinks[which(WeekLinks$repost == 1),]\n    \n    if(nrow(WeekLinksReposts) != 0){\n      \n    WeekLinksReposts <- WeekLinksReposts[order(WeekLinksReposts$link_clicks, decreasing = TRUE),]\n    \n    WeekLinksReposts$post_reach <- format( WeekLinksReposts$post_reach, big.mark = \",\")\n    WeekLinksReposts$link_clicks <- format( WeekLinksReposts$link_clicks, big.mark = \",\")\n    WeekLinksReposts$headline <- paste0(\"<a href='\", WeekLinksReposts$permalink,\"' target='_blank'>\", WeekLinksReposts$headline,\"</a>\")\n    WeekLinksReposts$ctr <- paste0(formatC(100 * WeekLinksReposts$ctr, format = \"f\", digits = 2), \"%\")\n    WeekLinksReposts$interaction_rate <- paste0(formatC(100 * WeekLinksReposts$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekLinksReposts[, input$show_vars_repost_articles1, drop = FALSE]\n    \n    }\n    \n    WeekLinksReposts[, input$show_vars_repost_articles1, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6)))))\n  \n  output$TitleRepostSelectedArticles1 <- renderHighchart({\n    \n    WeekLinks <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    \n    WeekLinksReposts <- WeekLinks[which(WeekLinks$repost == 1),]\n    WeekLinksReposts <- WeekLinksReposts[order(WeekLinksReposts$link_clicks, decreasing = TRUE),]\n    \n    s = input$TableRepostsArticles1_rows_selected\n    \n    if(length(s)){\n      \n      post_id <- WeekLinksReposts[s,]$status_id\n      \n      Headline <- DataArticles[which(DataArticles$status_id == post_id),]$headline\n      ShareText <- DataArticles[which(DataArticles$status_id == post_id),]$sharetext\n      \n      hc <- highchart() %>% \n        hc_title(text = Headline) %>%\n        hc_subtitle(text = ShareText) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    }\n  })\n  \n  output$PlotRepostSelectedArticles1 <- renderHighchart({\n\n    WeekLinks <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    WeekLinksReposts <- WeekLinks[which(WeekLinks$repost == 1),]\n    WeekLinksReposts <- WeekLinksReposts[order(WeekLinksReposts$link_clicks, decreasing = TRUE),]\n\n    s = input$TableRepostsArticles1_rows_selected\n\n    if(length(s)){\n\n      Post_url <- WeekLinksReposts[s,]$mitu_link\n      RepostsGroup <- DataArticles[which(DataArticles$mitu_link == Post_url),]\n\n      RepostsGroup$ctr <- as.numeric(format(RepostsGroup$ctr*100, digits= 2))\n      RepostsGroup$interaction_rate <- as.numeric(format(RepostsGroup$interaction_rate*100, digits = 2))\n\n      ds_ctr <- lapply(1:nrow(RepostsGroup), function(x){\n\n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$ctr, url = RepostsGroup[x,]$permalink)\n      })\n\n      ds_ir <- lapply(1:nrow(RepostsGroup), function(x){\n\n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$interaction_rate, url = RepostsGroup[x,]$permalink)\n      })\n\n      hc <- highchart() %>%\n        hc_chart(type = \"column\") %>%\n        hc_title(text = \"CTR & IR\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_yAxis(title = \"\",labels = list(format = \"{value} %\")) %>%\n        hc_add_series(data = ds_ctr, name = \"CTR\") %>%\n        hc_add_series(data = ds_ir, name = \"IR\") %>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = TRUE, floating = TRUE, align = \"right\", verticalAlign = \"top\") %>%\n        hc_tooltip(valueSuffix = \" %\") %>%\n        hc_add_theme(hc_theme_smpl())\n\n      hc\n\n    }\n\n  })\n  \n  output$PlotRepostSelectedArticles2 <- renderHighchart({\n    \n    WeekLinks <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    WeekLinksReposts <- WeekLinks[which(WeekLinks$repost == 1),]\n    WeekLinksReposts <- WeekLinksReposts[order(WeekLinksReposts$link_clicks, decreasing = TRUE),]\n    \n    s = input$TableRepostsArticles1_rows_selected\n    \n    if(length(s)){\n      \n      Post_url <- WeekLinksReposts[s,]$mitu_link\n      RepostsGroup <- DataArticles[which(DataArticles$mitu_link == Post_url),]\n      \n      dslc <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$post_reach, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>%\n        hc_title(text = \"Reach\") %>%\n        hc_chart(type = \"column\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_add_series(data = dslc, name = \"Reach\")%>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = FALSE)%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    }\n  })\n  \n  output$PlotRepostSelectedArticles3 <- renderHighchart({\n    \n    WeekLinks <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    WeekLinksReposts <- WeekLinks[which(WeekLinks$repost == 1),]\n    WeekLinksReposts <- WeekLinksReposts[order(WeekLinksReposts$link_clicks, decreasing = TRUE),]\n    \n    s = input$TableRepostsArticles1_rows_selected\n    \n    if(length(s)){\n      \n      Post_url <- WeekLinksReposts[s,]$mitu_link\n      RepostsGroup <- DataArticles[which(DataArticles$mitu_link == Post_url),]\n      \n      dslc <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$link_clicks, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>% \n        hc_title(text = \"Link Clicks\") %>%\n        hc_chart(type = \"column\") %>% \n        hc_plotOptions(borderColor = \"black\", series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>% \n        hc_xAxis(type = \"category\") %>% \n        hc_add_series(data = dslc, name = \"Link Clicks\")%>%\n        hc_exporting(enabled = FALSE)%>% \n        hc_legend(enabled = FALSE)%>% \n        hc_add_theme(hc_theme_smpl())\n      hc\n    }\n  })\n  \n  output$picture_article <- renderText({\n    \n    WeekLinks <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    WeekLinksReposts <- WeekLinks[which(WeekLinks$repost == 1),]\n    WeekLinksReposts <- WeekLinksReposts[order(WeekLinksReposts$link_clicks, decreasing = TRUE),]\n    \n    s = input$TableRepostsArticles1_rows_selected\n    \n    if(length(s)){\n      image_url <- WeekLinksReposts[s,]$full_picture\n      image_text <- paste(\"<img src ='\", image_url,\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"100\" width=\"100\">')\n      image_text\n    }\n    \n  })\n  \n  output$TableRepostSelectedArticles1 = DT::renderDataTable({\n    \n    WeekLinks <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    WeekLinksReposts <- WeekLinks[which(WeekLinks$repost == 1),]\n    WeekLinksReposts <- WeekLinksReposts[order(WeekLinksReposts$link_clicks, decreasing = TRUE),]\n    \n    s = input$TableRepostsArticles1_rows_selected\n    \n    if(length(s)){\n      \n      Post_url <- WeekLinksReposts[s,]$mitu_link\n      RepostsGroup <- DataArticles[which(DataArticles$mitu_link == Post_url),]\n      \n      RepostsGroup$post_reach <- format( RepostsGroup$post_reach, big.mark = \",\")\n      RepostsGroup$link_clicks <- format( RepostsGroup$link_clicks, big.mark = \",\")\n      RepostsGroup$headline <- paste0(\"<a href='\", RepostsGroup$permalink,\"' target='_blank'>\", RepostsGroup$headline,\"</a>\")\n      RepostsGroup$ctr <- paste0(formatC(100 * RepostsGroup$ctr, format = \"f\", digits = 2), \"%\")\n      RepostsGroup$interaction_rate <- paste0(formatC(100 * RepostsGroup$interaction_rate, format = \"f\", digits = 2), \"%\")\n      \n      RepostsGroup[, input$show_vars_repost_selected_articles1, drop = FALSE]\n    }\n  \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6)))))\n  \n  # 7.1.2. Videos --------------------------------------------------------------------------------------------------------------------\n  \n  output$PlotRepostsOverviewVideos1 <- renderHighchart({\n    \n    input$plot_repost_videos\n    isolate({ \n      \n      dates <- data.frame(created_time = DataVideos$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$repost == 1 & DataVideos$video_meme == 0),\"created_time\"], num = rep(1,nrow(DataVideos[which(DataVideos$repost == 1 & DataVideos$video_meme == 0),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$original == 1 & DataVideos$video_meme == 0),\"created_time\"], num = rep(1,nrow(DataVideos[which(DataVideos$original == 1 & DataVideos$video_meme == 0),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$chart_type_repost_videos) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$chart_type_repost_videos) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_repost_videos == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_repost_videos == \"area\" || input$chart_type_repost_videos == \"column\"){if(input$chart_stack_repost_videos != \"none\"){input$chart_stack_repost_videos}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_repost_videos, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$PlotRepostsOverviewVideos2 <- renderHighchart({\n    \n    input$plot_repost_videos2\n    isolate({ \n      \n      dates <- data.frame(created_time = DataVideos$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts_reach <- merge(dates, DataVideos[which(DataVideos$repost == 1 & DataVideos$video_meme == 0),c(\"created_time\", \"post_reach\")], by = \"created_time\", all = TRUE)\n      reposts_reach <- as.xts(reposts_reach[,\"post_reach\"], order.by = reposts_reach[,\"created_time\"])\n      \n      originals_reach <- merge(dates, DataVideos[which(DataVideos$original == 1 & DataVideos$video_meme == 0),c(\"created_time\", \"post_reach\")], by = \"created_time\", all = TRUE)\n      originals_reach <- as.xts(originals_reach[,\"post_reach\"], order.by = originals_reach[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>% \n        hc_add_series(originals_reach, name = \"Originals\", type = input$chart_type_repost_videos2) %>%\n        hc_add_series(reposts_reach, name = \"Reposts\", type = input$chart_type_repost_videos2) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_repost_videos2 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_repost_videos2 == \"area\" || input$chart_type_repost_videos2 == \"column\"){if(input$chart_stack_repost_videos2 != \"none\"){input$chart_stack_repost_videos2}}, dataGrouping = list(approximation = input$chart_avg_total_repost_videos2, enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_repost_videos2, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$PlotRepostsOverviewVideos3 <- renderHighchart({\n    \n    input$plot_repost_videos3\n    isolate({ \n      \n      dates <- data.frame(created_time = DataVideos$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts_views <- merge(dates, DataVideos[which(DataVideos$repost == 1 & DataVideos$video_meme == 0),c(\"created_time\", \"post_video_views\")], by = \"created_time\", all = TRUE)\n      reposts_views <- as.xts(reposts_views[,\"post_video_views\"], order.by = reposts_views[,\"created_time\"])\n      \n      originals_views <- merge(dates, DataVideos[which(DataVideos$original == 1 & DataVideos$video_meme == 0),c(\"created_time\", \"post_video_views\")], by = \"created_time\", all = TRUE)\n      originals_views <- as.xts(originals_views[,\"post_video_views\"], order.by = originals_views[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Video Views\")) %>% \n        hc_add_series(originals_views, name = \"Originals\", type = input$chart_type_repost_videos3) %>%\n        hc_add_series(reposts_views, name = \"Reposts\", type = input$chart_type_repost_videos3) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_repost_videos3 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_repost_videos3 == \"area\" || input$chart_type_repost_videos3 == \"column\"){if(input$chart_stack_repost_videos3 != \"none\"){input$chart_stack_repost_videos3}}, dataGrouping = list(approximation = input$chart_avg_total_repost_videos3, enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_repost_videos3, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$TableRepostsVideos1 = DT::renderDataTable({\n    \n    WeekVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 0),]\n    \n    WeekVideosReposts <- WeekVideos[which(WeekVideos$repost == 1),]\n    \n    if(nrow(WeekVideosReposts) != 0){\n      \n      WeekVideosReposts <- WeekVideosReposts[order(WeekVideosReposts$post_video_views, decreasing = TRUE),]\n      \n      WeekVideosReposts$post_reach <- format( WeekVideosReposts$post_reach, big.mark = \",\")\n      WeekVideosReposts$post_video_views <- format( WeekVideosReposts$post_video_views, big.mark = \",\")\n      WeekVideosReposts$sharetext <- paste0(\"<a href='\", WeekVideosReposts$permalink,\"' target='_blank'>\", WeekVideosReposts$sharetext,\"</a>\")\n      WeekVideosReposts$interaction_rate <- paste0(formatC(100 * WeekVideosReposts$interaction_rate, format = \"f\", digits = 2), \"%\")\n      \n      WeekVideosReposts[, input$show_vars_repost_videos1, drop = FALSE]\n      \n    }\n    \n    WeekVideosReposts[, input$show_vars_repost_videos1, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:5)))))\n  \n  output$TitleRepostSelectedVideos1 <- renderHighchart({\n    \n    WeekVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 0),]\n    WeekVideosReposts <- WeekVideos[which(WeekVideos$repost == 1),]\n    WeekVideosReposts <- WeekVideosReposts[order(WeekVideosReposts$post_video_views, decreasing = TRUE),]\n    \n    s = input$TableRepostsVideos1_rows_selected\n    \n    if(length(s)){\n      \n      post_id <- WeekVideosReposts[s,]$status_id\n      \n      ShareText <- DataVideos[which(DataVideos$status_id == post_id),]$sharetext\n      # ImageText <- DataPhotos[which(DataPhotos$status_id == post_id),]$image_text_py\n      \n      hc <- highchart() %>% \n        hc_title(text = ShareText) %>%\n        # hc_subtitle(text = ImageText) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    }\n  })\n  \n  output$PlotRepostSelectedVideos1 <- renderHighchart({\n    \n    WeekVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 0),]\n    WeekVideosReposts <- WeekVideos[which(WeekVideos$repost == 1),]\n    WeekVideosReposts <- WeekVideosReposts[order(WeekVideosReposts$post_video_views, decreasing = TRUE),]\n    \n    s = input$TableRepostsVideos1_rows_selected\n    \n    if(length(s)){\n      \n      Video_text <- WeekVideosReposts[s,]$video_repost_sharetext\n      RepostsGroup <- DataVideos[which(DataVideos$video_repost_sharetext == Video_text),]\n      \n      # RepostsGroup$share_rate <- as.numeric(format(RepostsGroup$ctr*100, digits= 2))\n      RepostsGroup$interaction_rate <- as.numeric(format(RepostsGroup$interaction_rate*100, digits = 2))\n      \n      # ds_ctr <- lapply(1:nrow(RepostsGroup), function(x){\n      #   \n      #   list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$ctr, url = RepostsGroup[x,]$permalink)\n      # })\n      \n      ds_ir <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$interaction_rate, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>%\n        hc_chart(type = \"column\") %>%\n        hc_title(text = \"TOCA CAMBIALO\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_yAxis(title = \"\",labels = list(format = \"{value} %\")) %>%\n        # hc_add_series(data = ds_ctr, name = \"CTR\") %>%\n        hc_add_series(data = ds_ir, name = \"IR\") %>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = TRUE, floating = TRUE, align = \"right\", verticalAlign = \"top\") %>%\n        hc_tooltip(valueSuffix = \" %\") %>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$PlotRepostSelectedVideos2 <- renderHighchart({\n    \n    WeekVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 0),]\n    WeekVideosReposts <- WeekVideos[which(WeekVideos$repost == 1),]\n    WeekVideosReposts <- WeekVideosReposts[order(WeekVideosReposts$post_video_views, decreasing = TRUE),]\n    \n    s = input$TableRepostsVideos1_rows_selected\n    \n    if(length(s)){\n      \n      Video_text <- WeekVideosReposts[s,]$video_repost_sharetext\n      RepostsGroup <- DataVideos[which(DataVideos$video_repost_sharetext == Video_text),]\n      \n      dslc <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$post_reach, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>%\n        hc_title(text = \"Reach\") %>%\n        hc_chart(type = \"column\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_add_series(data = dslc, name = \"Reach\")%>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = FALSE)%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    }\n  })\n  \n  output$PlotRepostSelectedVideos3 <- renderHighchart({\n    \n    WeekVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 0),]\n    WeekVideosReposts <- WeekVideos[which(WeekVideos$repost == 1),]\n    WeekVideosReposts <- WeekVideosReposts[order(WeekVideosReposts$post_video_views, decreasing = TRUE),]\n    \n    s = input$TableRepostsVideos1_rows_selected\n    \n    if(length(s)){\n      \n      Video_text <- WeekVideosReposts[s,]$video_repost_sharetext\n      RepostsGroup <- DataVideos[which(DataVideos$video_repost_sharetext == Video_text),]\n      \n      dslc <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$post_video_views, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>%\n        hc_title(text = \"Video Views\") %>%\n        hc_chart(type = \"column\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_add_series(data = dslc, name = \"Video Views\")%>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = FALSE)%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    }\n  })\n  \n  output$picture_video <- renderText({\n    \n    WeekVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 0),]\n    \n    WeekVideosReposts <- WeekVideos[which(WeekVideos$repost == 1),]\n    WeekVideosReposts <- WeekVideosReposts[order(WeekVideosReposts$post_video_views, decreasing = TRUE),]\n    \n    s = input$TableRepostsVideos1_rows_selected\n    \n    if(length(s)){\n      \n      image_url <- WeekVideosReposts[s,]$full_picture\n      image_text <- paste(\"<img src ='\", image_url,\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"100\" width=\"100\">')\n      image_text\n    }\n    \n  })\n  \n  output$TableRepostSelectedVideos1 = DT::renderDataTable({\n    \n    WeekVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 0),]\n    WeekVideosReposts <- WeekVideos[which(WeekVideos$repost == 1),]\n    WeekVideosReposts <- WeekVideosReposts[order(WeekVideosReposts$post_video_views, decreasing = TRUE),]\n    \n    s = input$TableRepostsVideos1_rows_selected\n    \n    if(length(s)){\n      \n      Video_text <- WeekVideosReposts[s,]$video_repost_sharetext\n      RepostsGroup <- DataVideos[which(DataVideos$video_repost_sharetext == Video_text),]\n      \n      RepostsGroup$post_reach <- format( RepostsGroup$post_reach, big.mark = \",\")\n      RepostsGroup$post_video_views <- format( RepostsGroup$post_video_views, big.mark = \",\")\n      RepostsGroup$sharetext <- paste0(\"<a href='\", RepostsGroup$permalink,\"' target='_blank'>\", RepostsGroup$sharetext,\"</a>\")\n      RepostsGroup$interaction_rate <- paste0(formatC(100 * RepostsGroup$interaction_rate, format = \"f\", digits = 2), \"%\")\n      \n      RepostsGroup[, input$show_vars_repost_selected_videos1, drop = FALSE]\n    }\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:5)))))\n  \n  # 7.1.3. Video Memes ---------------------------------------------------------------------------------------------------------------\n  \n  output$PlotRepostsOverviewVideoMemes1 <- renderHighchart({\n    \n    input$plot_repost_video_memes\n    isolate({ \n      \n      dates <- data.frame(created_time = DataVideos$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$repost == 1 & DataVideos$video_meme == 1),\"created_time\"], num = rep(1,nrow(DataVideos[which(DataVideos$repost == 1 & DataVideos$video_meme == 1),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$original == 1 & DataVideos$video_meme == 1),\"created_time\"], num = rep(1,nrow(DataVideos[which(DataVideos$original == 1 & DataVideos$video_meme == 1),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$chart_type_repost_video_memes) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$chart_type_repost_video_memes) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_repost_video_memes == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_repost_video_memes == \"area\" || input$chart_type_repost_video_memes == \"column\"){if(input$chart_stack_repost_video_memes != \"none\"){input$chart_stack_repost_video_memes}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_repost_video_memes, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$PlotRepostsOverviewVideoMemes2 <- renderHighchart({\n    \n    input$plot_repost_video_memes2\n    isolate({ \n      \n      dates <- data.frame(created_time = DataVideos$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts_reach <- merge(dates, DataVideos[which(DataVideos$repost == 1 & DataVideos$video_meme == 1),c(\"created_time\", \"post_reach\")], by = \"created_time\", all = TRUE)\n      reposts_reach <- as.xts(reposts_reach[,\"post_reach\"], order.by = reposts_reach[,\"created_time\"])\n      \n      originals_reach <- merge(dates, DataVideos[which(DataVideos$original == 1 & DataVideos$video_meme == 1),c(\"created_time\", \"post_reach\")], by = \"created_time\", all = TRUE)\n      originals_reach <- as.xts(originals_reach[,\"post_reach\"], order.by = originals_reach[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>% \n        hc_add_series(originals_reach, name = \"Originals\", type = input$chart_type_repost_video_memes2) %>%\n        hc_add_series(reposts_reach, name = \"Reposts\", type = input$chart_type_repost_video_memes2) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_repost_video_memes2 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_repost_video_memes2 == \"area\" || input$chart_type_repost_video_memes2 == \"column\"){if(input$chart_stack_repost_video_memes2 != \"none\"){input$chart_stack_repost_video_memes2}}, dataGrouping = list(approximation = input$chart_avg_total_repost_video_memes2, enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_repost_video_memes2, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$PlotRepostsOverviewVideoMemes3 <- renderHighchart({\n    \n    input$plot_repost_video_memes3\n    isolate({ \n      \n      dates <- data.frame(created_time = DataVideos$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts_views <- merge(dates, DataVideos[which(DataVideos$repost == 1 & DataVideos$video_meme == 1),c(\"created_time\", \"post_video_views\")], by = \"created_time\", all = TRUE)\n      reposts_views <- as.xts(reposts_views[,\"post_video_views\"], order.by = reposts_views[,\"created_time\"])\n      \n      originals_views <- merge(dates, DataVideos[which(DataVideos$original == 1 & DataVideos$video_meme == 1),c(\"created_time\", \"post_video_views\")], by = \"created_time\", all = TRUE)\n      originals_views <- as.xts(originals_views[,\"post_video_views\"], order.by = originals_views[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Video Views\")) %>% \n        hc_add_series(originals_views, name = \"Originals\", type = input$chart_type_repost_video_memes3) %>%\n        hc_add_series(reposts_views, name = \"Reposts\", type = input$chart_type_repost_video_memes3) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_repost_video_memes3 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_repost_video_memes3 == \"area\" || input$chart_type_repost_video_memes3 == \"column\"){if(input$chart_stack_repost_video_memes3 != \"none\"){input$chart_stack_repost_video_memes3}}, dataGrouping = list(approximation = input$chart_avg_total_repost_video_memes3, enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_repost_video_memes3, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$TableRepostsVideoMemes1 = DT::renderDataTable({\n    \n    WeekVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 1),]\n    \n    WeekVideosReposts <- WeekVideos[which(WeekVideos$repost == 1),]\n    \n    if(nrow(WeekVideosReposts) != 0){\n      \n    WeekVideosReposts <- WeekVideosReposts[order(WeekVideosReposts$post_video_views, decreasing = TRUE),]\n    \n    WeekVideosReposts$post_reach <- format( WeekVideosReposts$post_reach, big.mark = \",\")\n    WeekVideosReposts$post_video_views <- format( WeekVideosReposts$post_video_views, big.mark = \",\")\n    WeekVideosReposts$sharetext <- paste0(\"<a href='\", WeekVideosReposts$permalink,\"' target='_blank'>\", WeekVideosReposts$sharetext,\"</a>\")\n    WeekVideosReposts$interaction_rate <- paste0(formatC(100 * WeekVideosReposts$interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    WeekVideosReposts[, input$show_vars_repost_videos1, drop = FALSE]\n    \n    }\n    \n    WeekVideosReposts[, input$show_vars_repost_videos1, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:5)))))\n  \n  output$TitleRepostSelectedVideoMemes1 <- renderHighchart({\n    \n    WeekVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 1),]\n    WeekVideosReposts <- WeekVideos[which(WeekVideos$repost == 1),]\n    WeekVideosReposts <- WeekVideosReposts[order(WeekVideosReposts$post_video_views, decreasing = TRUE),]\n    \n    s = input$TableRepostsVideoMemes1_rows_selected\n    \n    if(length(s)){\n      \n      post_id <- WeekVideosReposts[s,]$status_id\n      \n      ShareText <- DataVideos[which(DataVideos$status_id == post_id),]$sharetext\n      # ImageText <- DataPhotos[which(DataPhotos$status_id == post_id),]$image_text_py\n      \n      hc <- highchart() %>% \n        hc_title(text = ShareText) %>%\n        # hc_subtitle(text = ImageText) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    }\n  })\n  \n  output$PlotRepostSelectedVideoMemes1 <- renderHighchart({\n    \n    WeekVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 1),]\n    WeekVideosReposts <- WeekVideos[which(WeekVideos$repost == 1),]\n    WeekVideosReposts <- WeekVideosReposts[order(WeekVideosReposts$post_video_views, decreasing = TRUE),]\n    \n    s = input$TableRepostsVideoMemes1_rows_selected\n    \n    if(length(s)){\n      \n      Video_text <- WeekVideosReposts[s,]$video_repost_sharetext\n      RepostsGroup <- DataVideos[which(DataVideos$video_repost_sharetext == Video_text),]\n      \n      # RepostsGroup$share_rate <- as.numeric(format(RepostsGroup$ctr*100, digits= 2))\n      RepostsGroup$interaction_rate <- as.numeric(format(RepostsGroup$interaction_rate*100, digits = 2))\n      \n      # ds_ctr <- lapply(1:nrow(RepostsGroup), function(x){\n      #   \n      #   list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$ctr, url = RepostsGroup[x,]$permalink)\n      # })\n      \n      ds_ir <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$interaction_rate, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>%\n        hc_chart(type = \"column\") %>%\n        hc_title(text = \"TOCA CAMBIALO\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_yAxis(title = \"\",labels = list(format = \"{value} %\")) %>%\n        # hc_add_series(data = ds_ctr, name = \"CTR\") %>%\n        hc_add_series(data = ds_ir, name = \"IR\") %>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = TRUE, floating = TRUE, align = \"right\", verticalAlign = \"top\") %>%\n        hc_tooltip(valueSuffix = \" %\") %>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$PlotRepostSelectedVideoMemes2 <- renderHighchart({\n    \n    WeekVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 1),]\n    WeekVideosReposts <- WeekVideos[which(WeekVideos$repost == 1),]\n    WeekVideosReposts <- WeekVideosReposts[order(WeekVideosReposts$post_video_views, decreasing = TRUE),]\n    \n    s = input$TableRepostsVideoMemes1_rows_selected\n    \n    if(length(s)){\n      \n      Video_text <- WeekVideosReposts[s,]$video_repost_sharetext\n      RepostsGroup <- DataVideos[which(DataVideos$video_repost_sharetext == Video_text),]\n      \n      dslc <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$post_reach, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>%\n        hc_title(text = \"Reach\") %>%\n        hc_chart(type = \"column\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_add_series(data = dslc, name = \"Reach\")%>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = FALSE)%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    }\n  })\n  \n  output$PlotRepostSelectedVideoMemes3 <- renderHighchart({\n    \n    WeekVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 1),]\n    WeekVideosReposts <- WeekVideos[which(WeekVideos$repost == 1),]\n    WeekVideosReposts <- WeekVideosReposts[order(WeekVideosReposts$post_video_views, decreasing = TRUE),]\n    \n    s = input$TableRepostsVideoMemes1_rows_selected\n    \n    if(length(s)){\n      \n      Video_text <- WeekVideosReposts[s,]$video_repost_sharetext\n      RepostsGroup <- DataVideos[which(DataVideos$video_repost_sharetext == Video_text),]\n      \n      dslc <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$post_video_views, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>%\n        hc_title(text = \"Video Views\") %>%\n        hc_chart(type = \"column\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_add_series(data = dslc, name = \"Video Views\")%>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = FALSE)%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    }\n  })\n  \n  output$picture_video_meme <- renderText({\n    \n    WeekVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 1),]\n    \n    WeekVideosReposts <- WeekVideos[which(WeekVideos$repost == 1),]\n    WeekVideosReposts <- WeekVideosReposts[order(WeekVideosReposts$post_video_views, decreasing = TRUE),]\n    \n    s = input$TableRepostsVideoMemes1_rows_selected\n    \n    if(length(s)){\n      \n      image_url <- WeekVideosReposts[s,]$full_picture\n      image_text <- paste(\"<img src ='\", image_url,\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"100\" width=\"100\">')\n      image_text\n    }\n    \n  })\n  \n  output$TableRepostSelectedVideoMemes1 = DT::renderDataTable({\n    \n    WeekVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2] & DataVideos$video_meme == 1),]\n    WeekVideosReposts <- WeekVideos[which(WeekVideos$repost == 1),]\n    WeekVideosReposts <- WeekVideosReposts[order(WeekVideosReposts$post_video_views, decreasing = TRUE),]\n    \n    s = input$TableRepostsVideoMemes1_rows_selected\n    \n    if(length(s)){\n      \n      Video_text <- WeekVideosReposts[s,]$video_repost_sharetext\n      RepostsGroup <- DataVideos[which(DataVideos$video_repost_sharetext == Video_text),]\n      \n      RepostsGroup$post_reach <- format( RepostsGroup$post_reach, big.mark = \",\")\n      RepostsGroup$post_video_views <- format( RepostsGroup$post_video_views, big.mark = \",\")\n      RepostsGroup$sharetext <- paste0(\"<a href='\", RepostsGroup$permalink,\"' target='_blank'>\", RepostsGroup$sharetext,\"</a>\")\n      RepostsGroup$interaction_rate <- paste0(formatC(100 * RepostsGroup$interaction_rate, format = \"f\", digits = 2), \"%\")\n      \n      RepostsGroup[, input$show_vars_repost_selected_video_memes1, drop = FALSE]\n    }\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:5)))))\n  \n  # 7.1.4. Memes ---------------------------------------------------------------------------------------------------------------------\n  \n  output$PlotRepostsOverviewMemes1 <- renderHighchart({\n    \n    input$plot_repost_memes\n    isolate({ \n      \n      dates <- data.frame(created_time = DataPhotos$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      reposts <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$repost == 1),\"created_time\"], num = rep(1,nrow(DataPhotos[which(DataPhotos$repost == 1),]))), by = \"created_time\", all = TRUE)\n      reposts <- as.xts(reposts[,\"num\"], order.by = reposts[,\"created_time\"])\n      \n      originals <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$original == 1),\"created_time\"], num = rep(1,nrow(DataPhotos[which(DataPhotos$original == 1),]))), by = \"created_time\", all = TRUE)\n      originals <- as.xts(originals[,\"num\"], order.by = originals[,\"created_time\"])\n      \n      colores<- c('#D55200', '#2580B9')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Number of Posts\")) %>% \n        hc_add_series(originals, name = \"Originals\", type = input$chart_type_repost_memes) %>%\n        hc_add_series(reposts, name = \"Reposts\", type = input$chart_type_repost_memes) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_repost_memes == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_repost_memes == \"area\" || input$chart_type_repost_memes == \"column\"){if(input$chart_stack_repost_memes != \"none\"){input$chart_stack_repost_memes}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_repost_memes, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$PlotRepostsOverviewMemes2 <- renderHighchart({\n    \n    input$plot_repost_memes2\n    isolate({\n\n      dates <- data.frame(created_time = DataPhotos$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n\n      reposts_reach <- merge(dates, DataPhotos[which(DataPhotos$repost == 1),c(\"created_time\", \"post_reach\")], by = \"created_time\", all = TRUE)\n      reposts_reach <- as.xts(reposts_reach[,\"post_reach\"], order.by = reposts_reach[,\"created_time\"])\n\n      originals_reach <- merge(dates, DataPhotos[which(DataPhotos$original == 1),c(\"created_time\", \"post_reach\")], by = \"created_time\", all = TRUE)\n      originals_reach <- as.xts(originals_reach[,\"post_reach\"], order.by = originals_reach[,\"created_time\"])\n\n      colores<- c('#D55200', '#2580B9')\n\n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>%\n        hc_add_series(originals_reach, name = \"Originals\", type = input$chart_type_repost_memes2) %>%\n        hc_add_series(reposts_reach, name = \"Reposts\", type = input$chart_type_repost_memes2) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_repost_memes2 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_repost_memes2 == \"area\" || input$chart_type_repost_memes2 == \"column\"){if(input$chart_stack_repost_memes2 != \"none\"){input$chart_stack_repost_memes2}}, dataGrouping = list(approximation = input$chart_avg_total_repost_memes2, enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_repost_memes2, list(1)))))) %>%\n        hc_tooltip(valueDecimals = 0) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n\n    })\n  })\n  \n  output$TableRepostsMemes1 = DT::renderDataTable({\n    \n    WeekPhotos <- DataPhotos[which(DataPhotos$date >= input$dateRange1[1] & DataPhotos$date <= input$dateRange1[2]),]\n    \n    WeekPhotosReposts <- WeekPhotos[which(WeekPhotos$repost == 1),]\n    \n    if(nrow(WeekPhotosReposts) != 0){\n      \n    WeekPhotosReposts <- WeekPhotosReposts[order(WeekPhotosReposts$post_reach, decreasing = TRUE),]\n    \n    WeekPhotosReposts$post_reach <- format( WeekPhotosReposts$post_reach, big.mark = \",\")\n    WeekPhotosReposts$total_comments <- format( WeekPhotosReposts$total_comments, big.mark = \",\")\n    WeekPhotosReposts$total_likes <- format( WeekPhotosReposts$total_likes, big.mark = \",\")\n    WeekPhotosReposts$total_shares <- format( WeekPhotosReposts$total_shares, big.mark = \",\")\n    WeekPhotosReposts$sharetext <- paste0(\"<a href='\", WeekPhotosReposts$permalink,\"' target='_blank'>\", WeekPhotosReposts$sharetext,\"</a>\")\n  \n    WeekPhotosReposts[, input$show_vars_repost_memes1, drop = FALSE]\n    \n    }\n    \n    WeekPhotosReposts[, input$show_vars_repost_memes1, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6)))))\n  \n  output$TitleRepostSelectedMemes1 <- renderHighchart({\n    \n    WeekPhotos <- DataPhotos[which(DataPhotos$date >= input$dateRange1[1] & DataPhotos$date <= input$dateRange1[2]),]\n    \n    WeekPhotosReposts <- WeekPhotos[which(WeekPhotos$repost == 1),]\n    WeekPhotosReposts <- WeekPhotosReposts[order(WeekPhotosReposts$post_reach, decreasing = TRUE),]\n    \n    s = input$TableRepostsMemes1_rows_selected\n    \n    if(length(s)){\n      \n      post_id <- WeekPhotosReposts[s,]$status_id\n      \n      ShareText <- DataPhotos[which(DataPhotos$status_id == post_id),]$sharetext\n      ImageText <- DataPhotos[which(DataPhotos$status_id == post_id),]$image_text_py\n      \n      hc <- highchart() %>% \n        hc_title(text = ShareText) %>%\n        hc_subtitle(text = ImageText) %>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    }\n  })\n  \n  output$PlotRepostSelectedMemes1 <- renderHighchart({\n    \n    WeekPhotos <- DataPhotos[which(DataPhotos$date >= input$dateRange1[1] & DataPhotos$date <= input$dateRange1[2]),]\n    WeekPhotosReposts <- WeekPhotos[which(WeekPhotos$repost == 1),]\n    WeekPhotosReposts <- WeekPhotosReposts[order(WeekPhotosReposts$post_reach, decreasing = TRUE),]\n    \n    s = input$TableRepostsMemes1_rows_selected\n    \n    if(length(s)){\n      \n      Post_text <- WeekPhotosReposts[s,]$image_text_py\n      RepostsGroup <- DataPhotos[which(DataPhotos$image_text_py == Post_text),]\n      \n      # RepostsGroup$share_rate <- as.numeric(format(RepostsGroup$ctr*100, digits= 2))\n      RepostsGroup$interaction_rate <- as.numeric(format(RepostsGroup$interaction_rate*100, digits = 2))\n      \n      # ds_ctr <- lapply(1:nrow(RepostsGroup), function(x){\n      #   \n      #   list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$ctr, url = RepostsGroup[x,]$permalink)\n      # })\n      \n      ds_ir <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$interaction_rate, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>%\n        hc_chart(type = \"column\") %>%\n        hc_title(text = \"TOCA CAMBIALO\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_yAxis(title = \"\",labels = list(format = \"{value} %\")) %>%\n        # hc_add_series(data = ds_ctr, name = \"CTR\") %>%\n        hc_add_series(data = ds_ir, name = \"IR\") %>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = TRUE, floating = TRUE, align = \"right\", verticalAlign = \"top\") %>%\n        hc_tooltip(valueSuffix = \" %\") %>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$PlotRepostSelectedMemes2 <- renderHighchart({\n    \n    WeekPhotos <- DataPhotos[which(DataPhotos$date >= input$dateRange1[1] & DataPhotos$date <= input$dateRange1[2]),]\n    WeekPhotosReposts <- WeekPhotos[which(WeekPhotos$repost == 1),]\n    WeekPhotosReposts <- WeekPhotosReposts[order(WeekPhotosReposts$post_reach, decreasing = TRUE),]\n    \n    s = input$TableRepostsMemes1_rows_selected\n    \n    if(length(s)){\n      \n      Post_text <- WeekPhotosReposts[s,]$image_text_py\n      RepostsGroup <- DataPhotos[which(DataPhotos$image_text_py == Post_text),]\n      \n      dslc <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$post_reach, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>%\n        hc_title(text = \"Reach\") %>%\n        hc_chart(type = \"column\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_add_series(data = dslc, name = \"Reach\")%>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = FALSE)%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    }\n  })\n  \n  output$picture_meme <- renderText({\n    \n    WeekPhotos <- DataPhotos[which(DataPhotos$date >= input$dateRange1[1] & DataPhotos$date <= input$dateRange1[2]),]\n    WeekPhotosReposts <- WeekPhotos[which(WeekPhotos$repost == 1),]\n    WeekPhotosReposts <- WeekPhotosReposts[order(WeekPhotosReposts$post_reach, decreasing = TRUE),]\n    \n    s = input$TableRepostsMemes1_rows_selected\n    \n    if(length(s)){\n      \n      image_url <- WeekPhotosReposts[s,]$full_picture\n      image_text <- paste(\"<img src ='\", image_url,\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"100\" width=\"100\">')\n      image_text\n    }\n    \n  })\n  \n  output$TableRepostSelectedMemes1 = DT::renderDataTable({\n    \n    WeekPhotos <- DataPhotos[which(DataPhotos$date >= input$dateRange1[1] & DataPhotos$date <= input$dateRange1[2]),]\n    WeekPhotosReposts <- WeekPhotos[which(WeekPhotos$repost == 1),]\n    WeekPhotosReposts <- WeekPhotosReposts[order(WeekPhotosReposts$post_reach, decreasing = TRUE),]\n    \n    s = input$TableRepostsMemes1_rows_selected\n    \n    if(length(s)){\n      \n      Post_text <- WeekPhotosReposts[s,]$image_text_py\n      RepostsGroup <- DataPhotos[which(DataPhotos$image_text_py == Post_text),]\n      \n      RepostsGroup$post_reach <- format( RepostsGroup$post_reach, big.mark = \",\")\n      RepostsGroup$total_comments <- format( RepostsGroup$total_comments, big.mark = \",\")\n      RepostsGroup$total_likes <- format( RepostsGroup$total_likes, big.mark = \",\")\n      RepostsGroup$total_shares <- format( RepostsGroup$total_shares, big.mark = \",\")\n      RepostsGroup$sharetext <- paste0(\"<a href='\", RepostsGroup$permalink,\"' target='_blank'>\", RepostsGroup$sharetext,\"</a>\")\n      \n      RepostsGroup[, input$show_vars_repost_selected_memes1, drop = FALSE]\n    }\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(1:6)))))\n  \n  # ---------------------------------------------------------------------------------------------------------------------\n  \n  \n  # 11. Sprint ---------------------------------------------------------------------------------------------------------------------\n  \n  output$infobox1 <- renderInfoBox({\n    \n    WeekLinks <- DataArticles[which(DataArticles$date >= input$dateRange1[1] & DataArticles$date <= input$dateRange1[2]),]\n    \n    actual_pageviews <- mean(WeekLinks$link_clicks)\n    \n    if(actual_pageviews > sprint_benchs[1]){\n      \n      infoBox(\"Actual\",formatC(actual_pageviews, format = \"f\", digits = 0, big.mark = \",\"), width = 12, color = \"olive\", icon = icon(\"fa fa-check\"), fill = TRUE)\n      \n    }\n    \n    else {\n      \n      infoBox(\"Actual\",formatC(actual_pageviews, format = \"f\", digits = 0, big.mark = \",\"), width = 12, color = \"red\", icon = icon(\"fa fa-times\"), fill = TRUE)\n      \n    }\n    \n  })\n  \n  output$infobox2 <- renderInfoBox({\n    \n    WeekPhotos <- DataPhotos[which(DataPhotos$date >= input$dateRange1[1] & DataPhotos$date <= input$dateRange1[2]),]\n    \n    actual_photoviews <- mean(WeekPhotos$post_reach)\n    \n    if(actual_photoviews > sprint_benchs[2]){\n      \n      infoBox(\"Actual\",formatC(actual_photoviews, format = \"f\", digits = 0, big.mark = \",\"), width = 12, color = \"olive\", icon = icon(\"fa fa-check\"), fill = TRUE)\n      \n    }\n    \n    else {\n      \n      infoBox(\"Actual\",formatC(actual_photoviews, format = \"f\", digits = 0, big.mark = \",\"), width = 12, color = \"red\", icon = icon(\"fa fa-times\"), fill = TRUE)\n      \n    }\n    \n  })\n  \n  output$infobox3 <- renderInfoBox({\n    \n    WeekVideos <- DataVideos[which(DataVideos$date >= input$dateRange1[1] & DataVideos$date <= input$dateRange1[2]),]\n    \n    actual_videoviews <- mean(WeekVideos$post_video_views)\n    \n    if(actual_videoviews > sprint_benchs[3]){\n      \n      infoBox(\"Actual\",formatC(actual_videoviews, format = \"f\", digits = 0, big.mark = \",\"), width = 12, color = \"olive\", icon = icon(\"fa fa-check\"), fill = TRUE)\n      \n    }\n    \n    else {\n      \n      infoBox(\"Actual\",formatC(actual_videoviews, format = \"f\", digits = 0, big.mark = \",\"), width = 12, color = \"red\", icon = icon(\"fa fa-times\"), fill = TRUE)\n      \n    }\n    \n  })\n  \n}\n\n# SHINY APP ========================================================================================================================\n\nshinyApp(ui, server)\n\n",
    "created" : 1473097018815.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "128|19|147|0|\n148|19|164|0|\n165|14|177|0|\n178|15|185|0|\n191|39|194|20|\n195|40|221|20|\n222|37|226|24|\n227|38|232|33|\n233|63|339|33|\n340|63|444|33|\n445|58|531|24|\n532|34|537|33|\n538|59|786|33|\n787|59|933|22|\n934|39|939|33|\n940|64|945|44|\n946|62|982|44|\n983|60|1017|44|\n1018|65|1052|44|\n1053|59|1082|33|\n1083|64|1088|44|\n1089|62|1119|44|\n1120|60|1151|44|\n1152|65|1183|44|\n1184|59|1210|33|\n1211|59|1216|44|\n1217|62|1247|44|\n1248|60|1279|44|\n1280|65|1311|44|\n1312|59|1343|0|\n1344|42|1349|33|\n1350|67|1355|44|\n1356|62|1390|44|\n1391|60|1425|44|\n1426|65|1460|44|\n1461|59|1490|33|\n1491|67|1496|44|\n1497|62|1530|44|\n1531|60|1564|44|\n1565|65|1598|44|\n1599|59|1627|33|\n1628|62|1633|44|\n1634|62|1667|44|\n1668|60|1701|44|\n1702|65|1735|44|\n1736|59|1767|24|\n1768|49|1781|24|\n1782|48|1787|33|\n1788|73|1793|44|\n1794|62|1797|53|\n1798|76|1802|53|\n1803|78|1807|53|\n1808|90|1812|53|\n1813|79|1817|53|\n1818|74|1848|44|\n1849|60|1852|53|\n1853|76|1857|53|\n1858|78|1862|53|\n1863|90|1867|53|\n1868|73|1872|53|\n1873|74|1903|44|\n1904|65|1907|53|\n1908|76|1912|53|\n1913|78|1917|53|\n1918|90|1922|53|\n1923|73|1927|53|\n1928|74|1960|33|\n1961|73|1966|44|\n1967|62|1970|53|\n1971|76|1975|53|\n1976|78|1980|53|\n1981|90|1985|53|\n1986|79|1990|53|\n1991|74|2026|24|\n2027|38|2032|33|\n2033|49|2082|33|\n2083|47|2132|33|\n2133|52|2183|33|\n2184|46|2224|24|\n2225|37|2254|0|\n2261|36|2772|2|\n2272|16|2278|2|\n2278|6|2280|2|\n2282|16|2289|4|\n2289|8|2304|2|\n2306|44|2308|2|\n2310|16|2316|2|\n2316|6|2318|2|\n2320|16|2327|2|\n2327|6|2341|2|\n2343|47|2345|2|\n2348|16|2354|2|\n2354|6|2356|2|\n2358|16|2365|2|\n2365|6|2379|2|\n2381|42|2383|2|\n2385|16|2391|2|\n2391|6|2393|2|\n2395|16|2402|2|\n2402|6|2416|2|\n2418|45|2420|2|\n2423|16|2429|2|\n2429|6|2431|2|\n2433|16|2440|2|\n2440|6|2454|2|\n2456|47|2458|2|\n2460|16|2466|2|\n2466|6|2468|2|\n2470|16|2477|2|\n2477|6|2491|2|\n2493|50|2495|2|\n2498|16|2503|2|\n2503|6|2505|2|\n2507|16|2513|2|\n2513|6|2525|2|\n2527|41|2529|2|\n2531|16|2536|2|\n2536|6|2538|2|\n2540|16|2546|2|\n2546|6|2558|2|\n2560|44|2562|2|\n2565|28|2591|2|\n2593|31|2619|2|\n2621|29|2647|2|\n2649|32|2675|2|\n2677|33|2700|2|\n2702|36|2725|2|\n2727|28|2748|2|\n2750|31|2770|2|\n2773|37|3283|0|\n2784|16|2790|2|\n2790|6|2792|2|\n2794|16|2801|2|\n2801|6|2816|2|\n2818|47|2820|2|\n2822|16|2828|2|\n2828|6|2830|2|\n2832|16|2839|2|\n2839|6|2853|2|\n2855|50|2857|2|\n2860|16|2866|2|\n2866|6|2868|2|\n2870|16|2877|2|\n2877|6|2891|2|\n2893|45|2895|2|\n2897|16|2903|2|\n2903|6|2905|2|\n2907|16|2914|2|\n2914|6|2928|2|\n2930|48|2932|2|\n2935|16|2941|2|\n2941|6|2943|2|\n2945|16|2952|2|\n2952|6|2966|2|\n2968|50|2970|2|\n2972|16|2978|2|\n2978|6|2980|2|\n2982|16|2989|2|\n2989|6|3003|2|\n3005|53|3007|2|\n3010|16|3015|2|\n3015|6|3017|2|\n3019|16|3025|2|\n3025|6|3037|2|\n3039|44|3041|2|\n3043|16|3048|2|\n3048|6|3050|2|\n3052|16|3058|2|\n3058|6|3070|2|\n3072|47|3074|2|\n3077|30|3103|2|\n3105|33|3131|2|\n3133|31|3159|2|\n3161|34|3187|2|\n3189|35|3212|2|\n3214|38|3237|2|\n3239|30|3260|2|\n3262|33|3282|2|\n3284|32|3795|2|\n3295|16|3301|2|\n3301|6|3303|2|\n3305|16|3312|2|\n3312|6|3327|2|\n3329|47|3331|2|\n3333|16|3339|2|\n3339|6|3341|2|\n3343|16|3350|2|\n3350|6|3364|2|\n3366|50|3368|2|\n3371|16|3377|2|\n3377|6|3379|2|\n3381|16|3388|2|\n3388|6|3402|2|\n3404|45|3406|2|\n3408|16|3414|2|\n3414|6|3416|2|\n3418|16|3425|2|\n3425|6|3439|2|\n3441|48|3443|2|\n3446|16|3452|2|\n3452|6|3454|2|\n3456|16|3463|2|\n3463|6|3477|2|\n3479|50|3481|2|\n3483|16|3489|2|\n3489|6|3491|2|\n3493|16|3500|2|\n3500|6|3514|2|\n3516|53|3518|2|\n3521|16|3526|2|\n3526|6|3528|2|\n3530|16|3536|2|\n3536|6|3548|2|\n3550|44|3552|2|\n3554|16|3559|2|\n3559|6|3561|2|\n3563|16|3569|2|\n3569|6|3581|2|\n3583|47|3585|2|\n3588|30|3614|2|\n3616|33|3642|2|\n3644|31|3670|2|\n3672|34|3698|2|\n3700|35|3723|2|\n3725|38|3748|2|\n3750|30|3771|2|\n3773|33|3793|2|\n3803|44|3844|2|\n3885|44|3926|2|\n3928|45|3964|2|\n3966|44|4007|2|\n4009|45|4045|2|\n4047|44|4088|2|\n4090|45|4125|2|\n4128|140|4145|2|\n4147|143|4164|2|\n4166|115|4181|2|\n4183|202|4203|2|\n4205|51|4266|2|\n4269|32|4687|2|\n4271|46|4310|2|\n4312|47|4342|2|\n4344|46|4383|2|\n4385|47|4415|2|\n4417|46|4456|2|\n4458|47|4488|2|\n4490|46|4531|2|\n4533|47|4564|2|\n4567|53|4607|2|\n4609|57|4637|2|\n4639|60|4686|2|\n4688|27|4984|2|\n4690|46|4729|2|\n4731|47|4761|2|\n4763|46|4802|2|\n4804|47|4834|2|\n4836|46|4875|2|\n4877|47|4907|2|\n4909|46|4950|2|\n4952|47|4983|2|\n4989|28|7164|2|\n4991|38|5048|2|\n5050|39|5108|2|\n5110|39|5167|2|\n5169|39|5224|2|\n5228|56|5269|2|\n5271|60|5297|2|\n5299|56|5307|2|\n5309|51|5365|2|\n5368|63|5409|2|\n5411|67|5437|2|\n5439|63|5447|2|\n5449|58|5507|2|\n5510|61|5551|2|\n5553|65|5579|2|\n5581|61|5589|2|\n5591|56|5649|2|\n5652|60|5693|2|\n5695|64|5721|2|\n5723|60|5731|2|\n5733|55|5789|2|\n5794|52|5832|2|\n5834|61|5860|2|\n5864|55|5916|2|\n5918|59|5942|2|\n5944|50|6000|2|\n6006|48|6058|2|\n6060|48|6068|2|\n6070|43|6126|2|\n6130|53|6183|2|\n6185|53|6193|2|\n6195|47|6249|2|\n6253|55|6309|2|\n6311|59|6339|2|\n6341|50|6400|2|\n6404|51|6456|2|\n6458|55|6482|2|\n6484|46|6551|2|\n6555|52|6607|2|\n6609|56|6633|2|\n6635|47|6702|2|\n6706|49|6758|2|\n6760|53|6784|2|\n6786|44|6853|2|\n6857|53|6910|2|\n6912|57|6936|2|\n6938|48|7005|2|\n7009|48|7061|2|\n7063|52|7087|2|\n7089|43|7163|2|\n7165|28|8864|2|\n7167|40|7224|2|\n7226|41|7284|2|\n7286|41|7343|2|\n7345|41|7400|2|\n7402|58|7452|2|\n7454|58|7462|2|\n7464|53|7522|2|\n7524|65|7574|2|\n7576|65|7584|2|\n7586|60|7643|2|\n7645|63|7696|2|\n7698|63|7706|2|\n7708|58|7764|2|\n7766|62|7816|2|\n7818|62|7826|2|\n7828|57|7884|2|\n7886|54|7932|2|\n7934|59|7985|2|\n7987|57|8041|2|\n8043|57|8051|2|\n8053|52|8106|2|\n8108|52|8157|2|\n8159|50|8211|2|\n8213|50|8221|2|\n8223|45|8277|2|\n8279|55|8332|2|\n8334|55|8342|2|\n8344|49|8398|2|\n8400|57|8450|2|\n8452|57|8460|2|\n8462|52|8516|2|\n8518|48|8584|2|\n8586|49|8652|2|\n8654|46|8720|2|\n8722|50|8788|2|\n8790|45|8863|2|\n8867|87|8882|2|\n8884|76|8899|2|\n8901|134|8920|2|\n8922|75|8937|2|\n8939|48|8951|2|\n8957|21|8958|2|\n8959|17|9105|2|\n8961|39|8973|2|\n8975|41|8999|2|\n9001|35|9019|2|\n9021|35|9042|2|\n9044|36|9083|2|\n9085|36|9104|2|\n9106|20|9253|2|\n9108|39|9120|2|\n9122|41|9147|2|\n9149|35|9167|2|\n9169|35|9190|2|\n9192|36|9231|2|\n9233|36|9252|2|\n9254|18|9255|2|\n9256|17|9400|2|\n9258|39|9273|2|\n9275|41|9299|2|\n9301|35|9319|2|\n9321|36|9335|2|\n9337|36|9378|2|\n9380|36|9399|2|\n9401|20|9545|2|\n9403|39|9419|2|\n9421|41|9446|2|\n9448|35|9466|2|\n9468|36|9482|2|\n9484|36|9523|2|\n9525|36|9544|2|\n9546|23|9547|2|\n9548|17|9691|2|\n9550|40|9566|2|\n9568|42|9592|2|\n9594|36|9612|2|\n9614|37|9628|2|\n9630|37|9669|2|\n9671|37|9690|2|\n9692|20|9836|2|\n9694|40|9710|2|\n9712|42|9737|2|\n9739|36|9757|2|\n9759|37|9773|2|\n9775|37|9814|2|\n9816|37|9835|2|\n9837|17|9838|2|\n9839|17|9963|2|\n9841|39|9856|2|\n9858|41|9880|2|\n9882|35|9900|2|\n9902|36|9941|2|\n9943|36|9962|2|\n9964|20|10090|2|\n9966|39|9981|2|\n9983|41|10006|2|\n10008|35|10026|2|\n10028|36|10067|2|\n10069|36|10088|2|\n10095|21|10096|2|\n10097|17|10243|2|\n10099|42|10111|2|\n10113|44|10137|2|\n10159|38|10180|2|\n10182|39|10221|2|\n10223|39|10242|2|\n10244|20|10391|2|\n10246|42|10258|2|\n10260|44|10285|2|\n10287|38|10305|2|\n10307|38|10328|2|\n10330|39|10369|2|\n10371|39|10390|2|\n10392|19|10393|2|\n10394|17|10538|2|\n10396|42|10411|2|\n10413|44|10437|2|\n10439|38|10457|2|\n10459|39|10473|2|\n10475|39|10516|2|\n10518|39|10537|2|\n10539|20|10683|2|\n10541|42|10557|2|\n10559|44|10584|2|\n10586|38|10604|2|\n10606|39|10620|2|\n10622|39|10661|2|\n10663|39|10682|2|\n10684|23|10685|2|\n10686|17|10829|2|\n10688|43|10704|2|\n10706|45|10730|2|\n10732|39|10750|2|\n10752|40|10766|2|\n10768|40|10807|2|\n10809|40|10828|2|\n10830|20|10974|2|\n10832|43|10848|2|\n10850|45|10875|2|\n10877|39|10895|2|\n10897|40|10911|2|\n10913|40|10952|2|\n10954|40|10973|2|\n10975|17|10976|2|\n10977|17|11102|2|\n10979|42|10994|2|\n10996|44|11018|2|\n11020|38|11038|2|\n11040|39|11079|2|\n11081|39|11100|2|\n11103|20|11228|2|\n11105|42|11120|2|\n11122|44|11145|2|\n11147|38|11165|2|\n11167|39|11206|2|\n11208|39|11227|2|\n11233|21|11234|2|\n11235|17|11381|2|\n11237|42|11249|2|\n11251|44|11275|2|\n11277|38|11295|2|\n11297|38|11318|2|\n11320|39|11359|2|\n11361|39|11380|2|\n11382|20|11529|2|\n11384|42|11396|2|\n11398|44|11423|2|\n11425|38|11443|2|\n11445|38|11466|2|\n11468|39|11507|2|\n11509|39|11528|2|\n11530|19|11531|2|\n11532|17|11678|2|\n11534|42|11549|2|\n11551|44|11575|2|\n11577|38|11595|2|\n11597|39|11611|2|\n11614|39|11655|2|\n11657|39|11676|2|\n11679|20|11823|2|\n11681|42|11697|2|\n11699|44|11724|2|\n11726|38|11744|2|\n11746|39|11760|2|\n11762|39|11801|2|\n11803|39|11822|2|\n11824|23|11825|2|\n11826|17|11969|2|\n11828|43|11844|2|\n11846|45|11870|2|\n11872|39|11890|2|\n11892|40|11906|2|\n11908|40|11947|2|\n11949|40|11968|2|\n11970|20|12114|2|\n11972|43|11988|2|\n11990|45|12015|2|\n12017|39|12035|2|\n12037|40|12051|2|\n12053|40|12092|2|\n12094|40|12113|2|\n12115|17|12116|2|\n12117|17|12240|4|\n12119|42|12134|2|\n12136|44|12158|2|\n12160|38|12178|2|\n12180|39|12219|2|\n12221|39|12240|2|\n12241|20|12366|2|\n12243|42|12258|2|\n12260|44|12283|2|\n12285|38|12303|2|\n12305|39|12344|2|\n12346|39|12365|2|\n12372|42|12373|2|\n12374|16|12392|2|\n12376|42|12391|2|\n12393|17|12411|2|\n12395|42|12410|2|\n12417|34|12420|20|\n12421|22|12628|2|\n12423|53|12503|2|\n12505|53|12627|2|\n12629|22|12693|2|\n12631|45|12692|2|\n12694|17|12736|2|\n12696|45|12735|2|\n12737|28|12763|2|\n12739|45|12762|2|\n12764|22|12793|2|\n12766|45|12791|2|\n12796|22|12987|2|\n12798|58|12891|2|\n12893|58|12986|2|\n12988|22|13052|2|\n12990|50|13051|2|\n13053|17|13099|2|\n13055|50|13098|2|\n13100|33|13125|2|\n13126|16|13151|2|\n13128|50|13149|2|\n13154|33|13345|2|\n13156|62|13249|2|\n13251|62|13344|2|\n13346|22|13410|2|\n13348|54|13409|2|\n13411|17|13455|2|\n13413|54|13454|2|\n13456|33|13481|2|\n13458|54|13480|2|\n13482|16|13507|2|\n13484|54|13505|2|\n13510|34|13668|2|\n13512|47|13571|2|\n13574|47|13612|2|\n13615|47|13638|2|\n13641|47|13666|2|\n13669|15|13670|2|\n13671|31|13674|2|\n13675|20|13965|2|\n13677|58|13706|2|\n13708|58|13737|2|\n13739|58|13769|2|\n13771|54|13793|2|\n13795|58|13817|2|\n13819|57|13862|2|\n13864|57|13893|2|\n13895|57|13924|2|\n13926|40|13940|2|\n13942|61|13964|2|\n13966|18|14254|2|\n13968|56|13997|2|\n13999|56|14028|2|\n14030|56|14059|2|\n14061|52|14082|2|\n14084|56|14105|2|\n14107|55|14150|2|\n14152|55|14181|2|\n14183|55|14212|2|\n14214|38|14230|2|\n14232|59|14253|2|\n14255|23|14543|2|\n14257|60|14286|2|\n14288|60|14317|2|\n14319|60|14348|2|\n14350|56|14371|2|\n14373|60|14394|2|\n14396|59|14439|2|\n14441|59|14470|2|\n14472|59|14501|2|\n14503|43|14519|2|\n14521|63|14542|2|\n14544|17|14773|2|\n14546|55|14575|2|\n14577|55|14607|2|\n14609|51|14631|2|\n14633|55|14655|2|\n14657|54|14700|2|\n14702|54|14731|2|\n14733|37|14748|2|\n14750|58|14772|2|\n14777|15|14838|2|\n14779|36|14797|2|\n14799|36|14817|2|\n14819|36|14837|2|\n",
    "hash" : "2713433084",
    "id" : "EDAA57F1",
    "lastKnownWriteTime" : 1504291703,
    "last_content_update" : 1504291703962,
    "path" : "~/WeeklyRecApp/app.R",
    "project_path" : "app.R",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}